
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f198  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ac  0800f358  0800f358  0001f358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc04  0800fc04  0002029c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc04  0800fc04  0001fc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc0c  0800fc0c  0002029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc0c  0800fc0c  0001fc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc10  0800fc10  0001fc10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  0800fc14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001414  2000029c  0800feb0  0002029c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016b0  0800feb0  000216b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024090  00000000  00000000  0002030f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005272  00000000  00000000  0004439f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ed8  00000000  00000000  00049618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017d8  00000000  00000000  0004b4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030b1e  00000000  00000000  0004ccc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000262ac  00000000  00000000  0007d7e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012106c  00000000  00000000  000a3a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000090a4  00000000  00000000  001c4b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001cdba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000029c 	.word	0x2000029c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800f340 	.word	0x0800f340

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200002a0 	.word	0x200002a0
 80001fc:	0800f340 	.word	0x0800f340

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ee4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	4a06      	ldr	r2, [pc, #24]	; (8000f04 <vApplicationGetIdleTaskMemory+0x30>)
 8000eea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2280      	movs	r2, #128	; 0x80
 8000ef0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	200002b8 	.word	0x200002b8
 8000f04:	2000030c 	.word	0x2000030c

08000f08 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f08:	b5b0      	push	{r4, r5, r7, lr}
 8000f0a:	b0b0      	sub	sp, #192	; 0xc0
 8000f0c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f0e:	f003 fed1 	bl	8004cb4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f12:	f000 f891 	bl	8001038 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f16:	f000 f9c1 	bl	800129c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000f1a:	f000 f973 	bl	8001204 <MX_USART1_UART_Init>
	MX_I2C2_Init();
 8000f1e:	f000 f8dd 	bl	80010dc <MX_I2C2_Init>
	MX_OCTOSPI1_Init();
 8000f22:	f000 f91b 	bl	800115c <MX_OCTOSPI1_Init>
	/* USER CODE BEGIN 2 */

	BSP_ACCELERO_Init();
 8000f26:	f002 fb8b 	bl	8003640 <BSP_ACCELERO_Init>
	BSP_GYRO_Init();
 8000f2a:	f002 fbdf 	bl	80036ec <BSP_GYRO_Init>
	BSP_TSENSOR_Init();
 8000f2e:	f003 f921 	bl	8004174 <BSP_TSENSOR_Init>
	BSP_HSENSOR_Init();
 8000f32:	f002 fc35 	bl	80037a0 <BSP_HSENSOR_Init>
	BSP_MAGNETO_Init();
 8000f36:	f002 fc61 	bl	80037fc <BSP_MAGNETO_Init>
	BSP_PSENSOR_Init();
 8000f3a:	f002 fca3 	bl	8003884 <BSP_PSENSOR_Init>

	BSP_QSPI_Init();
 8000f3e:	f002 fccf 	bl	80038e0 <BSP_QSPI_Init>

	uint8_t buffer[100];

	if (BSP_QSPI_Erase_Block(0x20) == QSPI_OK) {
 8000f42:	2020      	movs	r0, #32
 8000f44:	f002 fe22 	bl	8003b8c <BSP_QSPI_Erase_Block>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d119      	bne.n	8000f82 <main+0x7a>
		memset(buffer, 0, sizeof(buffer));
 8000f4e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f52:	2264      	movs	r2, #100	; 0x64
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f00c f8b6 	bl	800d0c8 <memset>
		sprintf(buffer, "Erased memory! \r\n");
 8000f5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f60:	492b      	ldr	r1, [pc, #172]	; (8001010 <main+0x108>)
 8000f62:	4618      	mov	r0, r3
 8000f64:	f00b ffe0 	bl	800cf28 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 300000);
 8000f68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff f997 	bl	80002a0 <strlen>
 8000f72:	4603      	mov	r3, r0
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8000f7a:	4b26      	ldr	r3, [pc, #152]	; (8001014 <main+0x10c>)
 8000f7c:	4826      	ldr	r0, [pc, #152]	; (8001018 <main+0x110>)
 8000f7e:	f008 f8fd 	bl	800917c <HAL_UART_Transmit>

	/* USER CODE END 2 */

	/* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
	osMutexDef(osMutex);
 8000f82:	2300      	movs	r3, #0
 8000f84:	657b      	str	r3, [r7, #84]	; 0x54
 8000f86:	2300      	movs	r3, #0
 8000f88:	65bb      	str	r3, [r7, #88]	; 0x58

	mutex = osMutexCreate(osMutex(osMutex));
 8000f8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f009 f82d 	bl	8009fee <osMutexCreate>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a21      	ldr	r2, [pc, #132]	; (800101c <main+0x114>)
 8000f98:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of button_control */
	osThreadDef(button_control, buttonControl, osPriorityHigh, 0, 128);
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <main+0x118>)
 8000f9c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000fa0:	461d      	mov	r5, r3
 8000fa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000faa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	button_controlHandle = osThreadCreate(osThread(button_control), NULL);
 8000fae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f008 ffba 	bl	8009f2e <osThreadCreate>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a19      	ldr	r2, [pc, #100]	; (8001024 <main+0x11c>)
 8000fbe:	6013      	str	r3, [r2, #0]

	/* definition and creation of transmit_data */
	osThreadDef(transmit_data, transmitData, osPriorityNormal, 0, 256);
 8000fc0:	4b19      	ldr	r3, [pc, #100]	; (8001028 <main+0x120>)
 8000fc2:	f107 041c 	add.w	r4, r7, #28
 8000fc6:	461d      	mov	r5, r3
 8000fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	transmit_dataHandle = osThreadCreate(osThread(transmit_data), NULL);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f008 ffa7 	bl	8009f2e <osThreadCreate>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <main+0x124>)
 8000fe4:	6013      	str	r3, [r2, #0]

	/* definition and creation of read_data */
	osThreadDef(read_data, readData, osPriorityNormal, 0, 256);
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <main+0x128>)
 8000fe8:	463c      	mov	r4, r7
 8000fea:	461d      	mov	r5, r3
 8000fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ff4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	read_dataHandle = osThreadCreate(osThread(read_data), NULL);
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f008 ff96 	bl	8009f2e <osThreadCreate>
 8001002:	4603      	mov	r3, r0
 8001004:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <main+0x12c>)
 8001006:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8001008:	f008 ff8a 	bl	8009f20 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800100c:	e7fe      	b.n	800100c <main+0x104>
 800100e:	bf00      	nop
 8001010:	0800f358 	.word	0x0800f358
 8001014:	000493e0 	.word	0x000493e0
 8001018:	200005b0 	.word	0x200005b0
 800101c:	20000650 	.word	0x20000650
 8001020:	0800f37c 	.word	0x0800f37c
 8001024:	20000644 	.word	0x20000644
 8001028:	0800f3a8 	.word	0x0800f3a8
 800102c:	20000648 	.word	0x20000648
 8001030:	0800f3d0 	.word	0x0800f3d0
 8001034:	2000064c 	.word	0x2000064c

08001038 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b096      	sub	sp, #88	; 0x58
 800103c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2244      	movs	r2, #68	; 0x44
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f00c f83e 	bl	800d0c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800104c:	463b      	mov	r3, r7
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800105a:	2000      	movs	r0, #0
 800105c:	f006 f8c4 	bl	80071e8 <HAL_PWREx_ControlVoltageScaling>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x32>
			!= HAL_OK) {
		Error_Handler();
 8001066:	f001 fe45 	bl	8002cf4 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800106a:	2310      	movs	r3, #16
 800106c:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800106e:	2301      	movs	r3, #1
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001076:	2360      	movs	r3, #96	; 0x60
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107a:	2302      	movs	r3, #2
 800107c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800107e:	2301      	movs	r3, #1
 8001080:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001082:	2301      	movs	r3, #1
 8001084:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 60;
 8001086:	233c      	movs	r3, #60	; 0x3c
 8001088:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800108a:	2302      	movs	r3, #2
 800108c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800108e:	2302      	movs	r3, #2
 8001090:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001092:	2302      	movs	r3, #2
 8001094:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4618      	mov	r0, r3
 800109c:	f006 f948 	bl	8007330 <HAL_RCC_OscConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0x72>
		Error_Handler();
 80010a6:	f001 fe25 	bl	8002cf4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010aa:	230f      	movs	r3, #15
 80010ac:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ae:	2303      	movs	r3, #3
 80010b0:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80010be:	463b      	mov	r3, r7
 80010c0:	2105      	movs	r1, #5
 80010c2:	4618      	mov	r0, r3
 80010c4:	f006 fd4e 	bl	8007b64 <HAL_RCC_ClockConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0x9a>
		Error_Handler();
 80010ce:	f001 fe11 	bl	8002cf4 <Error_Handler>
	}
}
 80010d2:	bf00      	nop
 80010d4:	3758      	adds	r7, #88	; 0x58
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <MX_I2C2_Init+0x74>)
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <MX_I2C2_Init+0x78>)
 80010e4:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x307075B1;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_I2C2_Init+0x74>)
 80010e8:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <MX_I2C2_Init+0x7c>)
 80010ea:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <MX_I2C2_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <MX_I2C2_Init+0x74>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <MX_I2C2_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_I2C2_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_I2C2_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_I2C2_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_I2C2_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001116:	480e      	ldr	r0, [pc, #56]	; (8001150 <MX_I2C2_Init+0x74>)
 8001118:	f004 f982 	bl	8005420 <HAL_I2C_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_I2C2_Init+0x4a>
		Error_Handler();
 8001122:	f001 fde7 	bl	8002cf4 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8001126:	2100      	movs	r1, #0
 8001128:	4809      	ldr	r0, [pc, #36]	; (8001150 <MX_I2C2_Init+0x74>)
 800112a:	f004 ff29 	bl	8005f80 <HAL_I2CEx_ConfigAnalogFilter>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001134:	f001 fdde 	bl	8002cf4 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8001138:	2100      	movs	r1, #0
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_I2C2_Init+0x74>)
 800113c:	f004 ff6b 	bl	8006016 <HAL_I2CEx_ConfigDigitalFilter>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_I2C2_Init+0x6e>
		Error_Handler();
 8001146:	f001 fdd5 	bl	8002cf4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000050c 	.word	0x2000050c
 8001154:	40005800 	.word	0x40005800
 8001158:	307075b1 	.word	0x307075b1

0800115c <MX_OCTOSPI1_Init>:
/**
 * @brief OCTOSPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_OCTOSPI1_Init(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN OCTOSPI1_Init 0 */

	/* USER CODE END OCTOSPI1_Init 0 */

	OSPIM_CfgTypeDef OSPIM_Cfg_Struct = { 0 };
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]

	/* USER CODE BEGIN OCTOSPI1_Init 1 */

	/* USER CODE END OCTOSPI1_Init 1 */
	/* OCTOSPI1 parameter configuration*/
	hospi1.Instance = OCTOSPI1;
 8001170:	4b22      	ldr	r3, [pc, #136]	; (80011fc <MX_OCTOSPI1_Init+0xa0>)
 8001172:	4a23      	ldr	r2, [pc, #140]	; (8001200 <MX_OCTOSPI1_Init+0xa4>)
 8001174:	601a      	str	r2, [r3, #0]
	hospi1.Init.FifoThreshold = 1;
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <MX_OCTOSPI1_Init+0xa0>)
 8001178:	2201      	movs	r2, #1
 800117a:	605a      	str	r2, [r3, #4]
	hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <MX_OCTOSPI1_Init+0xa0>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
	hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <MX_OCTOSPI1_Init+0xa0>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
	hospi1.Init.DeviceSize = 32;
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <MX_OCTOSPI1_Init+0xa0>)
 800118a:	2220      	movs	r2, #32
 800118c:	611a      	str	r2, [r3, #16]
	hospi1.Init.ChipSelectHighTime = 1;
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_OCTOSPI1_Init+0xa0>)
 8001190:	2201      	movs	r2, #1
 8001192:	615a      	str	r2, [r3, #20]
	hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_OCTOSPI1_Init+0xa0>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
	hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <MX_OCTOSPI1_Init+0xa0>)
 800119c:	2200      	movs	r2, #0
 800119e:	61da      	str	r2, [r3, #28]
	hospi1.Init.ClockPrescaler = 1;
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_OCTOSPI1_Init+0xa0>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	621a      	str	r2, [r3, #32]
	hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <MX_OCTOSPI1_Init+0xa0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
	hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <MX_OCTOSPI1_Init+0xa0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	629a      	str	r2, [r3, #40]	; 0x28
	hospi1.Init.ChipSelectBoundary = 0;
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_OCTOSPI1_Init+0xa0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
	hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <MX_OCTOSPI1_Init+0xa0>)
 80011ba:	2208      	movs	r2, #8
 80011bc:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_OSPI_Init(&hospi1) != HAL_OK) {
 80011be:	480f      	ldr	r0, [pc, #60]	; (80011fc <MX_OCTOSPI1_Init+0xa0>)
 80011c0:	f004 ff76 	bl	80060b0 <HAL_OSPI_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_OCTOSPI1_Init+0x72>
		Error_Handler();
 80011ca:	f001 fd93 	bl	8002cf4 <Error_Handler>
	}
	OSPIM_Cfg_Struct.ClkPort = 1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	607b      	str	r3, [r7, #4]
	OSPIM_Cfg_Struct.NCSPort = 1;
 80011d2:	2301      	movs	r3, #1
 80011d4:	60fb      	str	r3, [r7, #12]
	OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80011d6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80011da:	613b      	str	r3, [r7, #16]
	if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct,
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_OCTOSPI1_Init+0xa0>)
 80011e6:	f005 fa61 	bl	80066ac <HAL_OSPIM_Config>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_OCTOSPI1_Init+0x98>
	HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 80011f0:	f001 fd80 	bl	8002cf4 <Error_Handler>
	}
	/* USER CODE BEGIN OCTOSPI1_Init 2 */

	/* USER CODE END OCTOSPI1_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000560 	.word	0x20000560
 8001200:	a0001000 	.word	0xa0001000

08001204 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001208:	4b22      	ldr	r3, [pc, #136]	; (8001294 <MX_USART1_UART_Init+0x90>)
 800120a:	4a23      	ldr	r2, [pc, #140]	; (8001298 <MX_USART1_UART_Init+0x94>)
 800120c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800120e:	4b21      	ldr	r3, [pc, #132]	; (8001294 <MX_USART1_UART_Init+0x90>)
 8001210:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001214:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <MX_USART1_UART_Init+0x90>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <MX_USART1_UART_Init+0x90>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <MX_USART1_UART_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <MX_USART1_UART_Init+0x90>)
 800122a:	220c      	movs	r2, #12
 800122c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <MX_USART1_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <MX_USART1_UART_Init+0x90>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <MX_USART1_UART_Init+0x90>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_USART1_UART_Init+0x90>)
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <MX_USART1_UART_Init+0x90>)
 8001248:	2200      	movs	r2, #0
 800124a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800124c:	4811      	ldr	r0, [pc, #68]	; (8001294 <MX_USART1_UART_Init+0x90>)
 800124e:	f007 ff45 	bl	80090dc <HAL_UART_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8001258:	f001 fd4c 	bl	8002cf4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 800125c:	2100      	movs	r1, #0
 800125e:	480d      	ldr	r0, [pc, #52]	; (8001294 <MX_USART1_UART_Init+0x90>)
 8001260:	f008 fd6a 	bl	8009d38 <HAL_UARTEx_SetTxFifoThreshold>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800126a:	f001 fd43 	bl	8002cf4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 800126e:	2100      	movs	r1, #0
 8001270:	4808      	ldr	r0, [pc, #32]	; (8001294 <MX_USART1_UART_Init+0x90>)
 8001272:	f008 fd9f 	bl	8009db4 <HAL_UARTEx_SetRxFifoThreshold>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 800127c:	f001 fd3a 	bl	8002cf4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <MX_USART1_UART_Init+0x90>)
 8001282:	f008 fd20 	bl	8009cc6 <HAL_UARTEx_DisableFifoMode>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 800128c:	f001 fd32 	bl	8002cf4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200005b0 	.word	0x200005b0
 8001298:	40013800 	.word	0x40013800

0800129c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <MX_GPIO_Init+0x80>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	4a19      	ldr	r2, [pc, #100]	; (800131c <MX_GPIO_Init+0x80>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <MX_GPIO_Init+0x80>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_GPIO_Init+0x80>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <MX_GPIO_Init+0x80>)
 80012d0:	f043 0310 	orr.w	r3, r3, #16
 80012d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_GPIO_Init+0x80>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_GPIO_Init+0x80>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	4a0d      	ldr	r2, [pc, #52]	; (800131c <MX_GPIO_Init+0x80>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <MX_GPIO_Init+0x80>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : PIN_BUTTON_Pin */
	GPIO_InitStruct.Pin = PIN_BUTTON_Pin;
 80012fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(PIN_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	4619      	mov	r1, r3
 800130e:	4804      	ldr	r0, [pc, #16]	; (8001320 <MX_GPIO_Init+0x84>)
 8001310:	f003 fdea 	bl	8004ee8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001314:	bf00      	nop
 8001316:	3720      	adds	r7, #32
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40021000 	.word	0x40021000
 8001320:	48000800 	.word	0x48000800

08001324 <calculate>:

/* USER CODE BEGIN 4 */

void calculate(float *data, float size) {
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	ed87 0a00 	vstr	s0, [r7]

	samplesG = 0;
 8001330:	4b40      	ldr	r3, [pc, #256]	; (8001434 <calculate+0x110>)
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
	meanG = 0;
 8001338:	4b3f      	ldr	r3, [pc, #252]	; (8001438 <calculate+0x114>)
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
	varianceG = 0;
 8001340:	4b3e      	ldr	r3, [pc, #248]	; (800143c <calculate+0x118>)
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	601a      	str	r2, [r3, #0]

	float sum = 0, mean, variance = 0;
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]

	// Calculate sum of the samples
	for (int i = 0; i < size; ++i) {
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	e00e      	b.n	8001378 <calculate+0x54>
		sum += data[i];
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	edd3 7a00 	vldr	s15, [r3]
 8001366:	ed97 7a07 	vldr	s14, [r7, #28]
 800136a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136e:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 0; i < size; ++i) {
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	3301      	adds	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	ee07 3a90 	vmov	s15, r3
 800137e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001382:	ed97 7a00 	vldr	s14, [r7]
 8001386:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138e:	dce4      	bgt.n	800135a <calculate+0x36>
	}

	// Calculate mean
	mean = (float) sum / size;
 8001390:	edd7 6a07 	vldr	s13, [r7, #28]
 8001394:	ed97 7a00 	vldr	s14, [r7]
 8001398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800139c:	edc7 7a03 	vstr	s15, [r7, #12]

	// Calculate sum of squared differences from the mean
	for (int i = 0; i < size; ++i) {
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	e01e      	b.n	80013e4 <calculate+0xc0>
		int diff = data[i] - mean;
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	ed93 7a00 	vldr	s14, [r3]
 80013b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013be:	ee17 3a90 	vmov	r3, s15
 80013c2:	60bb      	str	r3, [r7, #8]
		variance += diff * diff;
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	fb03 f303 	mul.w	r3, r3, r3
 80013ca:	ee07 3a90 	vmov	s15, r3
 80013ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d2:	ed97 7a06 	vldr	s14, [r7, #24]
 80013d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013da:	edc7 7a06 	vstr	s15, [r7, #24]
	for (int i = 0; i < size; ++i) {
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	3301      	adds	r3, #1
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ee:	ed97 7a00 	vldr	s14, [r7]
 80013f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fa:	dcd4      	bgt.n	80013a6 <calculate+0x82>
	}

	// Finalize variance calculation
	variance /= (size - 1);
 80013fc:	edd7 7a00 	vldr	s15, [r7]
 8001400:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001404:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001408:	edd7 6a06 	vldr	s13, [r7, #24]
 800140c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001410:	edc7 7a06 	vstr	s15, [r7, #24]

	samplesG = 10;
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <calculate+0x110>)
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <calculate+0x11c>)
 8001418:	601a      	str	r2, [r3, #0]
	meanG = mean;
 800141a:	4a07      	ldr	r2, [pc, #28]	; (8001438 <calculate+0x114>)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6013      	str	r3, [r2, #0]
	varianceG = variance;
 8001420:	4a06      	ldr	r2, [pc, #24]	; (800143c <calculate+0x118>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	6013      	str	r3, [r2, #0]

}
 8001426:	bf00      	nop
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000718 	.word	0x20000718
 8001438:	2000071c 	.word	0x2000071c
 800143c:	20000720 	.word	0x20000720
 8001440:	41200000 	.word	0x41200000

08001444 <calculateMulti>:

void calculateMulti(float *dataA, float *dataB, float *dataC, float size) {
 8001444:	b480      	push	{r7}
 8001446:	b091      	sub	sp, #68	; 0x44
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	ed87 0a00 	vstr	s0, [r7]

	samplesGA = 0;
 8001454:	4bb5      	ldr	r3, [pc, #724]	; (800172c <calculateMulti+0x2e8>)
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
	meanGA = 0;
 800145c:	4bb4      	ldr	r3, [pc, #720]	; (8001730 <calculateMulti+0x2ec>)
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
	varianceGA = 0;
 8001464:	4bb3      	ldr	r3, [pc, #716]	; (8001734 <calculateMulti+0x2f0>)
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	601a      	str	r2, [r3, #0]

	samplesGB = 0;
 800146c:	4bb2      	ldr	r3, [pc, #712]	; (8001738 <calculateMulti+0x2f4>)
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
	meanGB = 0;
 8001474:	4bb1      	ldr	r3, [pc, #708]	; (800173c <calculateMulti+0x2f8>)
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
	varianceGB = 0;
 800147c:	4bb0      	ldr	r3, [pc, #704]	; (8001740 <calculateMulti+0x2fc>)
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	601a      	str	r2, [r3, #0]

	samplesGC = 0;
 8001484:	4baf      	ldr	r3, [pc, #700]	; (8001744 <calculateMulti+0x300>)
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
	meanGC = 0;
 800148c:	4bae      	ldr	r3, [pc, #696]	; (8001748 <calculateMulti+0x304>)
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
	varianceGC = 0;
 8001494:	4bad      	ldr	r3, [pc, #692]	; (800174c <calculateMulti+0x308>)
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	601a      	str	r2, [r3, #0]

	float sum = 0;
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	float mean, variance = 0;
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	63bb      	str	r3, [r7, #56]	; 0x38

	// Calculate sum of the samples
	for (int i = 0; i < size; ++i) {
 80014a8:	2300      	movs	r3, #0
 80014aa:	637b      	str	r3, [r7, #52]	; 0x34
 80014ac:	e00e      	b.n	80014cc <calculateMulti+0x88>
		sum += dataA[i];
 80014ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4413      	add	r3, r2
 80014b6:	edd3 7a00 	vldr	s15, [r3]
 80014ba:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80014be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	for (int i = 0; i < size; ++i) {
 80014c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c8:	3301      	adds	r3, #1
 80014ca:	637b      	str	r3, [r7, #52]	; 0x34
 80014cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d6:	ed97 7a00 	vldr	s14, [r7]
 80014da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e2:	dce4      	bgt.n	80014ae <calculateMulti+0x6a>
	}

	// Calculate mean
	mean = (float) sum / size;
 80014e4:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80014e8:	ed97 7a00 	vldr	s14, [r7]
 80014ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f0:	edc7 7a07 	vstr	s15, [r7, #28]

	// Calculate sum of squared differences from the mean
	for (int i = 0; i < size; ++i) {
 80014f4:	2300      	movs	r3, #0
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30
 80014f8:	e018      	b.n	800152c <calculateMulti+0xe8>
		float diff = (float) dataA[i] - mean;
 80014fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4413      	add	r3, r2
 8001502:	ed93 7a00 	vldr	s14, [r3]
 8001506:	edd7 7a07 	vldr	s15, [r7, #28]
 800150a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800150e:	edc7 7a04 	vstr	s15, [r7, #16]
		variance += diff * diff;
 8001512:	edd7 7a04 	vldr	s15, [r7, #16]
 8001516:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800151a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800151e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001522:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	for (int i = 0; i < size; ++i) {
 8001526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001528:	3301      	adds	r3, #1
 800152a:	633b      	str	r3, [r7, #48]	; 0x30
 800152c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800152e:	ee07 3a90 	vmov	s15, r3
 8001532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001536:	ed97 7a00 	vldr	s14, [r7]
 800153a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001542:	dcda      	bgt.n	80014fa <calculateMulti+0xb6>
	}

	// Finalize variance calculation
	variance /= (size - 1);
 8001544:	edd7 7a00 	vldr	s15, [r7]
 8001548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800154c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001550:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001558:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	samplesGA = 10;
 800155c:	4b73      	ldr	r3, [pc, #460]	; (800172c <calculateMulti+0x2e8>)
 800155e:	4a7c      	ldr	r2, [pc, #496]	; (8001750 <calculateMulti+0x30c>)
 8001560:	601a      	str	r2, [r3, #0]
	meanGA = mean;
 8001562:	4a73      	ldr	r2, [pc, #460]	; (8001730 <calculateMulti+0x2ec>)
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	6013      	str	r3, [r2, #0]
	varianceGA = variance;
 8001568:	4a72      	ldr	r2, [pc, #456]	; (8001734 <calculateMulti+0x2f0>)
 800156a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800156c:	6013      	str	r3, [r2, #0]

	sum = 0;
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
	mean = 0;
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
	variance = 0;
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	63bb      	str	r3, [r7, #56]	; 0x38

	// Calculate sum of the samples
	for (int i = 0; i < size; ++i) {
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001584:	e00e      	b.n	80015a4 <calculateMulti+0x160>
		sum += dataB[i];
 8001586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	4413      	add	r3, r2
 800158e:	edd3 7a00 	vldr	s15, [r3]
 8001592:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001596:	ee77 7a27 	vadd.f32	s15, s14, s15
 800159a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	for (int i = 0; i < size; ++i) {
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	3301      	adds	r3, #1
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ae:	ed97 7a00 	vldr	s14, [r7]
 80015b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ba:	dce4      	bgt.n	8001586 <calculateMulti+0x142>
	}

	// Calculate mean
	mean = (float) sum / size;
 80015bc:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80015c0:	ed97 7a00 	vldr	s14, [r7]
 80015c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015c8:	edc7 7a07 	vstr	s15, [r7, #28]

	// Calculate sum of squared differences from the mean
	for (int i = 0; i < size; ++i) {
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d0:	e018      	b.n	8001604 <calculateMulti+0x1c0>
		float diff =(float) dataB[i] - mean;
 80015d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	4413      	add	r3, r2
 80015da:	ed93 7a00 	vldr	s14, [r3]
 80015de:	edd7 7a07 	vldr	s15, [r7, #28]
 80015e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e6:	edc7 7a05 	vstr	s15, [r7, #20]
		variance += diff * diff;
 80015ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015f2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80015f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fa:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	for (int i = 0; i < size; ++i) {
 80015fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001600:	3301      	adds	r3, #1
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
 8001604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001606:	ee07 3a90 	vmov	s15, r3
 800160a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160e:	ed97 7a00 	vldr	s14, [r7]
 8001612:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161a:	dcda      	bgt.n	80015d2 <calculateMulti+0x18e>
	}

	// Finalize variance calculation
	variance /= (size - 1);
 800161c:	edd7 7a00 	vldr	s15, [r7]
 8001620:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001624:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001628:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800162c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001630:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	samplesGB = 10;
 8001634:	4b40      	ldr	r3, [pc, #256]	; (8001738 <calculateMulti+0x2f4>)
 8001636:	4a46      	ldr	r2, [pc, #280]	; (8001750 <calculateMulti+0x30c>)
 8001638:	601a      	str	r2, [r3, #0]
	meanGB = mean;
 800163a:	4a40      	ldr	r2, [pc, #256]	; (800173c <calculateMulti+0x2f8>)
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	6013      	str	r3, [r2, #0]
	varianceGB = variance;
 8001640:	4a3f      	ldr	r2, [pc, #252]	; (8001740 <calculateMulti+0x2fc>)
 8001642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001644:	6013      	str	r3, [r2, #0]

	sum = 0;
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	63fb      	str	r3, [r7, #60]	; 0x3c
	mean = 0;
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
	variance = 0;
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	63bb      	str	r3, [r7, #56]	; 0x38

	// Calculate sum of the samples
	for (int i = 0; i < size; ++i) {
 8001658:	2300      	movs	r3, #0
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
 800165c:	e00e      	b.n	800167c <calculateMulti+0x238>
		sum += dataC[i];
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800166e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001672:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	for (int i = 0; i < size; ++i) {
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	3301      	adds	r3, #1
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	ee07 3a90 	vmov	s15, r3
 8001682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001686:	ed97 7a00 	vldr	s14, [r7]
 800168a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001692:	dce4      	bgt.n	800165e <calculateMulti+0x21a>
	}

	// Calculate mean
	mean = (float) sum / size;
 8001694:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001698:	ed97 7a00 	vldr	s14, [r7]
 800169c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016a0:	edc7 7a07 	vstr	s15, [r7, #28]

	// Calculate sum of squared differences from the mean
	for (int i = 0; i < size; ++i) {
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
 80016a8:	e018      	b.n	80016dc <calculateMulti+0x298>
		float diff = (float) dataC[i] - mean;
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	ed93 7a00 	vldr	s14, [r3]
 80016b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80016ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016be:	edc7 7a06 	vstr	s15, [r7, #24]
		variance += diff * diff;
 80016c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80016c6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016ca:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80016ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	for (int i = 0; i < size; ++i) {
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	3301      	adds	r3, #1
 80016da:	623b      	str	r3, [r7, #32]
 80016dc:	6a3b      	ldr	r3, [r7, #32]
 80016de:	ee07 3a90 	vmov	s15, r3
 80016e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e6:	ed97 7a00 	vldr	s14, [r7]
 80016ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f2:	dcda      	bgt.n	80016aa <calculateMulti+0x266>
	}

	// Finalize variance calculation
	variance /= (size - 1);
 80016f4:	edd7 7a00 	vldr	s15, [r7]
 80016f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016fc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001700:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001708:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	samplesGC = 10;
 800170c:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <calculateMulti+0x300>)
 800170e:	4a10      	ldr	r2, [pc, #64]	; (8001750 <calculateMulti+0x30c>)
 8001710:	601a      	str	r2, [r3, #0]
	meanGC = mean;
 8001712:	4a0d      	ldr	r2, [pc, #52]	; (8001748 <calculateMulti+0x304>)
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	6013      	str	r3, [r2, #0]
	varianceGC = variance;
 8001718:	4a0c      	ldr	r2, [pc, #48]	; (800174c <calculateMulti+0x308>)
 800171a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800171c:	6013      	str	r3, [r2, #0]

}
 800171e:	bf00      	nop
 8001720:	3744      	adds	r7, #68	; 0x44
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000724 	.word	0x20000724
 8001730:	20000728 	.word	0x20000728
 8001734:	2000072c 	.word	0x2000072c
 8001738:	20000730 	.word	0x20000730
 800173c:	20000734 	.word	0x20000734
 8001740:	20000738 	.word	0x20000738
 8001744:	2000073c 	.word	0x2000073c
 8001748:	20000740 	.word	0x20000740
 800174c:	20000744 	.word	0x20000744
 8001750:	41200000 	.word	0x41200000

08001754 <buttonControl>:
 * @brief  Function implementing the button_control thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_buttonControl */
void buttonControl(void const *argument) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b09c      	sub	sp, #112	; 0x70
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 800175c:	2064      	movs	r0, #100	; 0x64
 800175e:	f008 fc32 	bl	8009fc6 <osDelay>

		if (HAL_GPIO_ReadPin(PIN_BUTTON_GPIO_Port, PIN_BUTTON_Pin)
 8001762:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001766:	4824      	ldr	r0, [pc, #144]	; (80017f8 <buttonControl+0xa4>)
 8001768:	f003 fe42 	bl	80053f0 <HAL_GPIO_ReadPin>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f4      	bne.n	800175c <buttonControl+0x8>
				== GPIO_PIN_RESET) {

			osMutexWait(mutex, osWaitForever);
 8001772:	4b22      	ldr	r3, [pc, #136]	; (80017fc <buttonControl+0xa8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800177a:	4618      	mov	r0, r3
 800177c:	f008 fc50 	bl	800a020 <osMutexWait>

			uint8_t buffer[100];
			memset(buffer, 0, sizeof(buffer));
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	2264      	movs	r2, #100	; 0x64
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f00b fc9d 	bl	800d0c8 <memset>
			sprintf(buffer, "- Button Press \r\n");
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	491b      	ldr	r1, [pc, #108]	; (8001800 <buttonControl+0xac>)
 8001794:	4618      	mov	r0, r3
 8001796:	f00b fbc7 	bl	800cf28 <siprintf>
			HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer),
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fd7e 	bl	80002a0 <strlen>
 80017a4:	4603      	mov	r3, r0
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	f107 010c 	add.w	r1, r7, #12
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017b0:	4814      	ldr	r0, [pc, #80]	; (8001804 <buttonControl+0xb0>)
 80017b2:	f007 fce3 	bl	800917c <HAL_UART_Transmit>
			HAL_MAX_DELAY);

			selectedSensor = selectedSensor + 1;
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <buttonControl+0xb4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4a12      	ldr	r2, [pc, #72]	; (8001808 <buttonControl+0xb4>)
 80017be:	6013      	str	r3, [r2, #0]
			shouldPrint = 1;
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <buttonControl+0xb8>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]

			if (selectedSensor > 7) {
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <buttonControl+0xb4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b07      	cmp	r3, #7
 80017cc:	dd05      	ble.n	80017da <buttonControl+0x86>
				selectedSensor = 0; // Reset to 0 instead of 1 if the counting starts at 0
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <buttonControl+0xb4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
				shouldPrint = 0; // Consider if you need to reset this flag here
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <buttonControl+0xb8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
			}

			while (HAL_GPIO_ReadPin(PIN_BUTTON_GPIO_Port, PIN_BUTTON_Pin)
 80017da:	bf00      	nop
 80017dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017e0:	4805      	ldr	r0, [pc, #20]	; (80017f8 <buttonControl+0xa4>)
 80017e2:	f003 fe05 	bl	80053f0 <HAL_GPIO_ReadPin>
 80017e6:	4603      	mov	r3, r0
					== GPIO_PIN_RESET) {
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f7      	beq.n	80017dc <buttonControl+0x88>
				//stall
			}

			osMutexRelease(mutex);
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <buttonControl+0xa8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f008 fc63 	bl	800a0bc <osMutexRelease>
		osDelay(100);
 80017f6:	e7b1      	b.n	800175c <buttonControl+0x8>
 80017f8:	48000800 	.word	0x48000800
 80017fc:	20000650 	.word	0x20000650
 8001800:	0800f3ec 	.word	0x0800f3ec
 8001804:	200005b0 	.word	0x200005b0
 8001808:	20000658 	.word	0x20000658
 800180c:	20000654 	.word	0x20000654

08001810 <transmitData>:
 * @brief Function implementing the transmit_data thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_transmitData */
void transmitData(void const *argument) {
 8001810:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001814:	b0a6      	sub	sp, #152	; 0x98
 8001816:	af04      	add	r7, sp, #16
 8001818:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN transmitData */
	/* Infinite loop */
	for (;;) {

		osDelay(100);
 800181a:	2064      	movs	r0, #100	; 0x64
 800181c:	f008 fbd3 	bl	8009fc6 <osDelay>

		if (shouldPrint == 1) {
 8001820:	4bbf      	ldr	r3, [pc, #764]	; (8001b20 <transmitData+0x310>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d1f8      	bne.n	800181a <transmitData+0xa>

			osMutexWait(mutex, osWaitForever);
 8001828:	4bbe      	ldr	r3, [pc, #760]	; (8001b24 <transmitData+0x314>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001830:	4618      	mov	r0, r3
 8001832:	f008 fbf5 	bl	800a020 <osMutexWait>
			float readingsInt[3];
			int16_t readings16t[3];
			uint8_t buffer[100];


			if (selectedSensor == 1) {
 8001836:	4bbc      	ldr	r3, [pc, #752]	; (8001b28 <transmitData+0x318>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b01      	cmp	r3, #1
 800183c:	f040 8083 	bne.w	8001946 <transmitData+0x136>

				memset(buffer, 0, sizeof(buffer));
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	2264      	movs	r2, #100	; 0x64
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f00b fc3d 	bl	800d0c8 <memset>
				readingInt = (float) BSP_TSENSOR_ReadTemp();
 800184e:	f002 fcad 	bl	80041ac <BSP_TSENSOR_ReadTemp>
 8001852:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
				sprintf(buffer, "Temperature: %f \r\n", readingInt);
 8001856:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800185a:	f7fe fe8d 	bl	8000578 <__aeabi_f2d>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	f107 000c 	add.w	r0, r7, #12
 8001866:	49b1      	ldr	r1, [pc, #708]	; (8001b2c <transmitData+0x31c>)
 8001868:	f00b fb5e 	bl	800cf28 <siprintf>
				HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer),
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe fd15 	bl	80002a0 <strlen>
 8001876:	4603      	mov	r3, r0
 8001878:	b29a      	uxth	r2, r3
 800187a:	f107 010c 	add.w	r1, r7, #12
 800187e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001882:	48ab      	ldr	r0, [pc, #684]	; (8001b30 <transmitData+0x320>)
 8001884:	f007 fc7a 	bl	800917c <HAL_UART_Transmit>
				HAL_MAX_DELAY);

//				HAL_Delay(100);

				if (iterT < 10) {
 8001888:	4baa      	ldr	r3, [pc, #680]	; (8001b34 <transmitData+0x324>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b09      	cmp	r3, #9
 800188e:	dc0e      	bgt.n	80018ae <transmitData+0x9e>
					data_to_write[iterT] = readingInt;
 8001890:	4ba8      	ldr	r3, [pc, #672]	; (8001b34 <transmitData+0x324>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4aa8      	ldr	r2, [pc, #672]	; (8001b38 <transmitData+0x328>)
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800189e:	601a      	str	r2, [r3, #0]
					iterT++;
 80018a0:	4ba4      	ldr	r3, [pc, #656]	; (8001b34 <transmitData+0x324>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	4aa3      	ldr	r2, [pc, #652]	; (8001b34 <transmitData+0x324>)
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	f000 bc54 	b.w	8002156 <transmitData+0x946>
				}

				else if (iterT == 10) {
 80018ae:	4ba1      	ldr	r3, [pc, #644]	; (8001b34 <transmitData+0x324>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b0a      	cmp	r3, #10
 80018b4:	f040 844f 	bne.w	8002156 <transmitData+0x946>
					iterT++;
 80018b8:	4b9e      	ldr	r3, [pc, #632]	; (8001b34 <transmitData+0x324>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	3301      	adds	r3, #1
 80018be:	4a9d      	ldr	r2, [pc, #628]	; (8001b34 <transmitData+0x324>)
 80018c0:	6013      	str	r3, [r2, #0]

					if (BSP_QSPI_Write(data_to_write, 0,
 80018c2:	2228      	movs	r2, #40	; 0x28
 80018c4:	2100      	movs	r1, #0
 80018c6:	489c      	ldr	r0, [pc, #624]	; (8001b38 <transmitData+0x328>)
 80018c8:	f002 f8da 	bl	8003a80 <BSP_QSPI_Write>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d01c      	beq.n	800190c <transmitData+0xfc>
							(10 * sizeof(float))) != QSPI_OK) {
						memset(buffer, 0, sizeof(buffer));
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	2264      	movs	r2, #100	; 0x64
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f00b fbf4 	bl	800d0c8 <memset>
						sprintf(buffer, "Error write! \r\n");
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	4995      	ldr	r1, [pc, #596]	; (8001b3c <transmitData+0x32c>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f00b fb1e 	bl	800cf28 <siprintf>
						HAL_UART_Transmit(&huart1, buffer,
								strlen((char*) buffer), HAL_MAX_DELAY);
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fcd5 	bl	80002a0 <strlen>
 80018f6:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, buffer,
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	f107 010c 	add.w	r1, r7, #12
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001902:	488b      	ldr	r0, [pc, #556]	; (8001b30 <transmitData+0x320>)
 8001904:	f007 fc3a 	bl	800917c <HAL_UART_Transmit>
 8001908:	f000 bc25 	b.w	8002156 <transmitData+0x946>
						// Handle error or return
					} else {
						// The write was successful, clear the buffer and send confirmation
						memset(buffer, 0, sizeof(buffer));
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	2264      	movs	r2, #100	; 0x64
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f00b fbd7 	bl	800d0c8 <memset>
						sprintf(buffer, "Full array -> Stored to flash\r\n");
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	4988      	ldr	r1, [pc, #544]	; (8001b40 <transmitData+0x330>)
 8001920:	4618      	mov	r0, r3
 8001922:	f00b fb01 	bl	800cf28 <siprintf>
						HAL_UART_Transmit(&huart1, buffer,
								strlen((char*) buffer), HAL_MAX_DELAY);
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fcb8 	bl	80002a0 <strlen>
 8001930:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, buffer,
 8001932:	b29a      	uxth	r2, r3
 8001934:	f107 010c 	add.w	r1, r7, #12
 8001938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800193c:	487c      	ldr	r0, [pc, #496]	; (8001b30 <transmitData+0x320>)
 800193e:	f007 fc1d 	bl	800917c <HAL_UART_Transmit>
 8001942:	f000 bc08 	b.w	8002156 <transmitData+0x946>

					}

				}

			} else if (selectedSensor == 2) {
 8001946:	4b78      	ldr	r3, [pc, #480]	; (8001b28 <transmitData+0x318>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d17f      	bne.n	8001a4e <transmitData+0x23e>
				memset(buffer, 0, sizeof(buffer));
 800194e:	f107 030c 	add.w	r3, r7, #12
 8001952:	2264      	movs	r2, #100	; 0x64
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f00b fbb6 	bl	800d0c8 <memset>
				readingInt = (float) BSP_HSENSOR_ReadHumidity();
 800195c:	f001 ff40 	bl	80037e0 <BSP_HSENSOR_ReadHumidity>
 8001960:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
				sprintf(buffer, "Humidity: %f \r\n", readingInt);
 8001964:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001968:	f7fe fe06 	bl	8000578 <__aeabi_f2d>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	f107 000c 	add.w	r0, r7, #12
 8001974:	4973      	ldr	r1, [pc, #460]	; (8001b44 <transmitData+0x334>)
 8001976:	f00b fad7 	bl	800cf28 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
						strlen((char*) buffer), HAL_MAX_DELAY);
 800197a:	f107 030c 	add.w	r3, r7, #12
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fc8e 	bl	80002a0 <strlen>
 8001984:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
 8001986:	b29a      	uxth	r2, r3
 8001988:	f107 010c 	add.w	r1, r7, #12
 800198c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001990:	4867      	ldr	r0, [pc, #412]	; (8001b30 <transmitData+0x320>)
 8001992:	f007 fbf3 	bl	800917c <HAL_UART_Transmit>

//				HAL_Delay(100);

				if (iterH < 10) {
 8001996:	4b6c      	ldr	r3, [pc, #432]	; (8001b48 <transmitData+0x338>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b09      	cmp	r3, #9
 800199c:	dc0d      	bgt.n	80019ba <transmitData+0x1aa>
					data_to_write[iterH] = readingInt;
 800199e:	4b6a      	ldr	r3, [pc, #424]	; (8001b48 <transmitData+0x338>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a65      	ldr	r2, [pc, #404]	; (8001b38 <transmitData+0x328>)
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80019ac:	601a      	str	r2, [r3, #0]
					iterH++;
 80019ae:	4b66      	ldr	r3, [pc, #408]	; (8001b48 <transmitData+0x338>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	3301      	adds	r3, #1
 80019b4:	4a64      	ldr	r2, [pc, #400]	; (8001b48 <transmitData+0x338>)
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	e3cd      	b.n	8002156 <transmitData+0x946>
				}

				else if (iterH == 10) {
 80019ba:	4b63      	ldr	r3, [pc, #396]	; (8001b48 <transmitData+0x338>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b0a      	cmp	r3, #10
 80019c0:	f040 83c9 	bne.w	8002156 <transmitData+0x946>
					iterH++;
 80019c4:	4b60      	ldr	r3, [pc, #384]	; (8001b48 <transmitData+0x338>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3301      	adds	r3, #1
 80019ca:	4a5f      	ldr	r2, [pc, #380]	; (8001b48 <transmitData+0x338>)
 80019cc:	6013      	str	r3, [r2, #0]

//					addressOffset += len;
					if (BSP_QSPI_Write(data_to_write, 10 * sizeof(float) * 1,
 80019ce:	2228      	movs	r2, #40	; 0x28
 80019d0:	2128      	movs	r1, #40	; 0x28
 80019d2:	4859      	ldr	r0, [pc, #356]	; (8001b38 <transmitData+0x328>)
 80019d4:	f002 f854 	bl	8003a80 <BSP_QSPI_Write>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d01b      	beq.n	8001a16 <transmitData+0x206>
							10 * sizeof(float)) != QSPI_OK) {
						memset(buffer, 0, sizeof(buffer));
 80019de:	f107 030c 	add.w	r3, r7, #12
 80019e2:	2264      	movs	r2, #100	; 0x64
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f00b fb6e 	bl	800d0c8 <memset>
						sprintf(buffer, "Error write! \r\n");
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	4952      	ldr	r1, [pc, #328]	; (8001b3c <transmitData+0x32c>)
 80019f2:	4618      	mov	r0, r3
 80019f4:	f00b fa98 	bl	800cf28 <siprintf>
						HAL_UART_Transmit(&huart1, buffer,
								strlen((char*) buffer), HAL_MAX_DELAY);
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fc4f 	bl	80002a0 <strlen>
 8001a02:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, buffer,
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	f107 010c 	add.w	r1, r7, #12
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a0e:	4848      	ldr	r0, [pc, #288]	; (8001b30 <transmitData+0x320>)
 8001a10:	f007 fbb4 	bl	800917c <HAL_UART_Transmit>
 8001a14:	e39f      	b.n	8002156 <transmitData+0x946>
						// Handle error or return
					} else {
						// The write was successful, clear the buffer and send confirmation
						memset(buffer, 0, sizeof(buffer));
 8001a16:	f107 030c 	add.w	r3, r7, #12
 8001a1a:	2264      	movs	r2, #100	; 0x64
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f00b fb52 	bl	800d0c8 <memset>
						sprintf(buffer, "Full array -> Stored to flash\r\n");
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	4945      	ldr	r1, [pc, #276]	; (8001b40 <transmitData+0x330>)
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f00b fa7c 	bl	800cf28 <siprintf>
						HAL_UART_Transmit(&huart1, buffer,
								strlen((char*) buffer), HAL_MAX_DELAY);
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fc33 	bl	80002a0 <strlen>
 8001a3a:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, buffer,
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	f107 010c 	add.w	r1, r7, #12
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a46:	483a      	ldr	r0, [pc, #232]	; (8001b30 <transmitData+0x320>)
 8001a48:	f007 fb98 	bl	800917c <HAL_UART_Transmit>
 8001a4c:	e383      	b.n	8002156 <transmitData+0x946>

					}

				}

			} else if (selectedSensor == 3) {
 8001a4e:	4b36      	ldr	r3, [pc, #216]	; (8001b28 <transmitData+0x318>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	f040 809a 	bne.w	8001b8c <transmitData+0x37c>
				memset(buffer, 0, sizeof(buffer));
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	2264      	movs	r2, #100	; 0x64
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f00b fb31 	bl	800d0c8 <memset>
				readingInt = (float) BSP_PSENSOR_ReadPressure();
 8001a66:	f001 ff2d 	bl	80038c4 <BSP_PSENSOR_ReadPressure>
 8001a6a:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
				sprintf(buffer, "Pressure: %f \r\n", readingInt);
 8001a6e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001a72:	f7fe fd81 	bl	8000578 <__aeabi_f2d>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	f107 000c 	add.w	r0, r7, #12
 8001a7e:	4933      	ldr	r1, [pc, #204]	; (8001b4c <transmitData+0x33c>)
 8001a80:	f00b fa52 	bl	800cf28 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
						strlen((char*) buffer), HAL_MAX_DELAY);
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fc09 	bl	80002a0 <strlen>
 8001a8e:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	f107 010c 	add.w	r1, r7, #12
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a9a:	4825      	ldr	r0, [pc, #148]	; (8001b30 <transmitData+0x320>)
 8001a9c:	f007 fb6e 	bl	800917c <HAL_UART_Transmit>

//				HAL_Delay(100);

				if (iterP < 10) {
 8001aa0:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <transmitData+0x340>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b09      	cmp	r3, #9
 8001aa6:	dc0d      	bgt.n	8001ac4 <transmitData+0x2b4>
					data_to_write[iterP] = readingInt;
 8001aa8:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <transmitData+0x340>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a22      	ldr	r2, [pc, #136]	; (8001b38 <transmitData+0x328>)
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001ab6:	601a      	str	r2, [r3, #0]
					iterP++;
 8001ab8:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <transmitData+0x340>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	3301      	adds	r3, #1
 8001abe:	4a24      	ldr	r2, [pc, #144]	; (8001b50 <transmitData+0x340>)
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e348      	b.n	8002156 <transmitData+0x946>
				}

				else if (iterP == 10) {
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <transmitData+0x340>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b0a      	cmp	r3, #10
 8001aca:	f040 8344 	bne.w	8002156 <transmitData+0x946>
					iterP++;
 8001ace:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <transmitData+0x340>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	4a1e      	ldr	r2, [pc, #120]	; (8001b50 <transmitData+0x340>)
 8001ad6:	6013      	str	r3, [r2, #0]


					if (BSP_QSPI_Write(data_to_write, 10 * sizeof(float) * 2,
 8001ad8:	2228      	movs	r2, #40	; 0x28
 8001ada:	2150      	movs	r1, #80	; 0x50
 8001adc:	4816      	ldr	r0, [pc, #88]	; (8001b38 <transmitData+0x328>)
 8001ade:	f001 ffcf 	bl	8003a80 <BSP_QSPI_Write>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d035      	beq.n	8001b54 <transmitData+0x344>
							10 * sizeof(float)) != QSPI_OK) {
						memset(buffer, 0, sizeof(buffer));
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2264      	movs	r2, #100	; 0x64
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f00b fae9 	bl	800d0c8 <memset>
						sprintf(buffer, "Error write! \r\n");
 8001af6:	f107 030c 	add.w	r3, r7, #12
 8001afa:	4910      	ldr	r1, [pc, #64]	; (8001b3c <transmitData+0x32c>)
 8001afc:	4618      	mov	r0, r3
 8001afe:	f00b fa13 	bl	800cf28 <siprintf>
						HAL_UART_Transmit(&huart1, buffer,
								strlen((char*) buffer), HAL_MAX_DELAY);
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fbca 	bl	80002a0 <strlen>
 8001b0c:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, buffer,
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	f107 010c 	add.w	r1, r7, #12
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b18:	4805      	ldr	r0, [pc, #20]	; (8001b30 <transmitData+0x320>)
 8001b1a:	f007 fb2f 	bl	800917c <HAL_UART_Transmit>
 8001b1e:	e31a      	b.n	8002156 <transmitData+0x946>
 8001b20:	20000654 	.word	0x20000654
 8001b24:	20000650 	.word	0x20000650
 8001b28:	20000658 	.word	0x20000658
 8001b2c:	0800f400 	.word	0x0800f400
 8001b30:	200005b0 	.word	0x200005b0
 8001b34:	2000065c 	.word	0x2000065c
 8001b38:	20000674 	.word	0x20000674
 8001b3c:	0800f414 	.word	0x0800f414
 8001b40:	0800f424 	.word	0x0800f424
 8001b44:	0800f444 	.word	0x0800f444
 8001b48:	20000660 	.word	0x20000660
 8001b4c:	0800f454 	.word	0x0800f454
 8001b50:	20000664 	.word	0x20000664
						// Handle error or return
					} else {
						// The write was successful, clear the buffer and send confirmation
						memset(buffer, 0, sizeof(buffer));
 8001b54:	f107 030c 	add.w	r3, r7, #12
 8001b58:	2264      	movs	r2, #100	; 0x64
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f00b fab3 	bl	800d0c8 <memset>
						sprintf(buffer, "Full array -> Stored to flash\r\n");
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	49af      	ldr	r1, [pc, #700]	; (8001e24 <transmitData+0x614>)
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f00b f9dd 	bl	800cf28 <siprintf>
						HAL_UART_Transmit(&huart1, buffer,
								strlen((char*) buffer), HAL_MAX_DELAY);
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fb94 	bl	80002a0 <strlen>
 8001b78:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, buffer,
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	f107 010c 	add.w	r1, r7, #12
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b84:	48a8      	ldr	r0, [pc, #672]	; (8001e28 <transmitData+0x618>)
 8001b86:	f007 faf9 	bl	800917c <HAL_UART_Transmit>
 8001b8a:	e2e4      	b.n	8002156 <transmitData+0x946>

					}

				}

			} else if (selectedSensor == 4) {
 8001b8c:	4ba7      	ldr	r3, [pc, #668]	; (8001e2c <transmitData+0x61c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	f040 80e9 	bne.w	8001d68 <transmitData+0x558>
				memset(buffer, 0, sizeof(buffer));
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	2264      	movs	r2, #100	; 0x64
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f00b fa92 	bl	800d0c8 <memset>
				BSP_ACCELERO_AccGetXYZ(readings16t);
 8001ba4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f001 fd87 	bl	80036bc <BSP_ACCELERO_AccGetXYZ>
				sprintf(buffer, "Acceleration: X = %d, Y = %d, Z = %d \r\n",
						readings16t[0], readings16t[1], readings16t[2]);
 8001bae:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
				sprintf(buffer, "Acceleration: X = %d, Y = %d, Z = %d \r\n",
 8001bb2:	461a      	mov	r2, r3
						readings16t[0], readings16t[1], readings16t[2]);
 8001bb4:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
				sprintf(buffer, "Acceleration: X = %d, Y = %d, Z = %d \r\n",
 8001bb8:	4619      	mov	r1, r3
						readings16t[0], readings16t[1], readings16t[2]);
 8001bba:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
				sprintf(buffer, "Acceleration: X = %d, Y = %d, Z = %d \r\n",
 8001bbe:	f107 000c 	add.w	r0, r7, #12
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	499a      	ldr	r1, [pc, #616]	; (8001e30 <transmitData+0x620>)
 8001bc8:	f00b f9ae 	bl	800cf28 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
						strlen((char*) buffer), HAL_MAX_DELAY);
 8001bcc:	f107 030c 	add.w	r3, r7, #12
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fb65 	bl	80002a0 <strlen>
 8001bd6:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	f107 010c 	add.w	r1, r7, #12
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001be2:	4891      	ldr	r0, [pc, #580]	; (8001e28 <transmitData+0x618>)
 8001be4:	f007 faca 	bl	800917c <HAL_UART_Transmit>

//				HAL_Delay(100);
				if (iterA < 10) {
 8001be8:	4b92      	ldr	r3, [pc, #584]	; (8001e34 <transmitData+0x624>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b09      	cmp	r3, #9
 8001bee:	dc2c      	bgt.n	8001c4a <transmitData+0x43a>
					data_to_writeA[iterA] = readings16t[0];
 8001bf0:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 8001bf4:	4b8f      	ldr	r3, [pc, #572]	; (8001e34 <transmitData+0x624>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	ee07 2a90 	vmov	s15, r2
 8001bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c00:	4a8d      	ldr	r2, [pc, #564]	; (8001e38 <transmitData+0x628>)
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	edc3 7a00 	vstr	s15, [r3]
					data_to_writeB[iterA] = readings16t[1];
 8001c0a:	f9b7 2072 	ldrsh.w	r2, [r7, #114]	; 0x72
 8001c0e:	4b89      	ldr	r3, [pc, #548]	; (8001e34 <transmitData+0x624>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	ee07 2a90 	vmov	s15, r2
 8001c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1a:	4a88      	ldr	r2, [pc, #544]	; (8001e3c <transmitData+0x62c>)
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	edc3 7a00 	vstr	s15, [r3]
					data_to_writeC[iterA] = readings16t[2];
 8001c24:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 8001c28:	4b82      	ldr	r3, [pc, #520]	; (8001e34 <transmitData+0x624>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	ee07 2a90 	vmov	s15, r2
 8001c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c34:	4a82      	ldr	r2, [pc, #520]	; (8001e40 <transmitData+0x630>)
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
					iterA++;
 8001c3e:	4b7d      	ldr	r3, [pc, #500]	; (8001e34 <transmitData+0x624>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3301      	adds	r3, #1
 8001c44:	4a7b      	ldr	r2, [pc, #492]	; (8001e34 <transmitData+0x624>)
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	e285      	b.n	8002156 <transmitData+0x946>
				}

				else if (iterA == 10) {
 8001c4a:	4b7a      	ldr	r3, [pc, #488]	; (8001e34 <transmitData+0x624>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b0a      	cmp	r3, #10
 8001c50:	f040 8281 	bne.w	8002156 <transmitData+0x946>
					iterA++;
 8001c54:	4b77      	ldr	r3, [pc, #476]	; (8001e34 <transmitData+0x624>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	4a76      	ldr	r2, [pc, #472]	; (8001e34 <transmitData+0x624>)
 8001c5c:	6013      	str	r3, [r2, #0]



					if (BSP_QSPI_Write(data_to_writeA, 10 * sizeof(float) * 3,
 8001c5e:	2228      	movs	r2, #40	; 0x28
 8001c60:	2178      	movs	r1, #120	; 0x78
 8001c62:	4875      	ldr	r0, [pc, #468]	; (8001e38 <transmitData+0x628>)
 8001c64:	f001 ff0c 	bl	8003a80 <BSP_QSPI_Write>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d01a      	beq.n	8001ca4 <transmitData+0x494>
							10 * sizeof(float)) != QSPI_OK) {
						memset(buffer, 0, sizeof(buffer));
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	2264      	movs	r2, #100	; 0x64
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f00b fa26 	bl	800d0c8 <memset>
						sprintf(buffer, "Error write! \r\n");
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	4970      	ldr	r1, [pc, #448]	; (8001e44 <transmitData+0x634>)
 8001c82:	4618      	mov	r0, r3
 8001c84:	f00b f950 	bl	800cf28 <siprintf>
						HAL_UART_Transmit(&huart1, buffer,
								strlen((char*) buffer), HAL_MAX_DELAY);
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fb07 	bl	80002a0 <strlen>
 8001c92:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, buffer,
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	f107 010c 	add.w	r1, r7, #12
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c9e:	4862      	ldr	r0, [pc, #392]	; (8001e28 <transmitData+0x618>)
 8001ca0:	f007 fa6c 	bl	800917c <HAL_UART_Transmit>
						// Handle error or return
					}


					if (BSP_QSPI_Write(data_to_writeB, 10 * sizeof(float) * 4,
 8001ca4:	2228      	movs	r2, #40	; 0x28
 8001ca6:	21a0      	movs	r1, #160	; 0xa0
 8001ca8:	4864      	ldr	r0, [pc, #400]	; (8001e3c <transmitData+0x62c>)
 8001caa:	f001 fee9 	bl	8003a80 <BSP_QSPI_Write>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d01a      	beq.n	8001cea <transmitData+0x4da>
							10 * sizeof(float)) != QSPI_OK) {
						memset(buffer, 0, sizeof(buffer));
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	2264      	movs	r2, #100	; 0x64
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f00b fa03 	bl	800d0c8 <memset>
						sprintf(buffer, "Error write! \r\n");
 8001cc2:	f107 030c 	add.w	r3, r7, #12
 8001cc6:	495f      	ldr	r1, [pc, #380]	; (8001e44 <transmitData+0x634>)
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f00b f92d 	bl	800cf28 <siprintf>
						HAL_UART_Transmit(&huart1, buffer,
								strlen((char*) buffer), HAL_MAX_DELAY);
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fae4 	bl	80002a0 <strlen>
 8001cd8:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, buffer,
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	f107 010c 	add.w	r1, r7, #12
 8001ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ce4:	4850      	ldr	r0, [pc, #320]	; (8001e28 <transmitData+0x618>)
 8001ce6:	f007 fa49 	bl	800917c <HAL_UART_Transmit>
						// Handle error or return
					}


					if (BSP_QSPI_Write(data_to_writeC, 10 * sizeof(float) * 5,
 8001cea:	2228      	movs	r2, #40	; 0x28
 8001cec:	21c8      	movs	r1, #200	; 0xc8
 8001cee:	4854      	ldr	r0, [pc, #336]	; (8001e40 <transmitData+0x630>)
 8001cf0:	f001 fec6 	bl	8003a80 <BSP_QSPI_Write>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d01a      	beq.n	8001d30 <transmitData+0x520>
							10 * sizeof(float)) != QSPI_OK) {
						memset(buffer, 0, sizeof(buffer));
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	2264      	movs	r2, #100	; 0x64
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f00b f9e0 	bl	800d0c8 <memset>
						sprintf(buffer, "Error write! \r\n");
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	494d      	ldr	r1, [pc, #308]	; (8001e44 <transmitData+0x634>)
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f00b f90a 	bl	800cf28 <siprintf>
						HAL_UART_Transmit(&huart1, buffer,
								strlen((char*) buffer), HAL_MAX_DELAY);
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fac1 	bl	80002a0 <strlen>
 8001d1e:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, buffer,
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	f107 010c 	add.w	r1, r7, #12
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d2a:	483f      	ldr	r0, [pc, #252]	; (8001e28 <transmitData+0x618>)
 8001d2c:	f007 fa26 	bl	800917c <HAL_UART_Transmit>
						// Handle error or return
					}

					// The write was successful, clear the buffer and send confirmation
					memset(buffer, 0, sizeof(buffer));
 8001d30:	f107 030c 	add.w	r3, r7, #12
 8001d34:	2264      	movs	r2, #100	; 0x64
 8001d36:	2100      	movs	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f00b f9c5 	bl	800d0c8 <memset>
					sprintf(buffer, "Full arrays -> Stored to flash\r\n");
 8001d3e:	f107 030c 	add.w	r3, r7, #12
 8001d42:	4941      	ldr	r1, [pc, #260]	; (8001e48 <transmitData+0x638>)
 8001d44:	4618      	mov	r0, r3
 8001d46:	f00b f8ef 	bl	800cf28 <siprintf>
					HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer),
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe faa6 	bl	80002a0 <strlen>
 8001d54:	4603      	mov	r3, r0
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	f107 010c 	add.w	r1, r7, #12
 8001d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d60:	4831      	ldr	r0, [pc, #196]	; (8001e28 <transmitData+0x618>)
 8001d62:	f007 fa0b 	bl	800917c <HAL_UART_Transmit>
 8001d66:	e1f6      	b.n	8002156 <transmitData+0x946>
					HAL_MAX_DELAY);

				}

			} else if (selectedSensor == 5) {
 8001d68:	4b30      	ldr	r3, [pc, #192]	; (8001e2c <transmitData+0x61c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b05      	cmp	r3, #5
 8001d6e:	f040 8102 	bne.w	8001f76 <transmitData+0x766>
				memset(buffer, 0, sizeof(buffer));
 8001d72:	f107 030c 	add.w	r3, r7, #12
 8001d76:	2264      	movs	r2, #100	; 0x64
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f00b f9a4 	bl	800d0c8 <memset>
				BSP_GYRO_GetXYZ(readingsInt);
 8001d80:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d84:	4618      	mov	r0, r3
 8001d86:	f001 fcf3 	bl	8003770 <BSP_GYRO_GetXYZ>
				sprintf(buffer, "Gyroscope: X = %f, Y = %f, Z = %f \r\n",
						readingsInt[0], readingsInt[1], readingsInt[2]);
 8001d8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
				sprintf(buffer, "Gyroscope: X = %f, Y = %f, Z = %f \r\n",
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fbf3 	bl	8000578 <__aeabi_f2d>
 8001d92:	4680      	mov	r8, r0
 8001d94:	4689      	mov	r9, r1
						readingsInt[0], readingsInt[1], readingsInt[2]);
 8001d96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
				sprintf(buffer, "Gyroscope: X = %f, Y = %f, Z = %f \r\n",
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fbed 	bl	8000578 <__aeabi_f2d>
 8001d9e:	4604      	mov	r4, r0
 8001da0:	460d      	mov	r5, r1
						readingsInt[0], readingsInt[1], readingsInt[2]);
 8001da2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
				sprintf(buffer, "Gyroscope: X = %f, Y = %f, Z = %f \r\n",
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fbe6 	bl	8000578 <__aeabi_f2d>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	f107 000c 	add.w	r0, r7, #12
 8001db4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001db8:	e9cd 4500 	strd	r4, r5, [sp]
 8001dbc:	4642      	mov	r2, r8
 8001dbe:	464b      	mov	r3, r9
 8001dc0:	4922      	ldr	r1, [pc, #136]	; (8001e4c <transmitData+0x63c>)
 8001dc2:	f00b f8b1 	bl	800cf28 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
						strlen((char*) buffer), HAL_MAX_DELAY);
 8001dc6:	f107 030c 	add.w	r3, r7, #12
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fa68 	bl	80002a0 <strlen>
 8001dd0:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	f107 010c 	add.w	r1, r7, #12
 8001dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ddc:	4812      	ldr	r0, [pc, #72]	; (8001e28 <transmitData+0x618>)
 8001dde:	f007 f9cd 	bl	800917c <HAL_UART_Transmit>

//				HAL_Delay(100);
				if (iterG < 10) {
 8001de2:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <transmitData+0x640>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2b09      	cmp	r3, #9
 8001de8:	dc34      	bgt.n	8001e54 <transmitData+0x644>
					data_to_writeA[iterG] = readingsInt[0];
 8001dea:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <transmitData+0x640>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001df0:	4911      	ldr	r1, [pc, #68]	; (8001e38 <transmitData+0x628>)
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	601a      	str	r2, [r3, #0]
					data_to_writeB[iterG] = readingsInt[1];
 8001df8:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <transmitData+0x640>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001dfe:	490f      	ldr	r1, [pc, #60]	; (8001e3c <transmitData+0x62c>)
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	601a      	str	r2, [r3, #0]
					data_to_writeC[iterG] = readingsInt[2];
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <transmitData+0x640>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001e0e:	490c      	ldr	r1, [pc, #48]	; (8001e40 <transmitData+0x630>)
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	601a      	str	r2, [r3, #0]
					iterG++;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <transmitData+0x640>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	4a0c      	ldr	r2, [pc, #48]	; (8001e50 <transmitData+0x640>)
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	e199      	b.n	8002156 <transmitData+0x946>
 8001e22:	bf00      	nop
 8001e24:	0800f424 	.word	0x0800f424
 8001e28:	200005b0 	.word	0x200005b0
 8001e2c:	20000658 	.word	0x20000658
 8001e30:	0800f464 	.word	0x0800f464
 8001e34:	20000668 	.word	0x20000668
 8001e38:	2000069c 	.word	0x2000069c
 8001e3c:	200006c4 	.word	0x200006c4
 8001e40:	200006ec 	.word	0x200006ec
 8001e44:	0800f414 	.word	0x0800f414
 8001e48:	0800f48c 	.word	0x0800f48c
 8001e4c:	0800f4b0 	.word	0x0800f4b0
 8001e50:	2000066c 	.word	0x2000066c
				}

				else if (iterG == 10) {
 8001e54:	4bc3      	ldr	r3, [pc, #780]	; (8002164 <transmitData+0x954>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b0a      	cmp	r3, #10
 8001e5a:	f040 817c 	bne.w	8002156 <transmitData+0x946>
					iterG++;
 8001e5e:	4bc1      	ldr	r3, [pc, #772]	; (8002164 <transmitData+0x954>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	3301      	adds	r3, #1
 8001e64:	4abf      	ldr	r2, [pc, #764]	; (8002164 <transmitData+0x954>)
 8001e66:	6013      	str	r3, [r2, #0]


					if (BSP_QSPI_Write(data_to_writeA, 10 * sizeof(float) * 6,
 8001e68:	2228      	movs	r2, #40	; 0x28
 8001e6a:	21f0      	movs	r1, #240	; 0xf0
 8001e6c:	48be      	ldr	r0, [pc, #760]	; (8002168 <transmitData+0x958>)
 8001e6e:	f001 fe07 	bl	8003a80 <BSP_QSPI_Write>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d01a      	beq.n	8001eae <transmitData+0x69e>
							10 * sizeof(float)) != QSPI_OK) {
						memset(buffer, 0, sizeof(buffer));
 8001e78:	f107 030c 	add.w	r3, r7, #12
 8001e7c:	2264      	movs	r2, #100	; 0x64
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f00b f921 	bl	800d0c8 <memset>
						sprintf(buffer, "Error write! \r\n");
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	49b8      	ldr	r1, [pc, #736]	; (800216c <transmitData+0x95c>)
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f00b f84b 	bl	800cf28 <siprintf>
						HAL_UART_Transmit(&huart1, buffer,
								strlen((char*) buffer), HAL_MAX_DELAY);
 8001e92:	f107 030c 	add.w	r3, r7, #12
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fa02 	bl	80002a0 <strlen>
 8001e9c:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, buffer,
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	f107 010c 	add.w	r1, r7, #12
 8001ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ea8:	48b1      	ldr	r0, [pc, #708]	; (8002170 <transmitData+0x960>)
 8001eaa:	f007 f967 	bl	800917c <HAL_UART_Transmit>
						// Handle error or return
					}

					if (BSP_QSPI_Write(data_to_writeB, 10 * sizeof(float) * 7,
 8001eae:	2228      	movs	r2, #40	; 0x28
 8001eb0:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001eb4:	48af      	ldr	r0, [pc, #700]	; (8002174 <transmitData+0x964>)
 8001eb6:	f001 fde3 	bl	8003a80 <BSP_QSPI_Write>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01a      	beq.n	8001ef6 <transmitData+0x6e6>
							10 * sizeof(float)) != QSPI_OK) {
						memset(buffer, 0, sizeof(buffer));
 8001ec0:	f107 030c 	add.w	r3, r7, #12
 8001ec4:	2264      	movs	r2, #100	; 0x64
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f00b f8fd 	bl	800d0c8 <memset>
						sprintf(buffer, "Error write! \r\n");
 8001ece:	f107 030c 	add.w	r3, r7, #12
 8001ed2:	49a6      	ldr	r1, [pc, #664]	; (800216c <transmitData+0x95c>)
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f00b f827 	bl	800cf28 <siprintf>
						HAL_UART_Transmit(&huart1, buffer,
								strlen((char*) buffer), HAL_MAX_DELAY);
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe f9de 	bl	80002a0 <strlen>
 8001ee4:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, buffer,
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	f107 010c 	add.w	r1, r7, #12
 8001eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ef0:	489f      	ldr	r0, [pc, #636]	; (8002170 <transmitData+0x960>)
 8001ef2:	f007 f943 	bl	800917c <HAL_UART_Transmit>
						// Handle error or return
					}

					if (BSP_QSPI_Write(data_to_writeC, 10 * sizeof(float) * 8,
 8001ef6:	2228      	movs	r2, #40	; 0x28
 8001ef8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001efc:	489e      	ldr	r0, [pc, #632]	; (8002178 <transmitData+0x968>)
 8001efe:	f001 fdbf 	bl	8003a80 <BSP_QSPI_Write>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d01a      	beq.n	8001f3e <transmitData+0x72e>
							10 * sizeof(float)) != QSPI_OK) {
						memset(buffer, 0, sizeof(buffer));
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	2264      	movs	r2, #100	; 0x64
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f00b f8d9 	bl	800d0c8 <memset>
						sprintf(buffer, "Error write! \r\n");
 8001f16:	f107 030c 	add.w	r3, r7, #12
 8001f1a:	4994      	ldr	r1, [pc, #592]	; (800216c <transmitData+0x95c>)
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f00b f803 	bl	800cf28 <siprintf>
						HAL_UART_Transmit(&huart1, buffer,
								strlen((char*) buffer), HAL_MAX_DELAY);
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe f9ba 	bl	80002a0 <strlen>
 8001f2c:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, buffer,
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	f107 010c 	add.w	r1, r7, #12
 8001f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f38:	488d      	ldr	r0, [pc, #564]	; (8002170 <transmitData+0x960>)
 8001f3a:	f007 f91f 	bl	800917c <HAL_UART_Transmit>
						// Handle error or return
					}

					// The write was successful, clear the buffer and send confirmation
					memset(buffer, 0, sizeof(buffer));
 8001f3e:	f107 030c 	add.w	r3, r7, #12
 8001f42:	2264      	movs	r2, #100	; 0x64
 8001f44:	2100      	movs	r1, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f00b f8be 	bl	800d0c8 <memset>
					sprintf(buffer, "Full arrays -> Stored to flash\r\n");
 8001f4c:	f107 030c 	add.w	r3, r7, #12
 8001f50:	498a      	ldr	r1, [pc, #552]	; (800217c <transmitData+0x96c>)
 8001f52:	4618      	mov	r0, r3
 8001f54:	f00a ffe8 	bl	800cf28 <siprintf>
					HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer),
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe f99f 	bl	80002a0 <strlen>
 8001f62:	4603      	mov	r3, r0
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	f107 010c 	add.w	r1, r7, #12
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f6e:	4880      	ldr	r0, [pc, #512]	; (8002170 <transmitData+0x960>)
 8001f70:	f007 f904 	bl	800917c <HAL_UART_Transmit>
 8001f74:	e0ef      	b.n	8002156 <transmitData+0x946>
					HAL_MAX_DELAY);

				}

			} else if (selectedSensor == 6) {
 8001f76:	4b82      	ldr	r3, [pc, #520]	; (8002180 <transmitData+0x970>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	f040 80eb 	bne.w	8002156 <transmitData+0x946>
				memset(buffer, 0, sizeof(buffer));
 8001f80:	f107 030c 	add.w	r3, r7, #12
 8001f84:	2264      	movs	r2, #100	; 0x64
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f00b f89d 	bl	800d0c8 <memset>
				BSP_MAGNETO_GetXYZ(readings16t);
 8001f8e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f92:	4618      	mov	r0, r3
 8001f94:	f001 fc5e 	bl	8003854 <BSP_MAGNETO_GetXYZ>
				sprintf(buffer, "Magnetometer: X = %d, Y = %d, Z = %d \r\n",
						readings16t[0], readings16t[1], readings16t[2]);
 8001f98:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
				sprintf(buffer, "Magnetometer: X = %d, Y = %d, Z = %d \r\n",
 8001f9c:	461a      	mov	r2, r3
						readings16t[0], readings16t[1], readings16t[2]);
 8001f9e:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
				sprintf(buffer, "Magnetometer: X = %d, Y = %d, Z = %d \r\n",
 8001fa2:	4619      	mov	r1, r3
						readings16t[0], readings16t[1], readings16t[2]);
 8001fa4:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
				sprintf(buffer, "Magnetometer: X = %d, Y = %d, Z = %d \r\n",
 8001fa8:	f107 000c 	add.w	r0, r7, #12
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4974      	ldr	r1, [pc, #464]	; (8002184 <transmitData+0x974>)
 8001fb2:	f00a ffb9 	bl	800cf28 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
						strlen((char*) buffer), HAL_MAX_DELAY);
 8001fb6:	f107 030c 	add.w	r3, r7, #12
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe f970 	bl	80002a0 <strlen>
 8001fc0:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	f107 010c 	add.w	r1, r7, #12
 8001fc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fcc:	4868      	ldr	r0, [pc, #416]	; (8002170 <transmitData+0x960>)
 8001fce:	f007 f8d5 	bl	800917c <HAL_UART_Transmit>

//				HAL_Delay(100);
				if (iterM < 10) {
 8001fd2:	4b6d      	ldr	r3, [pc, #436]	; (8002188 <transmitData+0x978>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b09      	cmp	r3, #9
 8001fd8:	dc2c      	bgt.n	8002034 <transmitData+0x824>
					data_to_writeA[iterM] = readings16t[0];
 8001fda:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 8001fde:	4b6a      	ldr	r3, [pc, #424]	; (8002188 <transmitData+0x978>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	ee07 2a90 	vmov	s15, r2
 8001fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fea:	4a5f      	ldr	r2, [pc, #380]	; (8002168 <transmitData+0x958>)
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	edc3 7a00 	vstr	s15, [r3]
					data_to_writeB[iterM] = readings16t[1];
 8001ff4:	f9b7 2072 	ldrsh.w	r2, [r7, #114]	; 0x72
 8001ff8:	4b63      	ldr	r3, [pc, #396]	; (8002188 <transmitData+0x978>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	ee07 2a90 	vmov	s15, r2
 8002000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002004:	4a5b      	ldr	r2, [pc, #364]	; (8002174 <transmitData+0x964>)
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	edc3 7a00 	vstr	s15, [r3]
					data_to_writeC[iterM] = readings16t[2];
 800200e:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 8002012:	4b5d      	ldr	r3, [pc, #372]	; (8002188 <transmitData+0x978>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	ee07 2a90 	vmov	s15, r2
 800201a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800201e:	4a56      	ldr	r2, [pc, #344]	; (8002178 <transmitData+0x968>)
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	edc3 7a00 	vstr	s15, [r3]
					iterM++;
 8002028:	4b57      	ldr	r3, [pc, #348]	; (8002188 <transmitData+0x978>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	3301      	adds	r3, #1
 800202e:	4a56      	ldr	r2, [pc, #344]	; (8002188 <transmitData+0x978>)
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e090      	b.n	8002156 <transmitData+0x946>
				}

				else if (iterM == 10) {
 8002034:	4b54      	ldr	r3, [pc, #336]	; (8002188 <transmitData+0x978>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b0a      	cmp	r3, #10
 800203a:	f040 808c 	bne.w	8002156 <transmitData+0x946>
					iterM++;
 800203e:	4b52      	ldr	r3, [pc, #328]	; (8002188 <transmitData+0x978>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	3301      	adds	r3, #1
 8002044:	4a50      	ldr	r2, [pc, #320]	; (8002188 <transmitData+0x978>)
 8002046:	6013      	str	r3, [r2, #0]


					if (BSP_QSPI_Write(data_to_writeA, 10 * sizeof(float) * 9,
 8002048:	2228      	movs	r2, #40	; 0x28
 800204a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800204e:	4846      	ldr	r0, [pc, #280]	; (8002168 <transmitData+0x958>)
 8002050:	f001 fd16 	bl	8003a80 <BSP_QSPI_Write>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d01a      	beq.n	8002090 <transmitData+0x880>
							10 * sizeof(float)) != QSPI_OK) {
						memset(buffer, 0, sizeof(buffer));
 800205a:	f107 030c 	add.w	r3, r7, #12
 800205e:	2264      	movs	r2, #100	; 0x64
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f00b f830 	bl	800d0c8 <memset>
						sprintf(buffer, "Error write! \r\n");
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	493f      	ldr	r1, [pc, #252]	; (800216c <transmitData+0x95c>)
 800206e:	4618      	mov	r0, r3
 8002070:	f00a ff5a 	bl	800cf28 <siprintf>
						HAL_UART_Transmit(&huart1, buffer,
								strlen((char*) buffer), HAL_MAX_DELAY);
 8002074:	f107 030c 	add.w	r3, r7, #12
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe f911 	bl	80002a0 <strlen>
 800207e:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, buffer,
 8002080:	b29a      	uxth	r2, r3
 8002082:	f107 010c 	add.w	r1, r7, #12
 8002086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800208a:	4839      	ldr	r0, [pc, #228]	; (8002170 <transmitData+0x960>)
 800208c:	f007 f876 	bl	800917c <HAL_UART_Transmit>
						// Handle error or return
					}


					if (BSP_QSPI_Write(data_to_writeB, 10 * sizeof(float) * 10,
 8002090:	2228      	movs	r2, #40	; 0x28
 8002092:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002096:	4837      	ldr	r0, [pc, #220]	; (8002174 <transmitData+0x964>)
 8002098:	f001 fcf2 	bl	8003a80 <BSP_QSPI_Write>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d01a      	beq.n	80020d8 <transmitData+0x8c8>
							10 * sizeof(float)) != QSPI_OK) {
						memset(buffer, 0, sizeof(buffer));
 80020a2:	f107 030c 	add.w	r3, r7, #12
 80020a6:	2264      	movs	r2, #100	; 0x64
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f00b f80c 	bl	800d0c8 <memset>
						sprintf(buffer, "Error write! \r\n");
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	492d      	ldr	r1, [pc, #180]	; (800216c <transmitData+0x95c>)
 80020b6:	4618      	mov	r0, r3
 80020b8:	f00a ff36 	bl	800cf28 <siprintf>
						HAL_UART_Transmit(&huart1, buffer,
								strlen((char*) buffer), HAL_MAX_DELAY);
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe f8ed 	bl	80002a0 <strlen>
 80020c6:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, buffer,
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	f107 010c 	add.w	r1, r7, #12
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020d2:	4827      	ldr	r0, [pc, #156]	; (8002170 <transmitData+0x960>)
 80020d4:	f007 f852 	bl	800917c <HAL_UART_Transmit>
						// Handle error or return
					}


					if (BSP_QSPI_Write(data_to_writeC, 10 * sizeof(float) * 11,
 80020d8:	2228      	movs	r2, #40	; 0x28
 80020da:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80020de:	4826      	ldr	r0, [pc, #152]	; (8002178 <transmitData+0x968>)
 80020e0:	f001 fcce 	bl	8003a80 <BSP_QSPI_Write>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d01a      	beq.n	8002120 <transmitData+0x910>
							10 * sizeof(float)) != QSPI_OK) {
						memset(buffer, 0, sizeof(buffer));
 80020ea:	f107 030c 	add.w	r3, r7, #12
 80020ee:	2264      	movs	r2, #100	; 0x64
 80020f0:	2100      	movs	r1, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f00a ffe8 	bl	800d0c8 <memset>
						sprintf(buffer, "Error write! \r\n");
 80020f8:	f107 030c 	add.w	r3, r7, #12
 80020fc:	491b      	ldr	r1, [pc, #108]	; (800216c <transmitData+0x95c>)
 80020fe:	4618      	mov	r0, r3
 8002100:	f00a ff12 	bl	800cf28 <siprintf>
						HAL_UART_Transmit(&huart1, buffer,
								strlen((char*) buffer), HAL_MAX_DELAY);
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe f8c9 	bl	80002a0 <strlen>
 800210e:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, buffer,
 8002110:	b29a      	uxth	r2, r3
 8002112:	f107 010c 	add.w	r1, r7, #12
 8002116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800211a:	4815      	ldr	r0, [pc, #84]	; (8002170 <transmitData+0x960>)
 800211c:	f007 f82e 	bl	800917c <HAL_UART_Transmit>
						// Handle error or return
					}


					// The write was successful, clear the buffer and send confirmation
					memset(buffer, 0, sizeof(buffer));
 8002120:	f107 030c 	add.w	r3, r7, #12
 8002124:	2264      	movs	r2, #100	; 0x64
 8002126:	2100      	movs	r1, #0
 8002128:	4618      	mov	r0, r3
 800212a:	f00a ffcd 	bl	800d0c8 <memset>
					sprintf(buffer, "Full arrays -> Stored to flash\r\n");
 800212e:	f107 030c 	add.w	r3, r7, #12
 8002132:	4912      	ldr	r1, [pc, #72]	; (800217c <transmitData+0x96c>)
 8002134:	4618      	mov	r0, r3
 8002136:	f00a fef7 	bl	800cf28 <siprintf>
					HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer),
 800213a:	f107 030c 	add.w	r3, r7, #12
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe f8ae 	bl	80002a0 <strlen>
 8002144:	4603      	mov	r3, r0
 8002146:	b29a      	uxth	r2, r3
 8002148:	f107 010c 	add.w	r1, r7, #12
 800214c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002150:	4807      	ldr	r0, [pc, #28]	; (8002170 <transmitData+0x960>)
 8002152:	f007 f813 	bl	800917c <HAL_UART_Transmit>
					HAL_MAX_DELAY);

				}

			}
			osMutexRelease(mutex);
 8002156:	4b0d      	ldr	r3, [pc, #52]	; (800218c <transmitData+0x97c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f007 ffae 	bl	800a0bc <osMutexRelease>
		osDelay(100);
 8002160:	f7ff bb5b 	b.w	800181a <transmitData+0xa>
 8002164:	2000066c 	.word	0x2000066c
 8002168:	2000069c 	.word	0x2000069c
 800216c:	0800f414 	.word	0x0800f414
 8002170:	200005b0 	.word	0x200005b0
 8002174:	200006c4 	.word	0x200006c4
 8002178:	200006ec 	.word	0x200006ec
 800217c:	0800f48c 	.word	0x0800f48c
 8002180:	20000658 	.word	0x20000658
 8002184:	0800f4d8 	.word	0x0800f4d8
 8002188:	20000670 	.word	0x20000670
 800218c:	20000650 	.word	0x20000650

08002190 <readData>:
 * @brief Function implementing the read_data thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_readData */
void readData(void const *argument) {
 8002190:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002194:	b0a0      	sub	sp, #128	; 0x80
 8002196:	af04      	add	r7, sp, #16
 8002198:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN readData */
	/* Infinite loop */
	for (;;) {
		osDelay(200);
 800219a:	20c8      	movs	r0, #200	; 0xc8
 800219c:	f007 ff13 	bl	8009fc6 <osDelay>

		if (selectedSensor == 7 && hold == 0) {
 80021a0:	4bcd      	ldr	r3, [pc, #820]	; (80024d8 <readData+0x348>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b07      	cmp	r3, #7
 80021a6:	d1f8      	bne.n	800219a <readData+0xa>
 80021a8:	4bcc      	ldr	r3, [pc, #816]	; (80024dc <readData+0x34c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f4      	bne.n	800219a <readData+0xa>
			osMutexWait(mutex, osWaitForever);
 80021b0:	4bcb      	ldr	r3, [pc, #812]	; (80024e0 <readData+0x350>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021b8:	4618      	mov	r0, r3
 80021ba:	f007 ff31 	bl	800a020 <osMutexWait>


			uint8_t buffer[100];

			memset(buffer, 0, sizeof(buffer));
 80021be:	f107 030c 	add.w	r3, r7, #12
 80021c2:	2264      	movs	r2, #100	; 0x64
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f00a ff7e 	bl	800d0c8 <memset>
			sprintf(buffer, " \r\n	| Statistics:  \r\n");
 80021cc:	f107 030c 	add.w	r3, r7, #12
 80021d0:	49c4      	ldr	r1, [pc, #784]	; (80024e4 <readData+0x354>)
 80021d2:	4618      	mov	r0, r3
 80021d4:	f00a fea8 	bl	800cf28 <siprintf>
			HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer),
 80021d8:	f107 030c 	add.w	r3, r7, #12
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe f85f 	bl	80002a0 <strlen>
 80021e2:	4603      	mov	r3, r0
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	f107 010c 	add.w	r1, r7, #12
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021ee:	48be      	ldr	r0, [pc, #760]	; (80024e8 <readData+0x358>)
 80021f0:	f006 ffc4 	bl	800917c <HAL_UART_Transmit>
			HAL_MAX_DELAY);

			////////////////
//			HAL_Delay(100);

			memset(data_to_write, 0, sizeof(data_to_write)); // Clear the read buffer
 80021f4:	2228      	movs	r2, #40	; 0x28
 80021f6:	2100      	movs	r1, #0
 80021f8:	48bc      	ldr	r0, [pc, #752]	; (80024ec <readData+0x35c>)
 80021fa:	f00a ff65 	bl	800d0c8 <memset>
			if (BSP_QSPI_Read(data_to_write, 0, 10 * sizeof(float)) != QSPI_OK) {
 80021fe:	2228      	movs	r2, #40	; 0x28
 8002200:	2100      	movs	r1, #0
 8002202:	48ba      	ldr	r0, [pc, #744]	; (80024ec <readData+0x35c>)
 8002204:	f001 fbea 	bl	80039dc <BSP_QSPI_Read>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d01a      	beq.n	8002244 <readData+0xb4>
				memset(buffer, 0, sizeof(buffer));
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	2264      	movs	r2, #100	; 0x64
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f00a ff56 	bl	800d0c8 <memset>
				sprintf(buffer, "Error read! \r\n");
 800221c:	f107 030c 	add.w	r3, r7, #12
 8002220:	49b3      	ldr	r1, [pc, #716]	; (80024f0 <readData+0x360>)
 8002222:	4618      	mov	r0, r3
 8002224:	f00a fe80 	bl	800cf28 <siprintf>
				HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer),
 8002228:	f107 030c 	add.w	r3, r7, #12
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe f837 	bl	80002a0 <strlen>
 8002232:	4603      	mov	r3, r0
 8002234:	b29a      	uxth	r2, r3
 8002236:	f107 010c 	add.w	r1, r7, #12
 800223a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800223e:	48aa      	ldr	r0, [pc, #680]	; (80024e8 <readData+0x358>)
 8002240:	f006 ff9c 	bl	800917c <HAL_UART_Transmit>
				HAL_MAX_DELAY);
			}

			calculate(data_to_write, 10);
 8002244:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002248:	48a8      	ldr	r0, [pc, #672]	; (80024ec <readData+0x35c>)
 800224a:	f7ff f86b 	bl	8001324 <calculate>

			memset(buffer, 0, sizeof(buffer));
 800224e:	f107 030c 	add.w	r3, r7, #12
 8002252:	2264      	movs	r2, #100	; 0x64
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f00a ff36 	bl	800d0c8 <memset>
			sprintf(buffer,
 800225c:	4ba5      	ldr	r3, [pc, #660]	; (80024f4 <readData+0x364>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe f989 	bl	8000578 <__aeabi_f2d>
 8002266:	4680      	mov	r8, r0
 8002268:	4689      	mov	r9, r1
 800226a:	4ba3      	ldr	r3, [pc, #652]	; (80024f8 <readData+0x368>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe f982 	bl	8000578 <__aeabi_f2d>
 8002274:	4604      	mov	r4, r0
 8002276:	460d      	mov	r5, r1
 8002278:	4ba0      	ldr	r3, [pc, #640]	; (80024fc <readData+0x36c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe f97b 	bl	8000578 <__aeabi_f2d>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	f107 000c 	add.w	r0, r7, #12
 800228a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800228e:	e9cd 4500 	strd	r4, r5, [sp]
 8002292:	4642      	mov	r2, r8
 8002294:	464b      	mov	r3, r9
 8002296:	499a      	ldr	r1, [pc, #616]	; (8002500 <readData+0x370>)
 8002298:	f00a fe46 	bl	800cf28 <siprintf>
					"\r\n	| Stats Temperature: Num Sample: %f Mean: %f Variance %f\r\n",
					samplesG, meanG, varianceG);
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
					strlen((char*) buffer), HAL_MAX_DELAY);
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fd fffd 	bl	80002a0 <strlen>
 80022a6:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	f107 010c 	add.w	r1, r7, #12
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022b2:	488d      	ldr	r0, [pc, #564]	; (80024e8 <readData+0x358>)
 80022b4:	f006 ff62 	bl	800917c <HAL_UART_Transmit>

			////////////////
//			HAL_Delay(100);
//			addressOffset += len;
			memset(data_to_write, 0, sizeof(data_to_write));
 80022b8:	2228      	movs	r2, #40	; 0x28
 80022ba:	2100      	movs	r1, #0
 80022bc:	488b      	ldr	r0, [pc, #556]	; (80024ec <readData+0x35c>)
 80022be:	f00a ff03 	bl	800d0c8 <memset>
			if (BSP_QSPI_Read(data_to_write, 10 * sizeof(float), 10 * sizeof(float)) != QSPI_OK) {
 80022c2:	2228      	movs	r2, #40	; 0x28
 80022c4:	2128      	movs	r1, #40	; 0x28
 80022c6:	4889      	ldr	r0, [pc, #548]	; (80024ec <readData+0x35c>)
 80022c8:	f001 fb88 	bl	80039dc <BSP_QSPI_Read>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d01a      	beq.n	8002308 <readData+0x178>
				memset(buffer, 0, sizeof(buffer));
 80022d2:	f107 030c 	add.w	r3, r7, #12
 80022d6:	2264      	movs	r2, #100	; 0x64
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f00a fef4 	bl	800d0c8 <memset>
				sprintf(buffer, "Error read! \r\n");
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	4982      	ldr	r1, [pc, #520]	; (80024f0 <readData+0x360>)
 80022e6:	4618      	mov	r0, r3
 80022e8:	f00a fe1e 	bl	800cf28 <siprintf>
				HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer),
 80022ec:	f107 030c 	add.w	r3, r7, #12
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fd ffd5 	bl	80002a0 <strlen>
 80022f6:	4603      	mov	r3, r0
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	f107 010c 	add.w	r1, r7, #12
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002302:	4879      	ldr	r0, [pc, #484]	; (80024e8 <readData+0x358>)
 8002304:	f006 ff3a 	bl	800917c <HAL_UART_Transmit>
				HAL_MAX_DELAY);
			}

			calculate(data_to_write, 10);
 8002308:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800230c:	4877      	ldr	r0, [pc, #476]	; (80024ec <readData+0x35c>)
 800230e:	f7ff f809 	bl	8001324 <calculate>

			memset(buffer, 0, sizeof(buffer));
 8002312:	f107 030c 	add.w	r3, r7, #12
 8002316:	2264      	movs	r2, #100	; 0x64
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f00a fed4 	bl	800d0c8 <memset>
			sprintf(buffer,
 8002320:	4b74      	ldr	r3, [pc, #464]	; (80024f4 <readData+0x364>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe f927 	bl	8000578 <__aeabi_f2d>
 800232a:	4680      	mov	r8, r0
 800232c:	4689      	mov	r9, r1
 800232e:	4b72      	ldr	r3, [pc, #456]	; (80024f8 <readData+0x368>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe f920 	bl	8000578 <__aeabi_f2d>
 8002338:	4604      	mov	r4, r0
 800233a:	460d      	mov	r5, r1
 800233c:	4b6f      	ldr	r3, [pc, #444]	; (80024fc <readData+0x36c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f919 	bl	8000578 <__aeabi_f2d>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	f107 000c 	add.w	r0, r7, #12
 800234e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002352:	e9cd 4500 	strd	r4, r5, [sp]
 8002356:	4642      	mov	r2, r8
 8002358:	464b      	mov	r3, r9
 800235a:	496a      	ldr	r1, [pc, #424]	; (8002504 <readData+0x374>)
 800235c:	f00a fde4 	bl	800cf28 <siprintf>
					"	| Stats Pressure: Num Sample: %f Mean: %f Variance %f\r\n",
					samplesG, meanG, varianceG);
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
					strlen((char*) buffer), HAL_MAX_DELAY);
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	4618      	mov	r0, r3
 8002366:	f7fd ff9b 	bl	80002a0 <strlen>
 800236a:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
 800236c:	b29a      	uxth	r2, r3
 800236e:	f107 010c 	add.w	r1, r7, #12
 8002372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002376:	485c      	ldr	r0, [pc, #368]	; (80024e8 <readData+0x358>)
 8002378:	f006 ff00 	bl	800917c <HAL_UART_Transmit>

			////////////////
//			HAL_Delay(100);
//			addressOffset += len;
			memset(data_to_write, 0, sizeof(data_to_write));
 800237c:	2228      	movs	r2, #40	; 0x28
 800237e:	2100      	movs	r1, #0
 8002380:	485a      	ldr	r0, [pc, #360]	; (80024ec <readData+0x35c>)
 8002382:	f00a fea1 	bl	800d0c8 <memset>
			if (BSP_QSPI_Read(data_to_write, 10 * sizeof(float) * 2, 10 * sizeof(float)) != QSPI_OK) {
 8002386:	2228      	movs	r2, #40	; 0x28
 8002388:	2150      	movs	r1, #80	; 0x50
 800238a:	4858      	ldr	r0, [pc, #352]	; (80024ec <readData+0x35c>)
 800238c:	f001 fb26 	bl	80039dc <BSP_QSPI_Read>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d01a      	beq.n	80023cc <readData+0x23c>
				memset(buffer, 0, sizeof(buffer));
 8002396:	f107 030c 	add.w	r3, r7, #12
 800239a:	2264      	movs	r2, #100	; 0x64
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f00a fe92 	bl	800d0c8 <memset>
				sprintf(buffer, "Error read! \r\n");
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	4951      	ldr	r1, [pc, #324]	; (80024f0 <readData+0x360>)
 80023aa:	4618      	mov	r0, r3
 80023ac:	f00a fdbc 	bl	800cf28 <siprintf>
				HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer),
 80023b0:	f107 030c 	add.w	r3, r7, #12
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fd ff73 	bl	80002a0 <strlen>
 80023ba:	4603      	mov	r3, r0
 80023bc:	b29a      	uxth	r2, r3
 80023be:	f107 010c 	add.w	r1, r7, #12
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023c6:	4848      	ldr	r0, [pc, #288]	; (80024e8 <readData+0x358>)
 80023c8:	f006 fed8 	bl	800917c <HAL_UART_Transmit>
				HAL_MAX_DELAY);
			}

			calculate(data_to_write, 10);
 80023cc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80023d0:	4846      	ldr	r0, [pc, #280]	; (80024ec <readData+0x35c>)
 80023d2:	f7fe ffa7 	bl	8001324 <calculate>

			memset(buffer, 0, sizeof(buffer));
 80023d6:	f107 030c 	add.w	r3, r7, #12
 80023da:	2264      	movs	r2, #100	; 0x64
 80023dc:	2100      	movs	r1, #0
 80023de:	4618      	mov	r0, r3
 80023e0:	f00a fe72 	bl	800d0c8 <memset>
			sprintf(buffer,
 80023e4:	4b43      	ldr	r3, [pc, #268]	; (80024f4 <readData+0x364>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe f8c5 	bl	8000578 <__aeabi_f2d>
 80023ee:	4680      	mov	r8, r0
 80023f0:	4689      	mov	r9, r1
 80023f2:	4b41      	ldr	r3, [pc, #260]	; (80024f8 <readData+0x368>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe f8be 	bl	8000578 <__aeabi_f2d>
 80023fc:	4604      	mov	r4, r0
 80023fe:	460d      	mov	r5, r1
 8002400:	4b3e      	ldr	r3, [pc, #248]	; (80024fc <readData+0x36c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe f8b7 	bl	8000578 <__aeabi_f2d>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	f107 000c 	add.w	r0, r7, #12
 8002412:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002416:	e9cd 4500 	strd	r4, r5, [sp]
 800241a:	4642      	mov	r2, r8
 800241c:	464b      	mov	r3, r9
 800241e:	493a      	ldr	r1, [pc, #232]	; (8002508 <readData+0x378>)
 8002420:	f00a fd82 	bl	800cf28 <siprintf>
					"	| Stats Humidity: Num Sample: %f Mean: %f Variance %f\r\n",
					samplesG, meanG, varianceG);
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
					strlen((char*) buffer), HAL_MAX_DELAY);
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	4618      	mov	r0, r3
 800242a:	f7fd ff39 	bl	80002a0 <strlen>
 800242e:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
 8002430:	b29a      	uxth	r2, r3
 8002432:	f107 010c 	add.w	r1, r7, #12
 8002436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800243a:	482b      	ldr	r0, [pc, #172]	; (80024e8 <readData+0x358>)
 800243c:	f006 fe9e 	bl	800917c <HAL_UART_Transmit>

			///////////////////////
			memset(data_to_writeA, 0, sizeof(data_to_writeA));
 8002440:	2228      	movs	r2, #40	; 0x28
 8002442:	2100      	movs	r1, #0
 8002444:	4831      	ldr	r0, [pc, #196]	; (800250c <readData+0x37c>)
 8002446:	f00a fe3f 	bl	800d0c8 <memset>
			memset(data_to_writeB, 0, sizeof(data_to_writeB));
 800244a:	2228      	movs	r2, #40	; 0x28
 800244c:	2100      	movs	r1, #0
 800244e:	4830      	ldr	r0, [pc, #192]	; (8002510 <readData+0x380>)
 8002450:	f00a fe3a 	bl	800d0c8 <memset>
			memset(data_to_writeC, 0, sizeof(data_to_writeC));
 8002454:	2228      	movs	r2, #40	; 0x28
 8002456:	2100      	movs	r1, #0
 8002458:	482e      	ldr	r0, [pc, #184]	; (8002514 <readData+0x384>)
 800245a:	f00a fe35 	bl	800d0c8 <memset>
//			addressOffset += len;
			if (BSP_QSPI_Read(data_to_writeA,  10 * sizeof(float) * 3, 10 * sizeof(float)) != QSPI_OK) {
 800245e:	2228      	movs	r2, #40	; 0x28
 8002460:	2178      	movs	r1, #120	; 0x78
 8002462:	482a      	ldr	r0, [pc, #168]	; (800250c <readData+0x37c>)
 8002464:	f001 faba 	bl	80039dc <BSP_QSPI_Read>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d01a      	beq.n	80024a4 <readData+0x314>
				memset(buffer, 0, sizeof(buffer));
 800246e:	f107 030c 	add.w	r3, r7, #12
 8002472:	2264      	movs	r2, #100	; 0x64
 8002474:	2100      	movs	r1, #0
 8002476:	4618      	mov	r0, r3
 8002478:	f00a fe26 	bl	800d0c8 <memset>
				sprintf(buffer, "Error read! \r\n");
 800247c:	f107 030c 	add.w	r3, r7, #12
 8002480:	491b      	ldr	r1, [pc, #108]	; (80024f0 <readData+0x360>)
 8002482:	4618      	mov	r0, r3
 8002484:	f00a fd50 	bl	800cf28 <siprintf>
				HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer),
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	4618      	mov	r0, r3
 800248e:	f7fd ff07 	bl	80002a0 <strlen>
 8002492:	4603      	mov	r3, r0
 8002494:	b29a      	uxth	r2, r3
 8002496:	f107 010c 	add.w	r1, r7, #12
 800249a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800249e:	4812      	ldr	r0, [pc, #72]	; (80024e8 <readData+0x358>)
 80024a0:	f006 fe6c 	bl	800917c <HAL_UART_Transmit>
				HAL_MAX_DELAY);
			}
//			addressOffset += len;
			if (BSP_QSPI_Read(data_to_writeB,  10 * sizeof(float) * 4, 10 * sizeof(float)) != QSPI_OK) {
 80024a4:	2228      	movs	r2, #40	; 0x28
 80024a6:	21a0      	movs	r1, #160	; 0xa0
 80024a8:	4819      	ldr	r0, [pc, #100]	; (8002510 <readData+0x380>)
 80024aa:	f001 fa97 	bl	80039dc <BSP_QSPI_Read>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d03c      	beq.n	800252e <readData+0x39e>
				memset(buffer, 0, sizeof(buffer));
 80024b4:	f107 030c 	add.w	r3, r7, #12
 80024b8:	2264      	movs	r2, #100	; 0x64
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f00a fe03 	bl	800d0c8 <memset>
				sprintf(buffer, "Error read! \r\n");
 80024c2:	f107 030c 	add.w	r3, r7, #12
 80024c6:	490a      	ldr	r1, [pc, #40]	; (80024f0 <readData+0x360>)
 80024c8:	4618      	mov	r0, r3
 80024ca:	f00a fd2d 	bl	800cf28 <siprintf>
				HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer),
 80024ce:	f107 030c 	add.w	r3, r7, #12
 80024d2:	4618      	mov	r0, r3
 80024d4:	e020      	b.n	8002518 <readData+0x388>
 80024d6:	bf00      	nop
 80024d8:	20000658 	.word	0x20000658
 80024dc:	20000714 	.word	0x20000714
 80024e0:	20000650 	.word	0x20000650
 80024e4:	0800f500 	.word	0x0800f500
 80024e8:	200005b0 	.word	0x200005b0
 80024ec:	20000674 	.word	0x20000674
 80024f0:	0800f518 	.word	0x0800f518
 80024f4:	20000718 	.word	0x20000718
 80024f8:	2000071c 	.word	0x2000071c
 80024fc:	20000720 	.word	0x20000720
 8002500:	0800f528 	.word	0x0800f528
 8002504:	0800f568 	.word	0x0800f568
 8002508:	0800f5a4 	.word	0x0800f5a4
 800250c:	2000069c 	.word	0x2000069c
 8002510:	200006c4 	.word	0x200006c4
 8002514:	200006ec 	.word	0x200006ec
 8002518:	f7fd fec2 	bl	80002a0 <strlen>
 800251c:	4603      	mov	r3, r0
 800251e:	b29a      	uxth	r2, r3
 8002520:	f107 010c 	add.w	r1, r7, #12
 8002524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002528:	48c9      	ldr	r0, [pc, #804]	; (8002850 <readData+0x6c0>)
 800252a:	f006 fe27 	bl	800917c <HAL_UART_Transmit>
				HAL_MAX_DELAY);
			}
//			addressOffset += len;
			if (BSP_QSPI_Read(data_to_writeC,  10 * sizeof(float) * 5, 10 * sizeof(float)) != QSPI_OK) {
 800252e:	2228      	movs	r2, #40	; 0x28
 8002530:	21c8      	movs	r1, #200	; 0xc8
 8002532:	48c8      	ldr	r0, [pc, #800]	; (8002854 <readData+0x6c4>)
 8002534:	f001 fa52 	bl	80039dc <BSP_QSPI_Read>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d01a      	beq.n	8002574 <readData+0x3e4>
				memset(buffer, 0, sizeof(buffer));
 800253e:	f107 030c 	add.w	r3, r7, #12
 8002542:	2264      	movs	r2, #100	; 0x64
 8002544:	2100      	movs	r1, #0
 8002546:	4618      	mov	r0, r3
 8002548:	f00a fdbe 	bl	800d0c8 <memset>
				sprintf(buffer, "Error read! \r\n");
 800254c:	f107 030c 	add.w	r3, r7, #12
 8002550:	49c1      	ldr	r1, [pc, #772]	; (8002858 <readData+0x6c8>)
 8002552:	4618      	mov	r0, r3
 8002554:	f00a fce8 	bl	800cf28 <siprintf>
				HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer),
 8002558:	f107 030c 	add.w	r3, r7, #12
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd fe9f 	bl	80002a0 <strlen>
 8002562:	4603      	mov	r3, r0
 8002564:	b29a      	uxth	r2, r3
 8002566:	f107 010c 	add.w	r1, r7, #12
 800256a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800256e:	48b8      	ldr	r0, [pc, #736]	; (8002850 <readData+0x6c0>)
 8002570:	f006 fe04 	bl	800917c <HAL_UART_Transmit>
				HAL_MAX_DELAY);
			}

			calculateMulti(data_to_writeA, data_to_writeB, data_to_writeC, 10);
 8002574:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002578:	4ab6      	ldr	r2, [pc, #728]	; (8002854 <readData+0x6c4>)
 800257a:	49b8      	ldr	r1, [pc, #736]	; (800285c <readData+0x6cc>)
 800257c:	48b8      	ldr	r0, [pc, #736]	; (8002860 <readData+0x6d0>)
 800257e:	f7fe ff61 	bl	8001444 <calculateMulti>

			memset(buffer, 0, sizeof(buffer));
 8002582:	f107 030c 	add.w	r3, r7, #12
 8002586:	2264      	movs	r2, #100	; 0x64
 8002588:	2100      	movs	r1, #0
 800258a:	4618      	mov	r0, r3
 800258c:	f00a fd9c 	bl	800d0c8 <memset>
			sprintf(buffer,
 8002590:	4bb4      	ldr	r3, [pc, #720]	; (8002864 <readData+0x6d4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7fd ffef 	bl	8000578 <__aeabi_f2d>
 800259a:	4680      	mov	r8, r0
 800259c:	4689      	mov	r9, r1
 800259e:	4bb2      	ldr	r3, [pc, #712]	; (8002868 <readData+0x6d8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fd ffe8 	bl	8000578 <__aeabi_f2d>
 80025a8:	4604      	mov	r4, r0
 80025aa:	460d      	mov	r5, r1
 80025ac:	4baf      	ldr	r3, [pc, #700]	; (800286c <readData+0x6dc>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd ffe1 	bl	8000578 <__aeabi_f2d>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	f107 000c 	add.w	r0, r7, #12
 80025be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025c2:	e9cd 4500 	strd	r4, r5, [sp]
 80025c6:	4642      	mov	r2, r8
 80025c8:	464b      	mov	r3, r9
 80025ca:	49a9      	ldr	r1, [pc, #676]	; (8002870 <readData+0x6e0>)
 80025cc:	f00a fcac 	bl	800cf28 <siprintf>
					" \r\n	| Stats Acc X: Num Sample: %f Mean: %f Variance %f\r\n",
					samplesGA, meanGA, varianceGA);
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
					strlen((char*) buffer), HAL_MAX_DELAY);
 80025d0:	f107 030c 	add.w	r3, r7, #12
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fd fe63 	bl	80002a0 <strlen>
 80025da:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
 80025dc:	b29a      	uxth	r2, r3
 80025de:	f107 010c 	add.w	r1, r7, #12
 80025e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025e6:	489a      	ldr	r0, [pc, #616]	; (8002850 <readData+0x6c0>)
 80025e8:	f006 fdc8 	bl	800917c <HAL_UART_Transmit>

			memset(buffer, 0, sizeof(buffer));
 80025ec:	f107 030c 	add.w	r3, r7, #12
 80025f0:	2264      	movs	r2, #100	; 0x64
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f00a fd67 	bl	800d0c8 <memset>
			sprintf(buffer,
 80025fa:	4b9e      	ldr	r3, [pc, #632]	; (8002874 <readData+0x6e4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fd ffba 	bl	8000578 <__aeabi_f2d>
 8002604:	4680      	mov	r8, r0
 8002606:	4689      	mov	r9, r1
 8002608:	4b9b      	ldr	r3, [pc, #620]	; (8002878 <readData+0x6e8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7fd ffb3 	bl	8000578 <__aeabi_f2d>
 8002612:	4604      	mov	r4, r0
 8002614:	460d      	mov	r5, r1
 8002616:	4b99      	ldr	r3, [pc, #612]	; (800287c <readData+0x6ec>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fd ffac 	bl	8000578 <__aeabi_f2d>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	f107 000c 	add.w	r0, r7, #12
 8002628:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800262c:	e9cd 4500 	strd	r4, r5, [sp]
 8002630:	4642      	mov	r2, r8
 8002632:	464b      	mov	r3, r9
 8002634:	4992      	ldr	r1, [pc, #584]	; (8002880 <readData+0x6f0>)
 8002636:	f00a fc77 	bl	800cf28 <siprintf>
					"	| Stats Acc Y: Num Sample: %f Mean: %f Variance %f\r\n",
					samplesGB, meanGB, varianceGB);
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
					strlen((char*) buffer), HAL_MAX_DELAY);
 800263a:	f107 030c 	add.w	r3, r7, #12
 800263e:	4618      	mov	r0, r3
 8002640:	f7fd fe2e 	bl	80002a0 <strlen>
 8002644:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
 8002646:	b29a      	uxth	r2, r3
 8002648:	f107 010c 	add.w	r1, r7, #12
 800264c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002650:	487f      	ldr	r0, [pc, #508]	; (8002850 <readData+0x6c0>)
 8002652:	f006 fd93 	bl	800917c <HAL_UART_Transmit>

			memset(buffer, 0, sizeof(buffer));
 8002656:	f107 030c 	add.w	r3, r7, #12
 800265a:	2264      	movs	r2, #100	; 0x64
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f00a fd32 	bl	800d0c8 <memset>
			sprintf(buffer,
 8002664:	4b87      	ldr	r3, [pc, #540]	; (8002884 <readData+0x6f4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fd ff85 	bl	8000578 <__aeabi_f2d>
 800266e:	4680      	mov	r8, r0
 8002670:	4689      	mov	r9, r1
 8002672:	4b85      	ldr	r3, [pc, #532]	; (8002888 <readData+0x6f8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd ff7e 	bl	8000578 <__aeabi_f2d>
 800267c:	4604      	mov	r4, r0
 800267e:	460d      	mov	r5, r1
 8002680:	4b82      	ldr	r3, [pc, #520]	; (800288c <readData+0x6fc>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7fd ff77 	bl	8000578 <__aeabi_f2d>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	f107 000c 	add.w	r0, r7, #12
 8002692:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002696:	e9cd 4500 	strd	r4, r5, [sp]
 800269a:	4642      	mov	r2, r8
 800269c:	464b      	mov	r3, r9
 800269e:	497c      	ldr	r1, [pc, #496]	; (8002890 <readData+0x700>)
 80026a0:	f00a fc42 	bl	800cf28 <siprintf>
					"	| Stats Acc Z: Num Sample: %f Mean: %f Variance %f\r\n",
					samplesGC, meanGC, varianceGC);
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
					strlen((char*) buffer), HAL_MAX_DELAY);
 80026a4:	f107 030c 	add.w	r3, r7, #12
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fd fdf9 	bl	80002a0 <strlen>
 80026ae:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	f107 010c 	add.w	r1, r7, #12
 80026b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026ba:	4865      	ldr	r0, [pc, #404]	; (8002850 <readData+0x6c0>)
 80026bc:	f006 fd5e 	bl	800917c <HAL_UART_Transmit>

			///////////////////////
			memset(data_to_writeA, 0, sizeof(data_to_writeA));
 80026c0:	2228      	movs	r2, #40	; 0x28
 80026c2:	2100      	movs	r1, #0
 80026c4:	4866      	ldr	r0, [pc, #408]	; (8002860 <readData+0x6d0>)
 80026c6:	f00a fcff 	bl	800d0c8 <memset>
			memset(data_to_writeB, 0, sizeof(data_to_writeB));
 80026ca:	2228      	movs	r2, #40	; 0x28
 80026cc:	2100      	movs	r1, #0
 80026ce:	4863      	ldr	r0, [pc, #396]	; (800285c <readData+0x6cc>)
 80026d0:	f00a fcfa 	bl	800d0c8 <memset>
			memset(data_to_writeC, 0, sizeof(data_to_writeC));
 80026d4:	2228      	movs	r2, #40	; 0x28
 80026d6:	2100      	movs	r1, #0
 80026d8:	485e      	ldr	r0, [pc, #376]	; (8002854 <readData+0x6c4>)
 80026da:	f00a fcf5 	bl	800d0c8 <memset>
//			addressOffset += len;
			if (BSP_QSPI_Read(data_to_writeA,  10 * sizeof(float) * 6, 10 * sizeof(float)) != QSPI_OK) {
 80026de:	2228      	movs	r2, #40	; 0x28
 80026e0:	21f0      	movs	r1, #240	; 0xf0
 80026e2:	485f      	ldr	r0, [pc, #380]	; (8002860 <readData+0x6d0>)
 80026e4:	f001 f97a 	bl	80039dc <BSP_QSPI_Read>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d01a      	beq.n	8002724 <readData+0x594>
				memset(buffer, 0, sizeof(buffer));
 80026ee:	f107 030c 	add.w	r3, r7, #12
 80026f2:	2264      	movs	r2, #100	; 0x64
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f00a fce6 	bl	800d0c8 <memset>
				sprintf(buffer, "Error read! \r\n");
 80026fc:	f107 030c 	add.w	r3, r7, #12
 8002700:	4955      	ldr	r1, [pc, #340]	; (8002858 <readData+0x6c8>)
 8002702:	4618      	mov	r0, r3
 8002704:	f00a fc10 	bl	800cf28 <siprintf>
				HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer),
 8002708:	f107 030c 	add.w	r3, r7, #12
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd fdc7 	bl	80002a0 <strlen>
 8002712:	4603      	mov	r3, r0
 8002714:	b29a      	uxth	r2, r3
 8002716:	f107 010c 	add.w	r1, r7, #12
 800271a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800271e:	484c      	ldr	r0, [pc, #304]	; (8002850 <readData+0x6c0>)
 8002720:	f006 fd2c 	bl	800917c <HAL_UART_Transmit>
				HAL_MAX_DELAY);
			}
//			addressOffset += len;
			if (BSP_QSPI_Read(data_to_writeB,  10 * sizeof(float) * 7, 10 * sizeof(float)) != QSPI_OK) {
 8002724:	2228      	movs	r2, #40	; 0x28
 8002726:	f44f 718c 	mov.w	r1, #280	; 0x118
 800272a:	484c      	ldr	r0, [pc, #304]	; (800285c <readData+0x6cc>)
 800272c:	f001 f956 	bl	80039dc <BSP_QSPI_Read>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d01a      	beq.n	800276c <readData+0x5dc>
				memset(buffer, 0, sizeof(buffer));
 8002736:	f107 030c 	add.w	r3, r7, #12
 800273a:	2264      	movs	r2, #100	; 0x64
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f00a fcc2 	bl	800d0c8 <memset>
				sprintf(buffer, "Error read! \r\n");
 8002744:	f107 030c 	add.w	r3, r7, #12
 8002748:	4943      	ldr	r1, [pc, #268]	; (8002858 <readData+0x6c8>)
 800274a:	4618      	mov	r0, r3
 800274c:	f00a fbec 	bl	800cf28 <siprintf>
				HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer),
 8002750:	f107 030c 	add.w	r3, r7, #12
 8002754:	4618      	mov	r0, r3
 8002756:	f7fd fda3 	bl	80002a0 <strlen>
 800275a:	4603      	mov	r3, r0
 800275c:	b29a      	uxth	r2, r3
 800275e:	f107 010c 	add.w	r1, r7, #12
 8002762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002766:	483a      	ldr	r0, [pc, #232]	; (8002850 <readData+0x6c0>)
 8002768:	f006 fd08 	bl	800917c <HAL_UART_Transmit>
				HAL_MAX_DELAY);
			}
//			addressOffset += len;
			if (BSP_QSPI_Read(data_to_writeC,  10 * sizeof(float) * 8, 10 * sizeof(float)) != QSPI_OK) {
 800276c:	2228      	movs	r2, #40	; 0x28
 800276e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002772:	4838      	ldr	r0, [pc, #224]	; (8002854 <readData+0x6c4>)
 8002774:	f001 f932 	bl	80039dc <BSP_QSPI_Read>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d01a      	beq.n	80027b4 <readData+0x624>
				memset(buffer, 0, sizeof(buffer));
 800277e:	f107 030c 	add.w	r3, r7, #12
 8002782:	2264      	movs	r2, #100	; 0x64
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f00a fc9e 	bl	800d0c8 <memset>
				sprintf(buffer, "Error read! \r\n");
 800278c:	f107 030c 	add.w	r3, r7, #12
 8002790:	4931      	ldr	r1, [pc, #196]	; (8002858 <readData+0x6c8>)
 8002792:	4618      	mov	r0, r3
 8002794:	f00a fbc8 	bl	800cf28 <siprintf>
				HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer),
 8002798:	f107 030c 	add.w	r3, r7, #12
 800279c:	4618      	mov	r0, r3
 800279e:	f7fd fd7f 	bl	80002a0 <strlen>
 80027a2:	4603      	mov	r3, r0
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	f107 010c 	add.w	r1, r7, #12
 80027aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027ae:	4828      	ldr	r0, [pc, #160]	; (8002850 <readData+0x6c0>)
 80027b0:	f006 fce4 	bl	800917c <HAL_UART_Transmit>
				HAL_MAX_DELAY);
			}

			calculateMulti(data_to_writeA, data_to_writeB, data_to_writeC, 10);
 80027b4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80027b8:	4a26      	ldr	r2, [pc, #152]	; (8002854 <readData+0x6c4>)
 80027ba:	4928      	ldr	r1, [pc, #160]	; (800285c <readData+0x6cc>)
 80027bc:	4828      	ldr	r0, [pc, #160]	; (8002860 <readData+0x6d0>)
 80027be:	f7fe fe41 	bl	8001444 <calculateMulti>

			memset(buffer, 0, sizeof(buffer));
 80027c2:	f107 030c 	add.w	r3, r7, #12
 80027c6:	2264      	movs	r2, #100	; 0x64
 80027c8:	2100      	movs	r1, #0
 80027ca:	4618      	mov	r0, r3
 80027cc:	f00a fc7c 	bl	800d0c8 <memset>
			sprintf(buffer,
 80027d0:	4b24      	ldr	r3, [pc, #144]	; (8002864 <readData+0x6d4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fd fecf 	bl	8000578 <__aeabi_f2d>
 80027da:	4680      	mov	r8, r0
 80027dc:	4689      	mov	r9, r1
 80027de:	4b22      	ldr	r3, [pc, #136]	; (8002868 <readData+0x6d8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fd fec8 	bl	8000578 <__aeabi_f2d>
 80027e8:	4604      	mov	r4, r0
 80027ea:	460d      	mov	r5, r1
 80027ec:	4b1f      	ldr	r3, [pc, #124]	; (800286c <readData+0x6dc>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fd fec1 	bl	8000578 <__aeabi_f2d>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	f107 000c 	add.w	r0, r7, #12
 80027fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002802:	e9cd 4500 	strd	r4, r5, [sp]
 8002806:	4642      	mov	r2, r8
 8002808:	464b      	mov	r3, r9
 800280a:	4922      	ldr	r1, [pc, #136]	; (8002894 <readData+0x704>)
 800280c:	f00a fb8c 	bl	800cf28 <siprintf>
					" \r\n	| Stats Gyro X: Num Sample: %f Mean: %f Variance %f\r\n",
					samplesGA, meanGA, varianceGA);
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
					strlen((char*) buffer), HAL_MAX_DELAY);
 8002810:	f107 030c 	add.w	r3, r7, #12
 8002814:	4618      	mov	r0, r3
 8002816:	f7fd fd43 	bl	80002a0 <strlen>
 800281a:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
 800281c:	b29a      	uxth	r2, r3
 800281e:	f107 010c 	add.w	r1, r7, #12
 8002822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002826:	480a      	ldr	r0, [pc, #40]	; (8002850 <readData+0x6c0>)
 8002828:	f006 fca8 	bl	800917c <HAL_UART_Transmit>

			memset(buffer, 0, sizeof(buffer));
 800282c:	f107 030c 	add.w	r3, r7, #12
 8002830:	2264      	movs	r2, #100	; 0x64
 8002832:	2100      	movs	r1, #0
 8002834:	4618      	mov	r0, r3
 8002836:	f00a fc47 	bl	800d0c8 <memset>
			sprintf(buffer,
 800283a:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <readData+0x6e4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7fd fe9a 	bl	8000578 <__aeabi_f2d>
 8002844:	4680      	mov	r8, r0
 8002846:	4689      	mov	r9, r1
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <readData+0x6e8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	e023      	b.n	8002898 <readData+0x708>
 8002850:	200005b0 	.word	0x200005b0
 8002854:	200006ec 	.word	0x200006ec
 8002858:	0800f518 	.word	0x0800f518
 800285c:	200006c4 	.word	0x200006c4
 8002860:	2000069c 	.word	0x2000069c
 8002864:	20000724 	.word	0x20000724
 8002868:	20000728 	.word	0x20000728
 800286c:	2000072c 	.word	0x2000072c
 8002870:	0800f5e0 	.word	0x0800f5e0
 8002874:	20000730 	.word	0x20000730
 8002878:	20000734 	.word	0x20000734
 800287c:	20000738 	.word	0x20000738
 8002880:	0800f61c 	.word	0x0800f61c
 8002884:	2000073c 	.word	0x2000073c
 8002888:	20000740 	.word	0x20000740
 800288c:	20000744 	.word	0x20000744
 8002890:	0800f654 	.word	0x0800f654
 8002894:	0800f68c 	.word	0x0800f68c
 8002898:	f7fd fe6e 	bl	8000578 <__aeabi_f2d>
 800289c:	4604      	mov	r4, r0
 800289e:	460d      	mov	r5, r1
 80028a0:	4bca      	ldr	r3, [pc, #808]	; (8002bcc <readData+0xa3c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fd fe67 	bl	8000578 <__aeabi_f2d>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	f107 000c 	add.w	r0, r7, #12
 80028b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80028b6:	e9cd 4500 	strd	r4, r5, [sp]
 80028ba:	4642      	mov	r2, r8
 80028bc:	464b      	mov	r3, r9
 80028be:	49c4      	ldr	r1, [pc, #784]	; (8002bd0 <readData+0xa40>)
 80028c0:	f00a fb32 	bl	800cf28 <siprintf>
					"	| Stats Gyro Y: Num Sample: %f Mean: %f Variance %f\r\n",
					samplesGB, meanGB, varianceGB);
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
					strlen((char*) buffer), HAL_MAX_DELAY);
 80028c4:	f107 030c 	add.w	r3, r7, #12
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fd fce9 	bl	80002a0 <strlen>
 80028ce:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	f107 010c 	add.w	r1, r7, #12
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028da:	48be      	ldr	r0, [pc, #760]	; (8002bd4 <readData+0xa44>)
 80028dc:	f006 fc4e 	bl	800917c <HAL_UART_Transmit>

			memset(buffer, 0, sizeof(buffer));
 80028e0:	f107 030c 	add.w	r3, r7, #12
 80028e4:	2264      	movs	r2, #100	; 0x64
 80028e6:	2100      	movs	r1, #0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f00a fbed 	bl	800d0c8 <memset>
			sprintf(buffer,
 80028ee:	4bba      	ldr	r3, [pc, #744]	; (8002bd8 <readData+0xa48>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fd fe40 	bl	8000578 <__aeabi_f2d>
 80028f8:	4680      	mov	r8, r0
 80028fa:	4689      	mov	r9, r1
 80028fc:	4bb7      	ldr	r3, [pc, #732]	; (8002bdc <readData+0xa4c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7fd fe39 	bl	8000578 <__aeabi_f2d>
 8002906:	4604      	mov	r4, r0
 8002908:	460d      	mov	r5, r1
 800290a:	4bb5      	ldr	r3, [pc, #724]	; (8002be0 <readData+0xa50>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fe32 	bl	8000578 <__aeabi_f2d>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	f107 000c 	add.w	r0, r7, #12
 800291c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002920:	e9cd 4500 	strd	r4, r5, [sp]
 8002924:	4642      	mov	r2, r8
 8002926:	464b      	mov	r3, r9
 8002928:	49ae      	ldr	r1, [pc, #696]	; (8002be4 <readData+0xa54>)
 800292a:	f00a fafd 	bl	800cf28 <siprintf>
					"	| Stats Gyro Z: Num Sample: %f Mean: %f Variance %f\r\n",
					samplesGC, meanGC, varianceGC);
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
					strlen((char*) buffer), HAL_MAX_DELAY);
 800292e:	f107 030c 	add.w	r3, r7, #12
 8002932:	4618      	mov	r0, r3
 8002934:	f7fd fcb4 	bl	80002a0 <strlen>
 8002938:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
 800293a:	b29a      	uxth	r2, r3
 800293c:	f107 010c 	add.w	r1, r7, #12
 8002940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002944:	48a3      	ldr	r0, [pc, #652]	; (8002bd4 <readData+0xa44>)
 8002946:	f006 fc19 	bl	800917c <HAL_UART_Transmit>

			///////////////////////
			memset(data_to_writeA, 0, sizeof(data_to_writeA));
 800294a:	2228      	movs	r2, #40	; 0x28
 800294c:	2100      	movs	r1, #0
 800294e:	48a6      	ldr	r0, [pc, #664]	; (8002be8 <readData+0xa58>)
 8002950:	f00a fbba 	bl	800d0c8 <memset>
			memset(data_to_writeB, 0, sizeof(data_to_writeB));
 8002954:	2228      	movs	r2, #40	; 0x28
 8002956:	2100      	movs	r1, #0
 8002958:	48a4      	ldr	r0, [pc, #656]	; (8002bec <readData+0xa5c>)
 800295a:	f00a fbb5 	bl	800d0c8 <memset>
			memset(data_to_writeC, 0, sizeof(data_to_writeC));
 800295e:	2228      	movs	r2, #40	; 0x28
 8002960:	2100      	movs	r1, #0
 8002962:	48a3      	ldr	r0, [pc, #652]	; (8002bf0 <readData+0xa60>)
 8002964:	f00a fbb0 	bl	800d0c8 <memset>
//			addressOffset += len;
			if (BSP_QSPI_Read(data_to_writeA,  10 * sizeof(float) * 9, 10 * sizeof(float)) != QSPI_OK) {
 8002968:	2228      	movs	r2, #40	; 0x28
 800296a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800296e:	489e      	ldr	r0, [pc, #632]	; (8002be8 <readData+0xa58>)
 8002970:	f001 f834 	bl	80039dc <BSP_QSPI_Read>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d01a      	beq.n	80029b0 <readData+0x820>
				memset(buffer, 0, sizeof(buffer));
 800297a:	f107 030c 	add.w	r3, r7, #12
 800297e:	2264      	movs	r2, #100	; 0x64
 8002980:	2100      	movs	r1, #0
 8002982:	4618      	mov	r0, r3
 8002984:	f00a fba0 	bl	800d0c8 <memset>
				sprintf(buffer, "Error read! \r\n");
 8002988:	f107 030c 	add.w	r3, r7, #12
 800298c:	4999      	ldr	r1, [pc, #612]	; (8002bf4 <readData+0xa64>)
 800298e:	4618      	mov	r0, r3
 8002990:	f00a faca 	bl	800cf28 <siprintf>
				HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer),
 8002994:	f107 030c 	add.w	r3, r7, #12
 8002998:	4618      	mov	r0, r3
 800299a:	f7fd fc81 	bl	80002a0 <strlen>
 800299e:	4603      	mov	r3, r0
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	f107 010c 	add.w	r1, r7, #12
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029aa:	488a      	ldr	r0, [pc, #552]	; (8002bd4 <readData+0xa44>)
 80029ac:	f006 fbe6 	bl	800917c <HAL_UART_Transmit>
				HAL_MAX_DELAY);
			}
//			addressOffset += len;
			if (BSP_QSPI_Read(data_to_writeB,  10 * sizeof(float) * 10, 10 * sizeof(float)) != QSPI_OK) {
 80029b0:	2228      	movs	r2, #40	; 0x28
 80029b2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80029b6:	488d      	ldr	r0, [pc, #564]	; (8002bec <readData+0xa5c>)
 80029b8:	f001 f810 	bl	80039dc <BSP_QSPI_Read>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d01a      	beq.n	80029f8 <readData+0x868>
				memset(buffer, 0, sizeof(buffer));
 80029c2:	f107 030c 	add.w	r3, r7, #12
 80029c6:	2264      	movs	r2, #100	; 0x64
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f00a fb7c 	bl	800d0c8 <memset>
				sprintf(buffer, "Error read! \r\n");
 80029d0:	f107 030c 	add.w	r3, r7, #12
 80029d4:	4987      	ldr	r1, [pc, #540]	; (8002bf4 <readData+0xa64>)
 80029d6:	4618      	mov	r0, r3
 80029d8:	f00a faa6 	bl	800cf28 <siprintf>
				HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer),
 80029dc:	f107 030c 	add.w	r3, r7, #12
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fd fc5d 	bl	80002a0 <strlen>
 80029e6:	4603      	mov	r3, r0
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	f107 010c 	add.w	r1, r7, #12
 80029ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029f2:	4878      	ldr	r0, [pc, #480]	; (8002bd4 <readData+0xa44>)
 80029f4:	f006 fbc2 	bl	800917c <HAL_UART_Transmit>
				HAL_MAX_DELAY);
			}
//			addressOffset += len;
			if (BSP_QSPI_Read(data_to_writeC,  10 * sizeof(float) * 11,  10 * sizeof(float)) != QSPI_OK) {
 80029f8:	2228      	movs	r2, #40	; 0x28
 80029fa:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80029fe:	487c      	ldr	r0, [pc, #496]	; (8002bf0 <readData+0xa60>)
 8002a00:	f000 ffec 	bl	80039dc <BSP_QSPI_Read>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d01a      	beq.n	8002a40 <readData+0x8b0>
				memset(buffer, 0, sizeof(buffer));
 8002a0a:	f107 030c 	add.w	r3, r7, #12
 8002a0e:	2264      	movs	r2, #100	; 0x64
 8002a10:	2100      	movs	r1, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f00a fb58 	bl	800d0c8 <memset>
				sprintf(buffer, "Error read! \r\n");
 8002a18:	f107 030c 	add.w	r3, r7, #12
 8002a1c:	4975      	ldr	r1, [pc, #468]	; (8002bf4 <readData+0xa64>)
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f00a fa82 	bl	800cf28 <siprintf>
				HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer),
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fd fc39 	bl	80002a0 <strlen>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	f107 010c 	add.w	r1, r7, #12
 8002a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a3a:	4866      	ldr	r0, [pc, #408]	; (8002bd4 <readData+0xa44>)
 8002a3c:	f006 fb9e 	bl	800917c <HAL_UART_Transmit>





			calculateMulti(data_to_writeA, data_to_writeB, data_to_writeC, 10);
 8002a40:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002a44:	4a6a      	ldr	r2, [pc, #424]	; (8002bf0 <readData+0xa60>)
 8002a46:	4969      	ldr	r1, [pc, #420]	; (8002bec <readData+0xa5c>)
 8002a48:	4867      	ldr	r0, [pc, #412]	; (8002be8 <readData+0xa58>)
 8002a4a:	f7fe fcfb 	bl	8001444 <calculateMulti>

			memset(buffer, 0, sizeof(buffer));
 8002a4e:	f107 030c 	add.w	r3, r7, #12
 8002a52:	2264      	movs	r2, #100	; 0x64
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f00a fb36 	bl	800d0c8 <memset>
			sprintf(buffer,
 8002a5c:	4b66      	ldr	r3, [pc, #408]	; (8002bf8 <readData+0xa68>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fd fd89 	bl	8000578 <__aeabi_f2d>
 8002a66:	4680      	mov	r8, r0
 8002a68:	4689      	mov	r9, r1
 8002a6a:	4b64      	ldr	r3, [pc, #400]	; (8002bfc <readData+0xa6c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fd fd82 	bl	8000578 <__aeabi_f2d>
 8002a74:	4604      	mov	r4, r0
 8002a76:	460d      	mov	r5, r1
 8002a78:	4b61      	ldr	r3, [pc, #388]	; (8002c00 <readData+0xa70>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fd fd7b 	bl	8000578 <__aeabi_f2d>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	f107 000c 	add.w	r0, r7, #12
 8002a8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002a8e:	e9cd 4500 	strd	r4, r5, [sp]
 8002a92:	4642      	mov	r2, r8
 8002a94:	464b      	mov	r3, r9
 8002a96:	495b      	ldr	r1, [pc, #364]	; (8002c04 <readData+0xa74>)
 8002a98:	f00a fa46 	bl	800cf28 <siprintf>
					" \r\n	| Stats Magn X: Num Sample: %f Mean: %f Variance %f\r\n",
					samplesGA, meanGA, varianceGA);
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
					strlen((char*) buffer), HAL_MAX_DELAY);
 8002a9c:	f107 030c 	add.w	r3, r7, #12
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fd fbfd 	bl	80002a0 <strlen>
 8002aa6:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	f107 010c 	add.w	r1, r7, #12
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ab2:	4848      	ldr	r0, [pc, #288]	; (8002bd4 <readData+0xa44>)
 8002ab4:	f006 fb62 	bl	800917c <HAL_UART_Transmit>

			memset(buffer, 0, sizeof(buffer));
 8002ab8:	f107 030c 	add.w	r3, r7, #12
 8002abc:	2264      	movs	r2, #100	; 0x64
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f00a fb01 	bl	800d0c8 <memset>
			sprintf(buffer,
 8002ac6:	4b50      	ldr	r3, [pc, #320]	; (8002c08 <readData+0xa78>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fd fd54 	bl	8000578 <__aeabi_f2d>
 8002ad0:	4680      	mov	r8, r0
 8002ad2:	4689      	mov	r9, r1
 8002ad4:	4b4d      	ldr	r3, [pc, #308]	; (8002c0c <readData+0xa7c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fd fd4d 	bl	8000578 <__aeabi_f2d>
 8002ade:	4604      	mov	r4, r0
 8002ae0:	460d      	mov	r5, r1
 8002ae2:	4b3a      	ldr	r3, [pc, #232]	; (8002bcc <readData+0xa3c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fd fd46 	bl	8000578 <__aeabi_f2d>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	f107 000c 	add.w	r0, r7, #12
 8002af4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002af8:	e9cd 4500 	strd	r4, r5, [sp]
 8002afc:	4642      	mov	r2, r8
 8002afe:	464b      	mov	r3, r9
 8002b00:	4943      	ldr	r1, [pc, #268]	; (8002c10 <readData+0xa80>)
 8002b02:	f00a fa11 	bl	800cf28 <siprintf>
					"	| Stats Magn Y: Num Sample: %f Mean: %f Variance %f\r\n",
					samplesGB, meanGB, varianceGB);
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
					strlen((char*) buffer), HAL_MAX_DELAY);
 8002b06:	f107 030c 	add.w	r3, r7, #12
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fd fbc8 	bl	80002a0 <strlen>
 8002b10:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	f107 010c 	add.w	r1, r7, #12
 8002b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b1c:	482d      	ldr	r0, [pc, #180]	; (8002bd4 <readData+0xa44>)
 8002b1e:	f006 fb2d 	bl	800917c <HAL_UART_Transmit>

			memset(buffer, 0, sizeof(buffer));
 8002b22:	f107 030c 	add.w	r3, r7, #12
 8002b26:	2264      	movs	r2, #100	; 0x64
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f00a facc 	bl	800d0c8 <memset>
			sprintf(buffer,
 8002b30:	4b29      	ldr	r3, [pc, #164]	; (8002bd8 <readData+0xa48>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fd fd1f 	bl	8000578 <__aeabi_f2d>
 8002b3a:	4680      	mov	r8, r0
 8002b3c:	4689      	mov	r9, r1
 8002b3e:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <readData+0xa4c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fd fd18 	bl	8000578 <__aeabi_f2d>
 8002b48:	4604      	mov	r4, r0
 8002b4a:	460d      	mov	r5, r1
 8002b4c:	4b24      	ldr	r3, [pc, #144]	; (8002be0 <readData+0xa50>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fd fd11 	bl	8000578 <__aeabi_f2d>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	f107 000c 	add.w	r0, r7, #12
 8002b5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b62:	e9cd 4500 	strd	r4, r5, [sp]
 8002b66:	4642      	mov	r2, r8
 8002b68:	464b      	mov	r3, r9
 8002b6a:	492a      	ldr	r1, [pc, #168]	; (8002c14 <readData+0xa84>)
 8002b6c:	f00a f9dc 	bl	800cf28 <siprintf>
					"	| Stats Magn Z: Num Sample: %f Mean: %f Variance %f\r\n",
					samplesGC, meanGC, varianceGC);
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
					strlen((char*) buffer), HAL_MAX_DELAY);
 8002b70:	f107 030c 	add.w	r3, r7, #12
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fd fb93 	bl	80002a0 <strlen>
 8002b7a:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	f107 010c 	add.w	r1, r7, #12
 8002b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b86:	4813      	ldr	r0, [pc, #76]	; (8002bd4 <readData+0xa44>)
 8002b88:	f006 faf8 	bl	800917c <HAL_UART_Transmit>

			memset(buffer, 0, sizeof(buffer));
 8002b8c:	f107 030c 	add.w	r3, r7, #12
 8002b90:	2264      	movs	r2, #100	; 0x64
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f00a fa97 	bl	800d0c8 <memset>
			sprintf(buffer, " \r\n	--> Press again to restart \r\n");
 8002b9a:	f107 030c 	add.w	r3, r7, #12
 8002b9e:	491e      	ldr	r1, [pc, #120]	; (8002c18 <readData+0xa88>)
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f00a f9c1 	bl	800cf28 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
					strlen((char*) buffer), HAL_MAX_DELAY);
 8002ba6:	f107 030c 	add.w	r3, r7, #12
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fd fb78 	bl	80002a0 <strlen>
 8002bb0:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	f107 010c 	add.w	r1, r7, #12
 8002bb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bbc:	4805      	ldr	r0, [pc, #20]	; (8002bd4 <readData+0xa44>)
 8002bbe:	f006 fadd 	bl	800917c <HAL_UART_Transmit>

			hold = 0;
 8002bc2:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <readData+0xa8c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	e02a      	b.n	8002c20 <readData+0xa90>
 8002bca:	bf00      	nop
 8002bcc:	20000738 	.word	0x20000738
 8002bd0:	0800f6c8 	.word	0x0800f6c8
 8002bd4:	200005b0 	.word	0x200005b0
 8002bd8:	2000073c 	.word	0x2000073c
 8002bdc:	20000740 	.word	0x20000740
 8002be0:	20000744 	.word	0x20000744
 8002be4:	0800f700 	.word	0x0800f700
 8002be8:	2000069c 	.word	0x2000069c
 8002bec:	200006c4 	.word	0x200006c4
 8002bf0:	200006ec 	.word	0x200006ec
 8002bf4:	0800f518 	.word	0x0800f518
 8002bf8:	20000724 	.word	0x20000724
 8002bfc:	20000728 	.word	0x20000728
 8002c00:	2000072c 	.word	0x2000072c
 8002c04:	0800f738 	.word	0x0800f738
 8002c08:	20000730 	.word	0x20000730
 8002c0c:	20000734 	.word	0x20000734
 8002c10:	0800f774 	.word	0x0800f774
 8002c14:	0800f7ac 	.word	0x0800f7ac
 8002c18:	0800f7e4 	.word	0x0800f7e4
 8002c1c:	20000714 	.word	0x20000714
			shouldPrint = 0;
 8002c20:	4b1f      	ldr	r3, [pc, #124]	; (8002ca0 <readData+0xb10>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
			selectedSensor = 0;
 8002c26:	4b1f      	ldr	r3, [pc, #124]	; (8002ca4 <readData+0xb14>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

			iterT = 0;
 8002c2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <readData+0xb18>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
			iterH = 0;
 8002c32:	4b1e      	ldr	r3, [pc, #120]	; (8002cac <readData+0xb1c>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
			iterP = 0;
 8002c38:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <readData+0xb20>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
			iterA = 0;
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <readData+0xb24>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
			iterG = 0;
 8002c44:	4b1c      	ldr	r3, [pc, #112]	; (8002cb8 <readData+0xb28>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
			iterM = 0;
 8002c4a:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <readData+0xb2c>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

			if (BSP_QSPI_Erase_Block(0x20) == QSPI_OK) {
 8002c50:	2020      	movs	r0, #32
 8002c52:	f000 ff9b 	bl	8003b8c <BSP_QSPI_Erase_Block>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d119      	bne.n	8002c90 <readData+0xb00>
					memset(buffer, 0, sizeof(buffer));
 8002c5c:	f107 030c 	add.w	r3, r7, #12
 8002c60:	2264      	movs	r2, #100	; 0x64
 8002c62:	2100      	movs	r1, #0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f00a fa2f 	bl	800d0c8 <memset>
					sprintf(buffer, "Erased memory! \r\n");
 8002c6a:	f107 030c 	add.w	r3, r7, #12
 8002c6e:	4914      	ldr	r1, [pc, #80]	; (8002cc0 <readData+0xb30>)
 8002c70:	4618      	mov	r0, r3
 8002c72:	f00a f959 	bl	800cf28 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 300000);
 8002c76:	f107 030c 	add.w	r3, r7, #12
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fb10 	bl	80002a0 <strlen>
 8002c80:	4603      	mov	r3, r0
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	f107 010c 	add.w	r1, r7, #12
 8002c88:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <readData+0xb34>)
 8002c8a:	480f      	ldr	r0, [pc, #60]	; (8002cc8 <readData+0xb38>)
 8002c8c:	f006 fa76 	bl	800917c <HAL_UART_Transmit>
			}


			osMutexRelease(mutex);
 8002c90:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <readData+0xb3c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f007 fa11 	bl	800a0bc <osMutexRelease>
		osDelay(200);
 8002c9a:	f7ff ba7e 	b.w	800219a <readData+0xa>
 8002c9e:	bf00      	nop
 8002ca0:	20000654 	.word	0x20000654
 8002ca4:	20000658 	.word	0x20000658
 8002ca8:	2000065c 	.word	0x2000065c
 8002cac:	20000660 	.word	0x20000660
 8002cb0:	20000664 	.word	0x20000664
 8002cb4:	20000668 	.word	0x20000668
 8002cb8:	2000066c 	.word	0x2000066c
 8002cbc:	20000670 	.word	0x20000670
 8002cc0:	0800f358 	.word	0x0800f358
 8002cc4:	000493e0 	.word	0x000493e0
 8002cc8:	200005b0 	.word	0x200005b0
 8002ccc:	20000650 	.word	0x20000650

08002cd0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d101      	bne.n	8002ce6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002ce2:	f001 ffff 	bl	8004ce4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40001000 	.word	0x40001000

08002cf4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b09a      	sub	sp, #104	; 0x68
 8002cf8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cfa:	b672      	cpsid	i
}
 8002cfc:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	uint8_t buffer[100];

	memset(buffer, 0, sizeof(buffer));
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	2264      	movs	r2, #100	; 0x64
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f00a f9df 	bl	800d0c8 <memset>
	sprintf(buffer, "CRITICAL ERROR");
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	4908      	ldr	r1, [pc, #32]	; (8002d30 <Error_Handler+0x3c>)
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f00a f90a 	bl	800cf28 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen((char*) buffer),
 8002d14:	1d3b      	adds	r3, r7, #4
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fd fac2 	bl	80002a0 <strlen>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	1d39      	adds	r1, r7, #4
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d26:	4803      	ldr	r0, [pc, #12]	; (8002d34 <Error_Handler+0x40>)
 8002d28:	f006 fa28 	bl	800917c <HAL_UART_Transmit>
	HAL_MAX_DELAY);

	while (1) {
 8002d2c:	e7fe      	b.n	8002d2c <Error_Handler+0x38>
 8002d2e:	bf00      	nop
 8002d30:	0800f808 	.word	0x0800f808
 8002d34:	200005b0 	.word	0x200005b0

08002d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <HAL_MspInit+0x4c>)
 8002d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d42:	4a10      	ldr	r2, [pc, #64]	; (8002d84 <HAL_MspInit+0x4c>)
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	6613      	str	r3, [r2, #96]	; 0x60
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <HAL_MspInit+0x4c>)
 8002d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	607b      	str	r3, [r7, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d56:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_MspInit+0x4c>)
 8002d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <HAL_MspInit+0x4c>)
 8002d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d60:	6593      	str	r3, [r2, #88]	; 0x58
 8002d62:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <HAL_MspInit+0x4c>)
 8002d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	210f      	movs	r1, #15
 8002d72:	f06f 0001 	mvn.w	r0, #1
 8002d76:	f002 f88d 	bl	8004e94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000

08002d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b0ae      	sub	sp, #184	; 0xb8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002da0:	f107 0310 	add.w	r3, r7, #16
 8002da4:	2294      	movs	r2, #148	; 0x94
 8002da6:	2100      	movs	r1, #0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f00a f98d 	bl	800d0c8 <memset>
  if(hi2c->Instance==I2C2)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a21      	ldr	r2, [pc, #132]	; (8002e38 <HAL_I2C_MspInit+0xb0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d13b      	bne.n	8002e30 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002db8:	2380      	movs	r3, #128	; 0x80
 8002dba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dc0:	f107 0310 	add.w	r3, r7, #16
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f005 f9bd 	bl	8008144 <HAL_RCCEx_PeriphCLKConfig>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002dd0:	f7ff ff90 	bl	8002cf4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd4:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <HAL_I2C_MspInit+0xb4>)
 8002dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd8:	4a18      	ldr	r2, [pc, #96]	; (8002e3c <HAL_I2C_MspInit+0xb4>)
 8002dda:	f043 0302 	orr.w	r3, r3, #2
 8002dde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002de0:	4b16      	ldr	r3, [pc, #88]	; (8002e3c <HAL_I2C_MspInit+0xb4>)
 8002de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002dec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002df0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002df4:	2312      	movs	r3, #18
 8002df6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e00:	2303      	movs	r3, #3
 8002e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e06:	2304      	movs	r3, #4
 8002e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e10:	4619      	mov	r1, r3
 8002e12:	480b      	ldr	r0, [pc, #44]	; (8002e40 <HAL_I2C_MspInit+0xb8>)
 8002e14:	f002 f868 	bl	8004ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e18:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <HAL_I2C_MspInit+0xb4>)
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	4a07      	ldr	r2, [pc, #28]	; (8002e3c <HAL_I2C_MspInit+0xb4>)
 8002e1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e22:	6593      	str	r3, [r2, #88]	; 0x58
 8002e24:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <HAL_I2C_MspInit+0xb4>)
 8002e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002e30:	bf00      	nop
 8002e32:	37b8      	adds	r7, #184	; 0xb8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40005800 	.word	0x40005800
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	48000400 	.word	0x48000400

08002e44 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a0b      	ldr	r2, [pc, #44]	; (8002e80 <HAL_I2C_MspDeInit+0x3c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d10f      	bne.n	8002e76 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002e56:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_I2C_MspDeInit+0x40>)
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <HAL_I2C_MspDeInit+0x40>)
 8002e5c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002e60:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002e62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e66:	4808      	ldr	r0, [pc, #32]	; (8002e88 <HAL_I2C_MspDeInit+0x44>)
 8002e68:	f002 f9d0 	bl	800520c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002e6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e70:	4805      	ldr	r0, [pc, #20]	; (8002e88 <HAL_I2C_MspDeInit+0x44>)
 8002e72:	f002 f9cb 	bl	800520c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40005800 	.word	0x40005800
 8002e84:	40021000 	.word	0x40021000
 8002e88:	48000400 	.word	0x48000400

08002e8c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b0b0      	sub	sp, #192	; 0xc0
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e94:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ea4:	f107 0318 	add.w	r3, r7, #24
 8002ea8:	2294      	movs	r2, #148	; 0x94
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f00a f90b 	bl	800d0c8 <memset>
  if(hospi->Instance==OCTOSPI1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a28      	ldr	r2, [pc, #160]	; (8002f58 <HAL_OSPI_MspInit+0xcc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d149      	bne.n	8002f50 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002ebc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ec0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ec8:	f107 0318 	add.w	r3, r7, #24
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f005 f939 	bl	8008144 <HAL_RCCEx_PeriphCLKConfig>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8002ed8:	f7ff ff0c 	bl	8002cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8002edc:	4b1f      	ldr	r3, [pc, #124]	; (8002f5c <HAL_OSPI_MspInit+0xd0>)
 8002ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee0:	4a1e      	ldr	r2, [pc, #120]	; (8002f5c <HAL_OSPI_MspInit+0xd0>)
 8002ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ee6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ee8:	4b1c      	ldr	r3, [pc, #112]	; (8002f5c <HAL_OSPI_MspInit+0xd0>)
 8002eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_OSPI_MspInit+0xd0>)
 8002ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef8:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <HAL_OSPI_MspInit+0xd0>)
 8002efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002efe:	6513      	str	r3, [r2, #80]	; 0x50
 8002f00:	4b16      	ldr	r3, [pc, #88]	; (8002f5c <HAL_OSPI_MspInit+0xd0>)
 8002f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f0c:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <HAL_OSPI_MspInit+0xd0>)
 8002f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f10:	4a12      	ldr	r2, [pc, #72]	; (8002f5c <HAL_OSPI_MspInit+0xd0>)
 8002f12:	f043 0310 	orr.w	r3, r3, #16
 8002f16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f18:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <HAL_OSPI_MspInit+0xd0>)
 8002f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002f24:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002f28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002f3e:	230a      	movs	r3, #10
 8002f40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f44:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4805      	ldr	r0, [pc, #20]	; (8002f60 <HAL_OSPI_MspInit+0xd4>)
 8002f4c:	f001 ffcc 	bl	8004ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8002f50:	bf00      	nop
 8002f52:	37c0      	adds	r7, #192	; 0xc0
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	a0001000 	.word	0xa0001000
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	48001000 	.word	0x48001000

08002f64 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0b      	ldr	r2, [pc, #44]	; (8002fa0 <HAL_OSPI_MspDeInit+0x3c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d110      	bne.n	8002f98 <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 8002f76:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_OSPI_MspDeInit+0x40>)
 8002f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <HAL_OSPI_MspDeInit+0x40>)
 8002f7c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f80:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <HAL_OSPI_MspDeInit+0x40>)
 8002f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f86:	4a07      	ldr	r2, [pc, #28]	; (8002fa4 <HAL_OSPI_MspDeInit+0x40>)
 8002f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f8c:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002f8e:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8002f92:	4805      	ldr	r0, [pc, #20]	; (8002fa8 <HAL_OSPI_MspDeInit+0x44>)
 8002f94:	f002 f93a 	bl	800520c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8002f98:	bf00      	nop
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	a0001000 	.word	0xa0001000
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	48001000 	.word	0x48001000

08002fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b0ae      	sub	sp, #184	; 0xb8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	60da      	str	r2, [r3, #12]
 8002fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fc4:	f107 0310 	add.w	r3, r7, #16
 8002fc8:	2294      	movs	r2, #148	; 0x94
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f00a f87b 	bl	800d0c8 <memset>
  if(huart->Instance==USART1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a21      	ldr	r2, [pc, #132]	; (800305c <HAL_UART_MspInit+0xb0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d13a      	bne.n	8003052 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fe4:	f107 0310 	add.w	r3, r7, #16
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f005 f8ab 	bl	8008144 <HAL_RCCEx_PeriphCLKConfig>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ff4:	f7ff fe7e 	bl	8002cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ff8:	4b19      	ldr	r3, [pc, #100]	; (8003060 <HAL_UART_MspInit+0xb4>)
 8002ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffc:	4a18      	ldr	r2, [pc, #96]	; (8003060 <HAL_UART_MspInit+0xb4>)
 8002ffe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003002:	6613      	str	r3, [r2, #96]	; 0x60
 8003004:	4b16      	ldr	r3, [pc, #88]	; (8003060 <HAL_UART_MspInit+0xb4>)
 8003006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003010:	4b13      	ldr	r3, [pc, #76]	; (8003060 <HAL_UART_MspInit+0xb4>)
 8003012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003014:	4a12      	ldr	r2, [pc, #72]	; (8003060 <HAL_UART_MspInit+0xb4>)
 8003016:	f043 0302 	orr.w	r3, r3, #2
 800301a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800301c:	4b10      	ldr	r3, [pc, #64]	; (8003060 <HAL_UART_MspInit+0xb4>)
 800301e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003028:	23c0      	movs	r3, #192	; 0xc0
 800302a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302e:	2302      	movs	r3, #2
 8003030:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800303a:	2303      	movs	r3, #3
 800303c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003040:	2307      	movs	r3, #7
 8003042:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003046:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800304a:	4619      	mov	r1, r3
 800304c:	4805      	ldr	r0, [pc, #20]	; (8003064 <HAL_UART_MspInit+0xb8>)
 800304e:	f001 ff4b 	bl	8004ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003052:	bf00      	nop
 8003054:	37b8      	adds	r7, #184	; 0xb8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40013800 	.word	0x40013800
 8003060:	40021000 	.word	0x40021000
 8003064:	48000400 	.word	0x48000400

08003068 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08e      	sub	sp, #56	; 0x38
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003076:	4b34      	ldr	r3, [pc, #208]	; (8003148 <HAL_InitTick+0xe0>)
 8003078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307a:	4a33      	ldr	r2, [pc, #204]	; (8003148 <HAL_InitTick+0xe0>)
 800307c:	f043 0310 	orr.w	r3, r3, #16
 8003080:	6593      	str	r3, [r2, #88]	; 0x58
 8003082:	4b31      	ldr	r3, [pc, #196]	; (8003148 <HAL_InitTick+0xe0>)
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800308e:	f107 0210 	add.w	r2, r7, #16
 8003092:	f107 0314 	add.w	r3, r7, #20
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f004 ff61 	bl	8007f60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80030a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d103      	bne.n	80030b0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80030a8:	f004 ff2e 	bl	8007f08 <HAL_RCC_GetPCLK1Freq>
 80030ac:	6378      	str	r0, [r7, #52]	; 0x34
 80030ae:	e004      	b.n	80030ba <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80030b0:	f004 ff2a 	bl	8007f08 <HAL_RCC_GetPCLK1Freq>
 80030b4:	4603      	mov	r3, r0
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030bc:	4a23      	ldr	r2, [pc, #140]	; (800314c <HAL_InitTick+0xe4>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	0c9b      	lsrs	r3, r3, #18
 80030c4:	3b01      	subs	r3, #1
 80030c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80030c8:	4b21      	ldr	r3, [pc, #132]	; (8003150 <HAL_InitTick+0xe8>)
 80030ca:	4a22      	ldr	r2, [pc, #136]	; (8003154 <HAL_InitTick+0xec>)
 80030cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80030ce:	4b20      	ldr	r3, [pc, #128]	; (8003150 <HAL_InitTick+0xe8>)
 80030d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030d4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80030d6:	4a1e      	ldr	r2, [pc, #120]	; (8003150 <HAL_InitTick+0xe8>)
 80030d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030da:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80030dc:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <HAL_InitTick+0xe8>)
 80030de:	2200      	movs	r2, #0
 80030e0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030e2:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <HAL_InitTick+0xe8>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030e8:	4b19      	ldr	r3, [pc, #100]	; (8003150 <HAL_InitTick+0xe8>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80030ee:	4818      	ldr	r0, [pc, #96]	; (8003150 <HAL_InitTick+0xe8>)
 80030f0:	f005 fd40 	bl	8008b74 <HAL_TIM_Base_Init>
 80030f4:	4603      	mov	r3, r0
 80030f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80030fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d11b      	bne.n	800313a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003102:	4813      	ldr	r0, [pc, #76]	; (8003150 <HAL_InitTick+0xe8>)
 8003104:	f005 fd98 	bl	8008c38 <HAL_TIM_Base_Start_IT>
 8003108:	4603      	mov	r3, r0
 800310a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800310e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003112:	2b00      	cmp	r3, #0
 8003114:	d111      	bne.n	800313a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003116:	2036      	movs	r0, #54	; 0x36
 8003118:	f001 fed8 	bl	8004ecc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b0f      	cmp	r3, #15
 8003120:	d808      	bhi.n	8003134 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003122:	2200      	movs	r2, #0
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	2036      	movs	r0, #54	; 0x36
 8003128:	f001 feb4 	bl	8004e94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800312c:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <HAL_InitTick+0xf0>)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	e002      	b.n	800313a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800313a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800313e:	4618      	mov	r0, r3
 8003140:	3738      	adds	r7, #56	; 0x38
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000
 800314c:	431bde83 	.word	0x431bde83
 8003150:	20000748 	.word	0x20000748
 8003154:	40001000 	.word	0x40001000
 8003158:	200000c8 	.word	0x200000c8

0800315c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003160:	e7fe      	b.n	8003160 <NMI_Handler+0x4>

08003162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003162:	b480      	push	{r7}
 8003164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003166:	e7fe      	b.n	8003166 <HardFault_Handler+0x4>

08003168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800316c:	e7fe      	b.n	800316c <MemManage_Handler+0x4>

0800316e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800316e:	b480      	push	{r7}
 8003170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003172:	e7fe      	b.n	8003172 <BusFault_Handler+0x4>

08003174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003178:	e7fe      	b.n	8003178 <UsageFault_Handler+0x4>

0800317a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800317a:	b480      	push	{r7}
 800317c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800318c:	4802      	ldr	r0, [pc, #8]	; (8003198 <TIM6_DAC_IRQHandler+0x10>)
 800318e:	f005 fdc3 	bl	8008d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000748 	.word	0x20000748

0800319c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return 1;
 80031a0:	2301      	movs	r3, #1
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <_kill>:

int _kill(int pid, int sig)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031b6:	f009 ff93 	bl	800d0e0 <__errno>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2216      	movs	r2, #22
 80031be:	601a      	str	r2, [r3, #0]
  return -1;
 80031c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <_exit>:

void _exit (int status)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7ff ffe7 	bl	80031ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80031de:	e7fe      	b.n	80031de <_exit+0x12>

080031e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	e00a      	b.n	8003208 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031f2:	f3af 8000 	nop.w
 80031f6:	4601      	mov	r1, r0
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	60ba      	str	r2, [r7, #8]
 80031fe:	b2ca      	uxtb	r2, r1
 8003200:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	3301      	adds	r3, #1
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	429a      	cmp	r2, r3
 800320e:	dbf0      	blt.n	80031f2 <_read+0x12>
  }

  return len;
 8003210:	687b      	ldr	r3, [r7, #4]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b086      	sub	sp, #24
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	e009      	b.n	8003240 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	60ba      	str	r2, [r7, #8]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	3301      	adds	r3, #1
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	dbf1      	blt.n	800322c <_write+0x12>
  }
  return len;
 8003248:	687b      	ldr	r3, [r7, #4]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <_close>:

int _close(int file)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800325a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800327a:	605a      	str	r2, [r3, #4]
  return 0;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <_isatty>:

int _isatty(int file)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003292:	2301      	movs	r3, #1
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032c4:	4a14      	ldr	r2, [pc, #80]	; (8003318 <_sbrk+0x5c>)
 80032c6:	4b15      	ldr	r3, [pc, #84]	; (800331c <_sbrk+0x60>)
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032d0:	4b13      	ldr	r3, [pc, #76]	; (8003320 <_sbrk+0x64>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d102      	bne.n	80032de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032d8:	4b11      	ldr	r3, [pc, #68]	; (8003320 <_sbrk+0x64>)
 80032da:	4a12      	ldr	r2, [pc, #72]	; (8003324 <_sbrk+0x68>)
 80032dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032de:	4b10      	ldr	r3, [pc, #64]	; (8003320 <_sbrk+0x64>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d207      	bcs.n	80032fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032ec:	f009 fef8 	bl	800d0e0 <__errno>
 80032f0:	4603      	mov	r3, r0
 80032f2:	220c      	movs	r2, #12
 80032f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032fa:	e009      	b.n	8003310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032fc:	4b08      	ldr	r3, [pc, #32]	; (8003320 <_sbrk+0x64>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003302:	4b07      	ldr	r3, [pc, #28]	; (8003320 <_sbrk+0x64>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4413      	add	r3, r2
 800330a:	4a05      	ldr	r2, [pc, #20]	; (8003320 <_sbrk+0x64>)
 800330c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800330e:	68fb      	ldr	r3, [r7, #12]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	200a0000 	.word	0x200a0000
 800331c:	00000400 	.word	0x00000400
 8003320:	20000794 	.word	0x20000794
 8003324:	200016b0 	.word	0x200016b0

08003328 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800332c:	4b06      	ldr	r3, [pc, #24]	; (8003348 <SystemInit+0x20>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	4a05      	ldr	r2, [pc, #20]	; (8003348 <SystemInit+0x20>)
 8003334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800333c:	bf00      	nop
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800334c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003384 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003350:	f7ff ffea 	bl	8003328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003354:	480c      	ldr	r0, [pc, #48]	; (8003388 <LoopForever+0x6>)
  ldr r1, =_edata
 8003356:	490d      	ldr	r1, [pc, #52]	; (800338c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003358:	4a0d      	ldr	r2, [pc, #52]	; (8003390 <LoopForever+0xe>)
  movs r3, #0
 800335a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800335c:	e002      	b.n	8003364 <LoopCopyDataInit>

0800335e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800335e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003362:	3304      	adds	r3, #4

08003364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003368:	d3f9      	bcc.n	800335e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800336a:	4a0a      	ldr	r2, [pc, #40]	; (8003394 <LoopForever+0x12>)
  ldr r4, =_ebss
 800336c:	4c0a      	ldr	r4, [pc, #40]	; (8003398 <LoopForever+0x16>)
  movs r3, #0
 800336e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003370:	e001      	b.n	8003376 <LoopFillZerobss>

08003372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003374:	3204      	adds	r2, #4

08003376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003378:	d3fb      	bcc.n	8003372 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800337a:	f009 feb7 	bl	800d0ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800337e:	f7fd fdc3 	bl	8000f08 <main>

08003382 <LoopForever>:

LoopForever:
    b LoopForever
 8003382:	e7fe      	b.n	8003382 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003384:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800338c:	2000029c 	.word	0x2000029c
  ldr r2, =_sidata
 8003390:	0800fc14 	.word	0x0800fc14
  ldr r2, =_sbss
 8003394:	2000029c 	.word	0x2000029c
  ldr r4, =_ebss
 8003398:	200016b0 	.word	0x200016b0

0800339c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800339c:	e7fe      	b.n	800339c <ADC1_IRQHandler>
	...

080033a0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08a      	sub	sp, #40	; 0x28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80033a8:	4b27      	ldr	r3, [pc, #156]	; (8003448 <I2Cx_MspInit+0xa8>)
 80033aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ac:	4a26      	ldr	r2, [pc, #152]	; (8003448 <I2Cx_MspInit+0xa8>)
 80033ae:	f043 0302 	orr.w	r3, r3, #2
 80033b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033b4:	4b24      	ldr	r3, [pc, #144]	; (8003448 <I2Cx_MspInit+0xa8>)
 80033b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80033c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80033c4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80033c6:	2312      	movs	r3, #18
 80033c8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80033ca:	2301      	movs	r3, #1
 80033cc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ce:	2303      	movs	r3, #3
 80033d0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80033d2:	2304      	movs	r3, #4
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80033d6:	f107 0314 	add.w	r3, r7, #20
 80033da:	4619      	mov	r1, r3
 80033dc:	481b      	ldr	r0, [pc, #108]	; (800344c <I2Cx_MspInit+0xac>)
 80033de:	f001 fd83 	bl	8004ee8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80033e2:	f107 0314 	add.w	r3, r7, #20
 80033e6:	4619      	mov	r1, r3
 80033e8:	4818      	ldr	r0, [pc, #96]	; (800344c <I2Cx_MspInit+0xac>)
 80033ea:	f001 fd7d 	bl	8004ee8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80033ee:	4b16      	ldr	r3, [pc, #88]	; (8003448 <I2Cx_MspInit+0xa8>)
 80033f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f2:	4a15      	ldr	r2, [pc, #84]	; (8003448 <I2Cx_MspInit+0xa8>)
 80033f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033f8:	6593      	str	r3, [r2, #88]	; 0x58
 80033fa:	4b13      	ldr	r3, [pc, #76]	; (8003448 <I2Cx_MspInit+0xa8>)
 80033fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003406:	4b10      	ldr	r3, [pc, #64]	; (8003448 <I2Cx_MspInit+0xa8>)
 8003408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340a:	4a0f      	ldr	r2, [pc, #60]	; (8003448 <I2Cx_MspInit+0xa8>)
 800340c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003410:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8003412:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <I2Cx_MspInit+0xa8>)
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	4a0c      	ldr	r2, [pc, #48]	; (8003448 <I2Cx_MspInit+0xa8>)
 8003418:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800341c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800341e:	2200      	movs	r2, #0
 8003420:	210f      	movs	r1, #15
 8003422:	2021      	movs	r0, #33	; 0x21
 8003424:	f001 fd36 	bl	8004e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003428:	2021      	movs	r0, #33	; 0x21
 800342a:	f001 fd4f 	bl	8004ecc <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800342e:	2200      	movs	r2, #0
 8003430:	210f      	movs	r1, #15
 8003432:	2022      	movs	r0, #34	; 0x22
 8003434:	f001 fd2e 	bl	8004e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003438:	2022      	movs	r0, #34	; 0x22
 800343a:	f001 fd47 	bl	8004ecc <HAL_NVIC_EnableIRQ>
}
 800343e:	bf00      	nop
 8003440:	3728      	adds	r7, #40	; 0x28
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000
 800344c:	48000400 	.word	0x48000400

08003450 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a12      	ldr	r2, [pc, #72]	; (80034a4 <I2Cx_Init+0x54>)
 800345c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a11      	ldr	r2, [pc, #68]	; (80034a8 <I2Cx_Init+0x58>)
 8003462:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff ff89 	bl	80033a0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f001 ffc6 	bl	8005420 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003494:	2100      	movs	r1, #0
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f002 fd72 	bl	8005f80 <HAL_I2CEx_ConfigAnalogFilter>
}
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40005800 	.word	0x40005800
 80034a8:	00702681 	.word	0x00702681

080034ac <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08a      	sub	sp, #40	; 0x28
 80034b0:	af04      	add	r7, sp, #16
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	4608      	mov	r0, r1
 80034b6:	4611      	mov	r1, r2
 80034b8:	461a      	mov	r2, r3
 80034ba:	4603      	mov	r3, r0
 80034bc:	72fb      	strb	r3, [r7, #11]
 80034be:	460b      	mov	r3, r1
 80034c0:	813b      	strh	r3, [r7, #8]
 80034c2:	4613      	mov	r3, r2
 80034c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80034ca:	7afb      	ldrb	r3, [r7, #11]
 80034cc:	b299      	uxth	r1, r3
 80034ce:	88f8      	ldrh	r0, [r7, #6]
 80034d0:	893a      	ldrh	r2, [r7, #8]
 80034d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034d6:	9302      	str	r3, [sp, #8]
 80034d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	4603      	mov	r3, r0
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f002 f97a 	bl	80057dc <HAL_I2C_Mem_Read>
 80034e8:	4603      	mov	r3, r0
 80034ea:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80034ec:	7dfb      	ldrb	r3, [r7, #23]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d004      	beq.n	80034fc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80034f2:	7afb      	ldrb	r3, [r7, #11]
 80034f4:	4619      	mov	r1, r3
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f832 	bl	8003560 <I2Cx_Error>
  }
  return status;
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b08a      	sub	sp, #40	; 0x28
 800350a:	af04      	add	r7, sp, #16
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	4608      	mov	r0, r1
 8003510:	4611      	mov	r1, r2
 8003512:	461a      	mov	r2, r3
 8003514:	4603      	mov	r3, r0
 8003516:	72fb      	strb	r3, [r7, #11]
 8003518:	460b      	mov	r3, r1
 800351a:	813b      	strh	r3, [r7, #8]
 800351c:	4613      	mov	r3, r2
 800351e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003524:	7afb      	ldrb	r3, [r7, #11]
 8003526:	b299      	uxth	r1, r3
 8003528:	88f8      	ldrh	r0, [r7, #6]
 800352a:	893a      	ldrh	r2, [r7, #8]
 800352c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003530:	9302      	str	r3, [sp, #8]
 8003532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003534:	9301      	str	r3, [sp, #4]
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	4603      	mov	r3, r0
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f002 f839 	bl	80055b4 <HAL_I2C_Mem_Write>
 8003542:	4603      	mov	r3, r0
 8003544:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003546:	7dfb      	ldrb	r3, [r7, #23]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d004      	beq.n	8003556 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800354c:	7afb      	ldrb	r3, [r7, #11]
 800354e:	4619      	mov	r1, r3
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f805 	bl	8003560 <I2Cx_Error>
  }
  return status;
 8003556:	7dfb      	ldrb	r3, [r7, #23]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f001 fff2 	bl	8005556 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff ff6c 	bl	8003450 <I2Cx_Init>
}
 8003578:	bf00      	nop
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003584:	4802      	ldr	r0, [pc, #8]	; (8003590 <SENSOR_IO_Init+0x10>)
 8003586:	f7ff ff63 	bl	8003450 <I2Cx_Init>
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20000798 	.word	0x20000798

08003594 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af02      	add	r7, sp, #8
 800359a:	4603      	mov	r3, r0
 800359c:	71fb      	strb	r3, [r7, #7]
 800359e:	460b      	mov	r3, r1
 80035a0:	71bb      	strb	r3, [r7, #6]
 80035a2:	4613      	mov	r3, r2
 80035a4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80035a6:	79bb      	ldrb	r3, [r7, #6]
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	79f9      	ldrb	r1, [r7, #7]
 80035ac:	2301      	movs	r3, #1
 80035ae:	9301      	str	r3, [sp, #4]
 80035b0:	1d7b      	adds	r3, r7, #5
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	2301      	movs	r3, #1
 80035b6:	4803      	ldr	r0, [pc, #12]	; (80035c4 <SENSOR_IO_Write+0x30>)
 80035b8:	f7ff ffa5 	bl	8003506 <I2Cx_WriteMultiple>
}
 80035bc:	bf00      	nop
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	20000798 	.word	0x20000798

080035c8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	4603      	mov	r3, r0
 80035d0:	460a      	mov	r2, r1
 80035d2:	71fb      	strb	r3, [r7, #7]
 80035d4:	4613      	mov	r3, r2
 80035d6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80035dc:	79bb      	ldrb	r3, [r7, #6]
 80035de:	b29a      	uxth	r2, r3
 80035e0:	79f9      	ldrb	r1, [r7, #7]
 80035e2:	2301      	movs	r3, #1
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	f107 030f 	add.w	r3, r7, #15
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	2301      	movs	r3, #1
 80035ee:	4804      	ldr	r0, [pc, #16]	; (8003600 <SENSOR_IO_Read+0x38>)
 80035f0:	f7ff ff5c 	bl	80034ac <I2Cx_ReadMultiple>

  return read_value;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000798 	.word	0x20000798

08003604 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af02      	add	r7, sp, #8
 800360a:	603a      	str	r2, [r7, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	4603      	mov	r3, r0
 8003610:	71fb      	strb	r3, [r7, #7]
 8003612:	460b      	mov	r3, r1
 8003614:	71bb      	strb	r3, [r7, #6]
 8003616:	4613      	mov	r3, r2
 8003618:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800361a:	79bb      	ldrb	r3, [r7, #6]
 800361c:	b29a      	uxth	r2, r3
 800361e:	79f9      	ldrb	r1, [r7, #7]
 8003620:	88bb      	ldrh	r3, [r7, #4]
 8003622:	9301      	str	r3, [sp, #4]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	2301      	movs	r3, #1
 800362a:	4804      	ldr	r0, [pc, #16]	; (800363c <SENSOR_IO_ReadMultiple+0x38>)
 800362c:	f7ff ff3e 	bl	80034ac <I2Cx_ReadMultiple>
 8003630:	4603      	mov	r3, r0
 8003632:	b29b      	uxth	r3, r3
}
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20000798 	.word	0x20000798

08003640 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800364a:	2300      	movs	r3, #0
 800364c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800364e:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <BSP_ACCELERO_Init+0x74>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	4798      	blx	r3
 8003654:	4603      	mov	r3, r0
 8003656:	2b6a      	cmp	r3, #106	; 0x6a
 8003658:	d002      	beq.n	8003660 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	73fb      	strb	r3, [r7, #15]
 800365e:	e024      	b.n	80036aa <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8003660:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <BSP_ACCELERO_Init+0x78>)
 8003662:	4a14      	ldr	r2, [pc, #80]	; (80036b4 <BSP_ACCELERO_Init+0x74>)
 8003664:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8003666:	2330      	movs	r3, #48	; 0x30
 8003668:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800366a:	2300      	movs	r3, #0
 800366c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800366e:	2300      	movs	r3, #0
 8003670:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8003672:	2340      	movs	r3, #64	; 0x40
 8003674:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800367e:	797a      	ldrb	r2, [r7, #5]
 8003680:	7abb      	ldrb	r3, [r7, #10]
 8003682:	4313      	orrs	r3, r2
 8003684:	b2db      	uxtb	r3, r3
 8003686:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003688:	7a3b      	ldrb	r3, [r7, #8]
 800368a:	f043 0304 	orr.w	r3, r3, #4
 800368e:	b2db      	uxtb	r3, r3
 8003690:	021b      	lsls	r3, r3, #8
 8003692:	b21a      	sxth	r2, r3
 8003694:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003698:	4313      	orrs	r3, r2
 800369a:	b21b      	sxth	r3, r3
 800369c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800369e:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <BSP_ACCELERO_Init+0x78>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	89ba      	ldrh	r2, [r7, #12]
 80036a6:	4610      	mov	r0, r2
 80036a8:	4798      	blx	r3
  }  

  return ret;
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20000060 	.word	0x20000060
 80036b8:	200007ec 	.word	0x200007ec

080036bc <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80036c4:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d009      	beq.n	80036e0 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80036cc:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d004      	beq.n	80036e0 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80036d6:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	4798      	blx	r3
    }
  }
}
 80036e0:	bf00      	nop
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	200007ec 	.word	0x200007ec

080036ec <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80036f6:	2300      	movs	r3, #0
 80036f8:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80036fa:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <BSP_GYRO_Init+0x7c>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	4798      	blx	r3
 8003700:	4603      	mov	r3, r0
 8003702:	2b6a      	cmp	r3, #106	; 0x6a
 8003704:	d002      	beq.n	800370c <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
 800370a:	e028      	b.n	800375e <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800370c:	4b17      	ldr	r3, [pc, #92]	; (800376c <BSP_GYRO_Init+0x80>)
 800370e:	4a16      	ldr	r2, [pc, #88]	; (8003768 <BSP_GYRO_Init+0x7c>)
 8003710:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8003712:	2300      	movs	r3, #0
 8003714:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8003716:	2330      	movs	r3, #48	; 0x30
 8003718:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800371a:	2300      	movs	r3, #0
 800371c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8003722:	2340      	movs	r3, #64	; 0x40
 8003724:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800372a:	230c      	movs	r3, #12
 800372c:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800372e:	7aba      	ldrb	r2, [r7, #10]
 8003730:	797b      	ldrb	r3, [r7, #5]
 8003732:	4313      	orrs	r3, r2
 8003734:	b2db      	uxtb	r3, r3
 8003736:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003738:	7a3b      	ldrb	r3, [r7, #8]
 800373a:	f043 0304 	orr.w	r3, r3, #4
 800373e:	b2db      	uxtb	r3, r3
 8003740:	021b      	lsls	r3, r3, #8
 8003742:	b21a      	sxth	r2, r3
 8003744:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	b21b      	sxth	r3, r3
 800374c:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800374e:	4b07      	ldr	r3, [pc, #28]	; (800376c <BSP_GYRO_Init+0x80>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	89ba      	ldrh	r2, [r7, #12]
 8003756:	4610      	mov	r0, r2
 8003758:	4798      	blx	r3
    
    ret = GYRO_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800375e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	20000094 	.word	0x20000094
 800376c:	200007f0 	.word	0x200007f0

08003770 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8003778:	4b08      	ldr	r3, [pc, #32]	; (800379c <BSP_GYRO_GetXYZ+0x2c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d009      	beq.n	8003794 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <BSP_GYRO_GetXYZ+0x2c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	2b00      	cmp	r3, #0
 8003788:	d004      	beq.n	8003794 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800378a:	4b04      	ldr	r3, [pc, #16]	; (800379c <BSP_GYRO_GetXYZ+0x2c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	4798      	blx	r3
    }
  }
}
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	200007f0 	.word	0x200007f0

080037a0 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80037a6:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <BSP_HSENSOR_Init+0x38>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	20be      	movs	r0, #190	; 0xbe
 80037ac:	4798      	blx	r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	2bbc      	cmp	r3, #188	; 0xbc
 80037b2:	d002      	beq.n	80037ba <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	607b      	str	r3, [r7, #4]
 80037b8:	e009      	b.n	80037ce <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80037ba:	4b08      	ldr	r3, [pc, #32]	; (80037dc <BSP_HSENSOR_Init+0x3c>)
 80037bc:	4a06      	ldr	r2, [pc, #24]	; (80037d8 <BSP_HSENSOR_Init+0x38>)
 80037be:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <BSP_HSENSOR_Init+0x3c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	20be      	movs	r0, #190	; 0xbe
 80037c8:	4798      	blx	r3
    ret = HSENSOR_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80037ce:	687b      	ldr	r3, [r7, #4]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20000004 	.word	0x20000004
 80037dc:	200007f4 	.word	0x200007f4

080037e0 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80037e4:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <BSP_HSENSOR_ReadHumidity+0x18>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	20be      	movs	r0, #190	; 0xbe
 80037ec:	4798      	blx	r3
 80037ee:	eef0 7a40 	vmov.f32	s15, s0
}
 80037f2:	eeb0 0a67 	vmov.f32	s0, s15
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	200007f4 	.word	0x200007f4

080037fc <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8003806:	4b11      	ldr	r3, [pc, #68]	; (800384c <BSP_MAGNETO_Init+0x50>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	4798      	blx	r3
 800380c:	4603      	mov	r3, r0
 800380e:	2b3d      	cmp	r3, #61	; 0x3d
 8003810:	d002      	beq.n	8003818 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	71fb      	strb	r3, [r7, #7]
 8003816:	e013      	b.n	8003840 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8003818:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <BSP_MAGNETO_Init+0x54>)
 800381a:	4a0c      	ldr	r2, [pc, #48]	; (800384c <BSP_MAGNETO_Init+0x50>)
 800381c:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800381e:	2358      	movs	r3, #88	; 0x58
 8003820:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8003822:	2300      	movs	r3, #0
 8003824:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8003826:	2300      	movs	r3, #0
 8003828:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800382a:	2308      	movs	r3, #8
 800382c:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 800382e:	2340      	movs	r3, #64	; 0x40
 8003830:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8003832:	4b07      	ldr	r3, [pc, #28]	; (8003850 <BSP_MAGNETO_Init+0x54>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	463a      	mov	r2, r7
 800383a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800383e:	4798      	blx	r3
  } 

  return ret;  
 8003840:	79fb      	ldrb	r3, [r7, #7]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000020 	.word	0x20000020
 8003850:	200007f8 	.word	0x200007f8

08003854 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 800385c:	4b08      	ldr	r3, [pc, #32]	; (8003880 <BSP_MAGNETO_GetXYZ+0x2c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d009      	beq.n	8003878 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8003864:	4b06      	ldr	r3, [pc, #24]	; (8003880 <BSP_MAGNETO_GetXYZ+0x2c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	2b00      	cmp	r3, #0
 800386c:	d004      	beq.n	8003878 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 800386e:	4b04      	ldr	r3, [pc, #16]	; (8003880 <BSP_MAGNETO_GetXYZ+0x2c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	4798      	blx	r3
    }
  }
}
 8003878:	bf00      	nop
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	200007f8 	.word	0x200007f8

08003884 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800388a:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <BSP_PSENSOR_Init+0x38>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	20ba      	movs	r0, #186	; 0xba
 8003890:	4798      	blx	r3
 8003892:	4603      	mov	r3, r0
 8003894:	2bb1      	cmp	r3, #177	; 0xb1
 8003896:	d002      	beq.n	800389e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	607b      	str	r3, [r7, #4]
 800389c:	e009      	b.n	80038b2 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800389e:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <BSP_PSENSOR_Init+0x3c>)
 80038a0:	4a06      	ldr	r2, [pc, #24]	; (80038bc <BSP_PSENSOR_Init+0x38>)
 80038a2:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <BSP_PSENSOR_Init+0x3c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	20ba      	movs	r0, #186	; 0xba
 80038ac:	4798      	blx	r3
    ret = PSENSOR_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80038b2:	687b      	ldr	r3, [r7, #4]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20000054 	.word	0x20000054
 80038c0:	200007fc 	.word	0x200007fc

080038c4 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80038c8:	4b04      	ldr	r3, [pc, #16]	; (80038dc <BSP_PSENSOR_ReadPressure+0x18>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	20ba      	movs	r0, #186	; 0xba
 80038d0:	4798      	blx	r3
 80038d2:	eef0 7a40 	vmov.f32	s15, s0
}
 80038d6:	eeb0 0a67 	vmov.f32	s0, s15
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	200007fc 	.word	0x200007fc

080038e0 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 80038e6:	4b3b      	ldr	r3, [pc, #236]	; (80039d4 <BSP_QSPI_Init+0xf4>)
 80038e8:	4a3b      	ldr	r2, [pc, #236]	; (80039d8 <BSP_QSPI_Init+0xf8>)
 80038ea:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 80038ec:	4839      	ldr	r0, [pc, #228]	; (80039d4 <BSP_QSPI_Init+0xf4>)
 80038ee:	f002 fc89 	bl	8006204 <HAL_OSPI_DeInit>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e067      	b.n	80039cc <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 80038fc:	f000 f990 	bl	8003c20 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 8003900:	4b34      	ldr	r3, [pc, #208]	; (80039d4 <BSP_QSPI_Init+0xf4>)
 8003902:	2204      	movs	r2, #4
 8003904:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 8003906:	4b33      	ldr	r3, [pc, #204]	; (80039d4 <BSP_QSPI_Init+0xf4>)
 8003908:	2200      	movs	r2, #0
 800390a:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800390c:	4b31      	ldr	r3, [pc, #196]	; (80039d4 <BSP_QSPI_Init+0xf4>)
 800390e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003912:	60da      	str	r2, [r3, #12]
 8003914:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003918:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	fa93 f3a3 	rbit	r3, r3
 8003920:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <BSP_QSPI_Init+0x50>
  {
    return 32U;
 800392c:	2320      	movs	r3, #32
 800392e:	e003      	b.n	8003938 <BSP_QSPI_Init+0x58>
  }
  return __builtin_clz(value);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 8003938:	461a      	mov	r2, r3
 800393a:	4b26      	ldr	r3, [pc, #152]	; (80039d4 <BSP_QSPI_Init+0xf4>)
 800393c:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 800393e:	4b25      	ldr	r3, [pc, #148]	; (80039d4 <BSP_QSPI_Init+0xf4>)
 8003940:	2201      	movs	r2, #1
 8003942:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 8003944:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <BSP_QSPI_Init+0xf4>)
 8003946:	2200      	movs	r2, #0
 8003948:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 800394a:	4b22      	ldr	r3, [pc, #136]	; (80039d4 <BSP_QSPI_Init+0xf4>)
 800394c:	2200      	movs	r2, #0
 800394e:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 8003950:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <BSP_QSPI_Init+0xf4>)
 8003952:	2204      	movs	r2, #4
 8003954:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8003956:	4b1f      	ldr	r3, [pc, #124]	; (80039d4 <BSP_QSPI_Init+0xf4>)
 8003958:	2200      	movs	r2, #0
 800395a:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800395c:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <BSP_QSPI_Init+0xf4>)
 800395e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003962:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 8003964:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <BSP_QSPI_Init+0xf4>)
 8003966:	2200      	movs	r2, #0
 8003968:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 800396a:	4b1a      	ldr	r3, [pc, #104]	; (80039d4 <BSP_QSPI_Init+0xf4>)
 800396c:	2200      	movs	r2, #0
 800396e:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8003970:	4818      	ldr	r0, [pc, #96]	; (80039d4 <BSP_QSPI_Init+0xf4>)
 8003972:	f002 fb9d 	bl	80060b0 <HAL_OSPI_Init>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e025      	b.n	80039cc <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 8003980:	4814      	ldr	r0, [pc, #80]	; (80039d4 <BSP_QSPI_Init+0xf4>)
 8003982:	f000 f98d 	bl	8003ca0 <QSPI_ResetMemory>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 800398c:	2304      	movs	r3, #4
 800398e:	e01d      	b.n	80039cc <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8003990:	2101      	movs	r1, #1
 8003992:	4810      	ldr	r0, [pc, #64]	; (80039d4 <BSP_QSPI_Init+0xf4>)
 8003994:	f000 fa72 	bl	8003e7c <QSPI_QuadMode>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e014      	b.n	80039cc <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 80039a2:	2101      	movs	r1, #1
 80039a4:	480b      	ldr	r0, [pc, #44]	; (80039d4 <BSP_QSPI_Init+0xf4>)
 80039a6:	f000 fb15 	bl	8003fd4 <QSPI_HighPerfMode>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e00b      	b.n	80039cc <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 80039b4:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <BSP_QSPI_Init+0xf4>)
 80039b6:	2202      	movs	r2, #2
 80039b8:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 80039ba:	4806      	ldr	r0, [pc, #24]	; (80039d4 <BSP_QSPI_Init+0xf4>)
 80039bc:	f002 fb78 	bl	80060b0 <HAL_OSPI_Init>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20000800 	.word	0x20000800
 80039d8:	a0001000 	.word	0xa0001000

080039dc <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b098      	sub	sp, #96	; 0x60
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 80039e8:	2300      	movs	r3, #0
 80039ea:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 80039f0:	23eb      	movs	r3, #235	; 0xeb
 80039f2:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 80039f4:	2301      	movs	r3, #1
 80039f6:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 80039f8:	2300      	movs	r3, #0
 80039fa:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80039fc:	2300      	movs	r3, #0
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 8003a04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 8003a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a0e:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003a10:	2300      	movs	r3, #0
 8003a12:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8003a14:	23aa      	movs	r3, #170	; 0xaa
 8003a16:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 8003a18:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 8003a26:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003a2a:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8003a34:	2304      	movs	r3, #4
 8003a36:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a40:	f107 0310 	add.w	r3, r7, #16
 8003a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a48:	4619      	mov	r1, r3
 8003a4a:	480c      	ldr	r0, [pc, #48]	; (8003a7c <BSP_QSPI_Read+0xa0>)
 8003a4c:	f002 fc01 	bl	8006252 <HAL_OSPI_Command>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e00b      	b.n	8003a72 <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5e:	68f9      	ldr	r1, [r7, #12]
 8003a60:	4806      	ldr	r0, [pc, #24]	; (8003a7c <BSP_QSPI_Read+0xa0>)
 8003a62:	f002 fcea 	bl	800643a <HAL_OSPI_Receive>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3760      	adds	r7, #96	; 0x60
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20000800 	.word	0x20000800

08003a80 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b09c      	sub	sp, #112	; 0x70
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003a94:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8003a96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d901      	bls.n	8003aa2 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4413      	add	r3, r2
 8003aac:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 8003ab6:	2338      	movs	r3, #56	; 0x38
 8003ab8:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8003aba:	2301      	movs	r3, #1
 8003abc:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 8003ac6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003aca:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8003acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ad0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 8003ada:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003ade:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8003aec:	2300      	movs	r3, #0
 8003aee:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8003af0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 8003af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af6:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8003af8:	4823      	ldr	r0, [pc, #140]	; (8003b88 <BSP_QSPI_Write+0x108>)
 8003afa:	f000 f918 	bl	8003d2e <QSPI_WriteEnable>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e03b      	b.n	8003b80 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b08:	f107 0314 	add.w	r3, r7, #20
 8003b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b10:	4619      	mov	r1, r3
 8003b12:	481d      	ldr	r0, [pc, #116]	; (8003b88 <BSP_QSPI_Write+0x108>)
 8003b14:	f002 fb9d 	bl	8006252 <HAL_OSPI_Command>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e02e      	b.n	8003b80 <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b26:	68f9      	ldr	r1, [r7, #12]
 8003b28:	4817      	ldr	r0, [pc, #92]	; (8003b88 <BSP_QSPI_Write+0x108>)
 8003b2a:	f002 fc13 	bl	8006354 <HAL_OSPI_Transmit>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e023      	b.n	8003b80 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003b38:	f241 3188 	movw	r1, #5000	; 0x1388
 8003b3c:	4812      	ldr	r0, [pc, #72]	; (8003b88 <BSP_QSPI_Write+0x108>)
 8003b3e:	f000 f952 	bl	8003de6 <QSPI_AutoPollingMemReady>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e019      	b.n	8003b80 <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8003b4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b50:	4413      	add	r3, r2
 8003b52:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b58:	4413      	add	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8003b5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b5e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003b62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d203      	bcs.n	8003b70 <BSP_QSPI_Write+0xf0>
 8003b68:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	e001      	b.n	8003b74 <BSP_QSPI_Write+0xf4>
 8003b70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b74:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 8003b76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d3b8      	bcc.n	8003af0 <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3770      	adds	r7, #112	; 0x70
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20000800 	.word	0x20000800

08003b8c <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b096      	sub	sp, #88	; 0x58
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 8003b9c:	23d8      	movs	r3, #216	; 0xd8
 8003b9e:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 8003bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8003bb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8003bd4:	4811      	ldr	r0, [pc, #68]	; (8003c1c <BSP_QSPI_Erase_Block+0x90>)
 8003bd6:	f000 f8aa 	bl	8003d2e <QSPI_WriteEnable>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e017      	b.n	8003c14 <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003be4:	f107 0308 	add.w	r3, r7, #8
 8003be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bec:	4619      	mov	r1, r3
 8003bee:	480b      	ldr	r0, [pc, #44]	; (8003c1c <BSP_QSPI_Erase_Block+0x90>)
 8003bf0:	f002 fb2f 	bl	8006252 <HAL_OSPI_Command>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e00a      	b.n	8003c14 <BSP_QSPI_Erase_Block+0x88>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8003bfe:	f640 51ac 	movw	r1, #3500	; 0xdac
 8003c02:	4806      	ldr	r0, [pc, #24]	; (8003c1c <BSP_QSPI_Erase_Block+0x90>)
 8003c04:	f000 f8ef 	bl	8003de6 <QSPI_AutoPollingMemReady>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3758      	adds	r7, #88	; 0x58
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20000800 	.word	0x20000800

08003c20 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 8003c26:	4b1c      	ldr	r3, [pc, #112]	; (8003c98 <BSP_QSPI_MspInit+0x78>)
 8003c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2a:	4a1b      	ldr	r2, [pc, #108]	; (8003c98 <BSP_QSPI_MspInit+0x78>)
 8003c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c30:	6513      	str	r3, [r2, #80]	; 0x50
 8003c32:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <BSP_QSPI_MspInit+0x78>)
 8003c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3a:	60bb      	str	r3, [r7, #8]
 8003c3c:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 8003c3e:	4b16      	ldr	r3, [pc, #88]	; (8003c98 <BSP_QSPI_MspInit+0x78>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	4a15      	ldr	r2, [pc, #84]	; (8003c98 <BSP_QSPI_MspInit+0x78>)
 8003c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c48:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 8003c4a:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <BSP_QSPI_MspInit+0x78>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	4a12      	ldr	r2, [pc, #72]	; (8003c98 <BSP_QSPI_MspInit+0x78>)
 8003c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c54:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <BSP_QSPI_MspInit+0x78>)
 8003c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5a:	4a0f      	ldr	r2, [pc, #60]	; (8003c98 <BSP_QSPI_MspInit+0x78>)
 8003c5c:	f043 0310 	orr.w	r3, r3, #16
 8003c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c62:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <BSP_QSPI_MspInit+0x78>)
 8003c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	607b      	str	r3, [r7, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8003c6e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8003c72:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003c74:	2302      	movs	r3, #2
 8003c76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8003c80:	230a      	movs	r3, #10
 8003c82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c84:	f107 030c 	add.w	r3, r7, #12
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4804      	ldr	r0, [pc, #16]	; (8003c9c <BSP_QSPI_MspInit+0x7c>)
 8003c8c:	f001 f92c 	bl	8004ee8 <HAL_GPIO_Init>
}
 8003c90:	bf00      	nop
 8003c92:	3720      	adds	r7, #32
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	48001000 	.word	0x48001000

08003ca0 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b096      	sub	sp, #88	; 0x58
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 8003cb0:	2366      	movs	r3, #102	; 0x66
 8003cb2:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cd8:	f107 0308 	add.w	r3, r7, #8
 8003cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f002 fab5 	bl	8006252 <HAL_OSPI_Command>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e019      	b.n	8003d26 <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8003cf2:	2399      	movs	r3, #153	; 0x99
 8003cf4:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cf6:	f107 0308 	add.w	r3, r7, #8
 8003cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfe:	4619      	mov	r1, r3
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f002 faa6 	bl	8006252 <HAL_OSPI_Command>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e00a      	b.n	8003d26 <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003d10:	f241 3188 	movw	r1, #5000	; 0x1388
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f866 	bl	8003de6 <QSPI_AutoPollingMemReady>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3758      	adds	r7, #88	; 0x58
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b09c      	sub	sp, #112	; 0x70
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8003d36:	2300      	movs	r3, #0
 8003d38:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 8003d3e:	2306      	movs	r3, #6
 8003d40:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8003d42:	2301      	movs	r3, #1
 8003d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8003d46:	2300      	movs	r3, #0
 8003d48:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003d52:	2300      	movs	r3, #0
 8003d54:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8003d62:	2300      	movs	r3, #0
 8003d64:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d66:	f107 0320 	add.w	r3, r7, #32
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	4619      	mov	r1, r3
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f002 fa6e 	bl	8006252 <HAL_OSPI_Command>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e02e      	b.n	8003dde <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 8003d80:	2302      	movs	r3, #2
 8003d82:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 8003d84:	2302      	movs	r3, #2
 8003d86:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8003d8c:	2310      	movs	r3, #16
 8003d8e:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8003d90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d94:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 8003d96:	2305      	movs	r3, #5
 8003d98:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 8003d9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d9e:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 8003da0:	2301      	movs	r3, #1
 8003da2:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 8003da4:	2300      	movs	r3, #0
 8003da6:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003da8:	f107 0320 	add.w	r3, r7, #32
 8003dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db0:	4619      	mov	r1, r3
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f002 fa4d 	bl	8006252 <HAL_OSPI_Command>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e00d      	b.n	8003dde <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003dc2:	f107 030c 	add.w	r3, r7, #12
 8003dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dca:	4619      	mov	r1, r3
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f002 fbd7 	bl	8006580 <HAL_OSPI_AutoPolling>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3770      	adds	r7, #112	; 0x70
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b09c      	sub	sp, #112	; 0x70
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8003df0:	2300      	movs	r3, #0
 8003df2:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003df4:	2300      	movs	r3, #0
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8003df8:	2305      	movs	r3, #5
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8003e00:	2300      	movs	r3, #0
 8003e02:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003e04:	2300      	movs	r3, #0
 8003e06:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8003e10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e14:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 8003e16:	2301      	movs	r3, #1
 8003e18:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8003e22:	2300      	movs	r3, #0
 8003e24:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8003e26:	2300      	movs	r3, #0
 8003e28:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8003e36:	2310      	movs	r3, #16
 8003e38:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8003e3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e3e:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e40:	f107 0320 	add.w	r3, r7, #32
 8003e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e48:	4619      	mov	r1, r3
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f002 fa01 	bl	8006252 <HAL_OSPI_Command>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e00c      	b.n	8003e74 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 8003e5a:	f107 030c 	add.w	r3, r7, #12
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	4619      	mov	r1, r3
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f002 fb8c 	bl	8006580 <HAL_OSPI_AutoPolling>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3770      	adds	r7, #112	; 0x70
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b098      	sub	sp, #96	; 0x60
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8003e90:	2305      	movs	r3, #5
 8003e92:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8003e94:	2301      	movs	r3, #1
 8003e96:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8003ea8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eac:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ec2:	f107 0310 	add.w	r3, r7, #16
 8003ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f002 f9c0 	bl	8006252 <HAL_OSPI_Command>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e077      	b.n	8003fcc <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003edc:	f107 030f 	add.w	r3, r7, #15
 8003ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f002 faa7 	bl	800643a <HAL_OSPI_Receive>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e06a      	b.n	8003fcc <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff ff19 	bl	8003d2e <QSPI_WriteEnable>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e062      	b.n	8003fcc <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d105      	bne.n	8003f18 <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	73fb      	strb	r3, [r7, #15]
 8003f16:	e004      	b.n	8003f22 <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8003f22:	2301      	movs	r3, #1
 8003f24:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f26:	f107 0310 	add.w	r3, r7, #16
 8003f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2e:	4619      	mov	r1, r3
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f002 f98e 	bl	8006252 <HAL_OSPI_Command>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e045      	b.n	8003fcc <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f40:	f107 030f 	add.w	r3, r7, #15
 8003f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f48:	4619      	mov	r1, r3
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f002 fa02 	bl	8006354 <HAL_OSPI_Transmit>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e038      	b.n	8003fcc <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003f5a:	f241 3188 	movw	r1, #5000	; 0x1388
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff ff41 	bl	8003de6 <QSPI_AutoPollingMemReady>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e02e      	b.n	8003fcc <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8003f6e:	2305      	movs	r3, #5
 8003f70:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f72:	f107 0310 	add.w	r3, r7, #16
 8003f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f002 f968 	bl	8006252 <HAL_OSPI_Command>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e01f      	b.n	8003fcc <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f8c:	f107 030f 	add.w	r3, r7, #15
 8003f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f94:	4619      	mov	r1, r3
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f002 fa4f 	bl	800643a <HAL_OSPI_Receive>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e012      	b.n	8003fcc <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d102      	bne.n	8003fb6 <QSPI_QuadMode+0x13a>
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d007      	beq.n	8003fc6 <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d004      	beq.n	8003fca <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3760      	adds	r7, #96	; 0x60
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b098      	sub	sp, #96	; 0x60
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8003fe8:	2305      	movs	r3, #5
 8003fea:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8003fec:	2301      	movs	r3, #1
 8003fee:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8004000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004004:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8004006:	2300      	movs	r3, #0
 8004008:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 800400a:	2300      	movs	r3, #0
 800400c:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 800400e:	2301      	movs	r3, #1
 8004010:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8004012:	2300      	movs	r3, #0
 8004014:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8004016:	2300      	movs	r3, #0
 8004018:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800401a:	f107 0310 	add.w	r3, r7, #16
 800401e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004022:	4619      	mov	r1, r3
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f002 f914 	bl	8006252 <HAL_OSPI_Command>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e09a      	b.n	800416a <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004034:	f107 030c 	add.w	r3, r7, #12
 8004038:	f241 3288 	movw	r2, #5000	; 0x1388
 800403c:	4619      	mov	r1, r3
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f002 f9fb 	bl	800643a <HAL_OSPI_Receive>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e08d      	b.n	800416a <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 800404e:	2315      	movs	r3, #21
 8004050:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8004052:	2302      	movs	r3, #2
 8004054:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004056:	f107 0310 	add.w	r3, r7, #16
 800405a:	f241 3288 	movw	r2, #5000	; 0x1388
 800405e:	4619      	mov	r1, r3
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f002 f8f6 	bl	8006252 <HAL_OSPI_Command>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e07c      	b.n	800416a <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004070:	f107 030c 	add.w	r3, r7, #12
 8004074:	3301      	adds	r3, #1
 8004076:	f241 3288 	movw	r2, #5000	; 0x1388
 800407a:	4619      	mov	r1, r3
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f002 f9dc 	bl	800643a <HAL_OSPI_Receive>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e06e      	b.n	800416a <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f7ff fe4e 	bl	8003d2e <QSPI_WriteEnable>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e066      	b.n	800416a <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d105      	bne.n	80040ae <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80040a2:	7bbb      	ldrb	r3, [r7, #14]
 80040a4:	f043 0302 	orr.w	r3, r3, #2
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	73bb      	strb	r3, [r7, #14]
 80040ac:	e004      	b.n	80040b8 <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80040ae:	7bbb      	ldrb	r3, [r7, #14]
 80040b0:	f023 0302 	bic.w	r3, r3, #2
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80040b8:	2301      	movs	r3, #1
 80040ba:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 80040bc:	2303      	movs	r3, #3
 80040be:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80040c0:	f107 0310 	add.w	r3, r7, #16
 80040c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c8:	4619      	mov	r1, r3
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f002 f8c1 	bl	8006252 <HAL_OSPI_Command>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e047      	b.n	800416a <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80040da:	f107 030c 	add.w	r3, r7, #12
 80040de:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e2:	4619      	mov	r1, r3
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f002 f935 	bl	8006354 <HAL_OSPI_Transmit>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e03a      	b.n	800416a <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80040f4:	f241 3188 	movw	r1, #5000	; 0x1388
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff fe74 	bl	8003de6 <QSPI_AutoPollingMemReady>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e030      	b.n	800416a <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8004108:	2315      	movs	r3, #21
 800410a:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 800410c:	2302      	movs	r3, #2
 800410e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004110:	f107 0310 	add.w	r3, r7, #16
 8004114:	f241 3288 	movw	r2, #5000	; 0x1388
 8004118:	4619      	mov	r1, r3
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f002 f899 	bl	8006252 <HAL_OSPI_Command>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e01f      	b.n	800416a <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800412a:	f107 030c 	add.w	r3, r7, #12
 800412e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004132:	4619      	mov	r1, r3
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f002 f980 	bl	800643a <HAL_OSPI_Receive>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e012      	b.n	800416a <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8004144:	7b7b      	ldrb	r3, [r7, #13]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d102      	bne.n	8004154 <QSPI_HighPerfMode+0x180>
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d007      	beq.n	8004164 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8004154:	7b7b      	ldrb	r3, [r7, #13]
 8004156:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800415a:	2b00      	cmp	r3, #0
 800415c:	d004      	beq.n	8004168 <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 800415e:	78fb      	ldrb	r3, [r7, #3]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3760      	adds	r7, #96	; 0x60
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800417e:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <BSP_TSENSOR_Init+0x30>)
 8004180:	4a09      	ldr	r2, [pc, #36]	; (80041a8 <BSP_TSENSOR_Init+0x34>)
 8004182:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8004184:	f7ff f9fc 	bl	8003580 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8004188:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <BSP_TSENSOR_Init+0x30>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2100      	movs	r1, #0
 8004190:	20be      	movs	r0, #190	; 0xbe
 8004192:	4798      	blx	r3

  ret = TSENSOR_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8004198:	79fb      	ldrb	r3, [r7, #7]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000850 	.word	0x20000850
 80041a8:	20000010 	.word	0x20000010

080041ac <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80041b0:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <BSP_TSENSOR_ReadTemp+0x18>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	20be      	movs	r0, #190	; 0xbe
 80041b8:	4798      	blx	r3
 80041ba:	eef0 7a40 	vmov.f32	s15, s0
}
 80041be:	eeb0 0a67 	vmov.f32	s0, s15
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	20000850 	.word	0x20000850

080041c8 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2120      	movs	r1, #32
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff f9f5 	bl	80035c8 <SENSOR_IO_Read>
 80041de:	4603      	mov	r3, r0
 80041e0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	f023 0304 	bic.w	r3, r3, #4
 80041e8:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	f043 0304 	orr.w	r3, r3, #4
 80041f0:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	f023 0303 	bic.w	r3, r3, #3
 80041f8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	f043 0301 	orr.w	r3, r3, #1
 8004200:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004208:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800420a:	88fb      	ldrh	r3, [r7, #6]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	7bfa      	ldrb	r2, [r7, #15]
 8004210:	2120      	movs	r1, #32
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff f9be 	bl	8003594 <SENSOR_IO_Write>
}
 8004218:	bf00      	nop
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800422e:	f7ff f9a7 	bl	8003580 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	b2db      	uxtb	r3, r3
 8004236:	210f      	movs	r1, #15
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff f9c5 	bl	80035c8 <SENSOR_IO_Read>
 800423e:	4603      	mov	r3, r0
 8004240:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8004242:	7bfb      	ldrb	r3, [r7, #15]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8004256:	88fb      	ldrh	r3, [r7, #6]
 8004258:	b2d8      	uxtb	r0, r3
 800425a:	f107 020c 	add.w	r2, r7, #12
 800425e:	2302      	movs	r3, #2
 8004260:	21b0      	movs	r1, #176	; 0xb0
 8004262:	f7ff f9cf 	bl	8003604 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8004266:	7b3b      	ldrb	r3, [r7, #12]
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	b2db      	uxtb	r3, r3
 800426c:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800426e:	7b7b      	ldrb	r3, [r7, #13]
 8004270:	085b      	lsrs	r3, r3, #1
 8004272:	b2db      	uxtb	r3, r3
 8004274:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8004276:	88fb      	ldrh	r3, [r7, #6]
 8004278:	b2d8      	uxtb	r0, r3
 800427a:	f107 020c 	add.w	r2, r7, #12
 800427e:	2302      	movs	r3, #2
 8004280:	21b6      	movs	r1, #182	; 0xb6
 8004282:	f7ff f9bf 	bl	8003604 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8004286:	7b7b      	ldrb	r3, [r7, #13]
 8004288:	021b      	lsls	r3, r3, #8
 800428a:	b21a      	sxth	r2, r3
 800428c:	7b3b      	ldrb	r3, [r7, #12]
 800428e:	b21b      	sxth	r3, r3
 8004290:	4313      	orrs	r3, r2
 8004292:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8004294:	88fb      	ldrh	r3, [r7, #6]
 8004296:	b2d8      	uxtb	r0, r3
 8004298:	f107 020c 	add.w	r2, r7, #12
 800429c:	2302      	movs	r3, #2
 800429e:	21ba      	movs	r1, #186	; 0xba
 80042a0:	f7ff f9b0 	bl	8003604 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80042a4:	7b7b      	ldrb	r3, [r7, #13]
 80042a6:	021b      	lsls	r3, r3, #8
 80042a8:	b21a      	sxth	r2, r3
 80042aa:	7b3b      	ldrb	r3, [r7, #12]
 80042ac:	b21b      	sxth	r3, r3
 80042ae:	4313      	orrs	r3, r2
 80042b0:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	b2d8      	uxtb	r0, r3
 80042b6:	f107 020c 	add.w	r2, r7, #12
 80042ba:	2302      	movs	r3, #2
 80042bc:	21a8      	movs	r1, #168	; 0xa8
 80042be:	f7ff f9a1 	bl	8003604 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80042c2:	7b7b      	ldrb	r3, [r7, #13]
 80042c4:	021b      	lsls	r3, r3, #8
 80042c6:	b21a      	sxth	r2, r3
 80042c8:	7b3b      	ldrb	r3, [r7, #12]
 80042ca:	b21b      	sxth	r3, r3
 80042cc:	4313      	orrs	r3, r2
 80042ce:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80042d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80042d4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042e2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80042e6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	ee07 3a90 	vmov	s15, r3
 80042f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042f4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80042f8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80042fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	ee07 3a90 	vmov	s15, r3
 8004306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800430a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800430e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800431a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800431e:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8004322:	edd7 7a04 	vldr	s15, [r7, #16]
 8004326:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800432a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800432e:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8004332:	edd7 7a04 	vldr	s15, [r7, #16]
 8004336:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800437c <HTS221_H_ReadHumidity+0x130>
 800433a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800433e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004342:	dd01      	ble.n	8004348 <HTS221_H_ReadHumidity+0xfc>
 8004344:	4b0e      	ldr	r3, [pc, #56]	; (8004380 <HTS221_H_ReadHumidity+0x134>)
 8004346:	e00a      	b.n	800435e <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8004348:	edd7 7a04 	vldr	s15, [r7, #16]
 800434c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004354:	d502      	bpl.n	800435c <HTS221_H_ReadHumidity+0x110>
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	e000      	b.n	800435e <HTS221_H_ReadHumidity+0x112>
 800435c:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800435e:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8004360:	edd7 7a04 	vldr	s15, [r7, #16]
 8004364:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004368:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800436c:	eef0 7a66 	vmov.f32	s15, s13
}
 8004370:	eeb0 0a67 	vmov.f32	s0, s15
 8004374:	3720      	adds	r7, #32
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	447a0000 	.word	0x447a0000
 8004380:	447a0000 	.word	0x447a0000

08004384 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	6039      	str	r1, [r7, #0]
 800438e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2120      	movs	r1, #32
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff f916 	bl	80035c8 <SENSOR_IO_Read>
 800439c:	4603      	mov	r3, r0
 800439e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	f023 0304 	bic.w	r3, r3, #4
 80043a6:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	f043 0304 	orr.w	r3, r3, #4
 80043ae:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	f023 0303 	bic.w	r3, r3, #3
 80043b6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043c6:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80043c8:	88fb      	ldrh	r3, [r7, #6]
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	7bfa      	ldrb	r2, [r7, #15]
 80043ce:	2120      	movs	r1, #32
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff f8df 	bl	8003594 <SENSOR_IO_Write>
}
 80043d6:	bf00      	nop
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b088      	sub	sp, #32
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	4603      	mov	r3, r0
 80043e6:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80043e8:	88fb      	ldrh	r3, [r7, #6]
 80043ea:	b2d8      	uxtb	r0, r3
 80043ec:	f107 0208 	add.w	r2, r7, #8
 80043f0:	2302      	movs	r3, #2
 80043f2:	21b2      	movs	r1, #178	; 0xb2
 80043f4:	f7ff f906 	bl	8003604 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80043f8:	88fb      	ldrh	r3, [r7, #6]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2135      	movs	r1, #53	; 0x35
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff f8e2 	bl	80035c8 <SENSOR_IO_Read>
 8004404:	4603      	mov	r3, r0
 8004406:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8004408:	7ffb      	ldrb	r3, [r7, #31]
 800440a:	021b      	lsls	r3, r3, #8
 800440c:	b21b      	sxth	r3, r3
 800440e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004412:	b21a      	sxth	r2, r3
 8004414:	7a3b      	ldrb	r3, [r7, #8]
 8004416:	b21b      	sxth	r3, r3
 8004418:	4313      	orrs	r3, r2
 800441a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800441c:	7ffb      	ldrb	r3, [r7, #31]
 800441e:	019b      	lsls	r3, r3, #6
 8004420:	b21b      	sxth	r3, r3
 8004422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004426:	b21a      	sxth	r2, r3
 8004428:	7a7b      	ldrb	r3, [r7, #9]
 800442a:	b21b      	sxth	r3, r3
 800442c:	4313      	orrs	r3, r2
 800442e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8004430:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004434:	10db      	asrs	r3, r3, #3
 8004436:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8004438:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800443c:	10db      	asrs	r3, r3, #3
 800443e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8004440:	88fb      	ldrh	r3, [r7, #6]
 8004442:	b2d8      	uxtb	r0, r3
 8004444:	f107 0208 	add.w	r2, r7, #8
 8004448:	2304      	movs	r3, #4
 800444a:	21bc      	movs	r1, #188	; 0xbc
 800444c:	f7ff f8da 	bl	8003604 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8004450:	7a7b      	ldrb	r3, [r7, #9]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	b21a      	sxth	r2, r3
 8004456:	7a3b      	ldrb	r3, [r7, #8]
 8004458:	b21b      	sxth	r3, r3
 800445a:	4313      	orrs	r3, r2
 800445c:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800445e:	7afb      	ldrb	r3, [r7, #11]
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	b21a      	sxth	r2, r3
 8004464:	7abb      	ldrb	r3, [r7, #10]
 8004466:	b21b      	sxth	r3, r3
 8004468:	4313      	orrs	r3, r2
 800446a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800446c:	88fb      	ldrh	r3, [r7, #6]
 800446e:	b2d8      	uxtb	r0, r3
 8004470:	f107 0208 	add.w	r2, r7, #8
 8004474:	2302      	movs	r3, #2
 8004476:	21aa      	movs	r1, #170	; 0xaa
 8004478:	f7ff f8c4 	bl	8003604 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800447c:	7a7b      	ldrb	r3, [r7, #9]
 800447e:	021b      	lsls	r3, r3, #8
 8004480:	b21a      	sxth	r2, r3
 8004482:	7a3b      	ldrb	r3, [r7, #8]
 8004484:	b21b      	sxth	r3, r3
 8004486:	4313      	orrs	r3, r2
 8004488:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800448a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800448e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	ee07 3a90 	vmov	s15, r3
 8004498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800449c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80044a0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	ee07 3a90 	vmov	s15, r3
 80044aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044ae:	ee67 6a27 	vmul.f32	s13, s14, s15
 80044b2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80044b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	ee07 3a90 	vmov	s15, r3
 80044c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044c8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80044cc:	ee07 3a90 	vmov	s15, r3
 80044d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044d8:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	ee07 3a90 	vmov	s15, r3
}
 80044e2:	eeb0 0a67 	vmov.f32	s0, s15
 80044e6:	3720      	adds	r7, #32
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	463b      	mov	r3, r7
 80044f4:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 80044f8:	783b      	ldrb	r3, [r7, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	2120      	movs	r1, #32
 80044fe:	203c      	movs	r0, #60	; 0x3c
 8004500:	f7ff f848 	bl	8003594 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8004504:	787b      	ldrb	r3, [r7, #1]
 8004506:	461a      	mov	r2, r3
 8004508:	2121      	movs	r1, #33	; 0x21
 800450a:	203c      	movs	r0, #60	; 0x3c
 800450c:	f7ff f842 	bl	8003594 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8004510:	78bb      	ldrb	r3, [r7, #2]
 8004512:	461a      	mov	r2, r3
 8004514:	2122      	movs	r1, #34	; 0x22
 8004516:	203c      	movs	r0, #60	; 0x3c
 8004518:	f7ff f83c 	bl	8003594 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	461a      	mov	r2, r3
 8004520:	2123      	movs	r1, #35	; 0x23
 8004522:	203c      	movs	r0, #60	; 0x3c
 8004524:	f7ff f836 	bl	8003594 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8004528:	793b      	ldrb	r3, [r7, #4]
 800452a:	461a      	mov	r2, r3
 800452c:	2124      	movs	r1, #36	; 0x24
 800452e:	203c      	movs	r0, #60	; 0x3c
 8004530:	f7ff f830 	bl	8003594 <SENSOR_IO_Write>
}
 8004534:	bf00      	nop
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8004542:	2300      	movs	r3, #0
 8004544:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8004546:	2122      	movs	r1, #34	; 0x22
 8004548:	203c      	movs	r0, #60	; 0x3c
 800454a:	f7ff f83d 	bl	80035c8 <SENSOR_IO_Read>
 800454e:	4603      	mov	r3, r0
 8004550:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	f023 0303 	bic.w	r3, r3, #3
 8004558:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 800455a:	79fb      	ldrb	r3, [r7, #7]
 800455c:	f043 0303 	orr.w	r3, r3, #3
 8004560:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	461a      	mov	r2, r3
 8004566:	2122      	movs	r1, #34	; 0x22
 8004568:	203c      	movs	r0, #60	; 0x3c
 800456a:	f7ff f813 	bl	8003594 <SENSOR_IO_Write>
}
 800456e:	bf00      	nop
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800457a:	f7ff f801 	bl	8003580 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 800457e:	210f      	movs	r1, #15
 8004580:	203c      	movs	r0, #60	; 0x3c
 8004582:	f7ff f821 	bl	80035c8 <SENSOR_IO_Read>
 8004586:	4603      	mov	r3, r0
}
 8004588:	4618      	mov	r0, r3
 800458a:	bd80      	pop	{r7, pc}

0800458c <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800459a:	2122      	movs	r1, #34	; 0x22
 800459c:	203c      	movs	r0, #60	; 0x3c
 800459e:	f7ff f813 	bl	80035c8 <SENSOR_IO_Read>
 80045a2:	4603      	mov	r3, r0
 80045a4:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	f023 0320 	bic.w	r3, r3, #32
 80045ac:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	f043 0320 	orr.w	r3, r3, #32
 80045ba:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	461a      	mov	r2, r3
 80045c0:	2122      	movs	r1, #34	; 0x22
 80045c2:	203c      	movs	r0, #60	; 0x3c
 80045c4:	f7fe ffe6 	bl	8003594 <SENSOR_IO_Write>
}
 80045c8:	bf00      	nop
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80045e6:	2121      	movs	r1, #33	; 0x21
 80045e8:	203c      	movs	r0, #60	; 0x3c
 80045ea:	f7fe ffed 	bl	80035c8 <SENSOR_IO_Read>
 80045ee:	4603      	mov	r3, r0
 80045f0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 80045f2:	f107 0208 	add.w	r2, r7, #8
 80045f6:	2306      	movs	r3, #6
 80045f8:	21a8      	movs	r1, #168	; 0xa8
 80045fa:	203c      	movs	r0, #60	; 0x3c
 80045fc:	f7ff f802 	bl	8003604 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8004600:	2300      	movs	r3, #0
 8004602:	77fb      	strb	r3, [r7, #31]
 8004604:	e01c      	b.n	8004640 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8004606:	7ffb      	ldrb	r3, [r7, #31]
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	3301      	adds	r3, #1
 800460c:	3320      	adds	r3, #32
 800460e:	443b      	add	r3, r7
 8004610:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004614:	b29b      	uxth	r3, r3
 8004616:	021b      	lsls	r3, r3, #8
 8004618:	b29a      	uxth	r2, r3
 800461a:	7ffb      	ldrb	r3, [r7, #31]
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	3320      	adds	r3, #32
 8004620:	443b      	add	r3, r7
 8004622:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004626:	b29b      	uxth	r3, r3
 8004628:	4413      	add	r3, r2
 800462a:	b29a      	uxth	r2, r3
 800462c:	7ffb      	ldrb	r3, [r7, #31]
 800462e:	b212      	sxth	r2, r2
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	3320      	adds	r3, #32
 8004634:	443b      	add	r3, r7
 8004636:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800463a:	7ffb      	ldrb	r3, [r7, #31]
 800463c:	3301      	adds	r3, #1
 800463e:	77fb      	strb	r3, [r7, #31]
 8004640:	7ffb      	ldrb	r3, [r7, #31]
 8004642:	2b02      	cmp	r3, #2
 8004644:	d9df      	bls.n	8004606 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8004646:	7dfb      	ldrb	r3, [r7, #23]
 8004648:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800464c:	2b60      	cmp	r3, #96	; 0x60
 800464e:	d013      	beq.n	8004678 <LIS3MDL_MagReadXYZ+0xa8>
 8004650:	2b60      	cmp	r3, #96	; 0x60
 8004652:	dc14      	bgt.n	800467e <LIS3MDL_MagReadXYZ+0xae>
 8004654:	2b40      	cmp	r3, #64	; 0x40
 8004656:	d00c      	beq.n	8004672 <LIS3MDL_MagReadXYZ+0xa2>
 8004658:	2b40      	cmp	r3, #64	; 0x40
 800465a:	dc10      	bgt.n	800467e <LIS3MDL_MagReadXYZ+0xae>
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <LIS3MDL_MagReadXYZ+0x96>
 8004660:	2b20      	cmp	r3, #32
 8004662:	d003      	beq.n	800466c <LIS3MDL_MagReadXYZ+0x9c>
 8004664:	e00b      	b.n	800467e <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8004666:	4b19      	ldr	r3, [pc, #100]	; (80046cc <LIS3MDL_MagReadXYZ+0xfc>)
 8004668:	61bb      	str	r3, [r7, #24]
    break;
 800466a:	e008      	b.n	800467e <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 800466c:	4b18      	ldr	r3, [pc, #96]	; (80046d0 <LIS3MDL_MagReadXYZ+0x100>)
 800466e:	61bb      	str	r3, [r7, #24]
    break;
 8004670:	e005      	b.n	800467e <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8004672:	4b18      	ldr	r3, [pc, #96]	; (80046d4 <LIS3MDL_MagReadXYZ+0x104>)
 8004674:	61bb      	str	r3, [r7, #24]
    break;
 8004676:	e002      	b.n	800467e <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8004678:	4b17      	ldr	r3, [pc, #92]	; (80046d8 <LIS3MDL_MagReadXYZ+0x108>)
 800467a:	61bb      	str	r3, [r7, #24]
    break;    
 800467c:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 800467e:	2300      	movs	r3, #0
 8004680:	77fb      	strb	r3, [r7, #31]
 8004682:	e01a      	b.n	80046ba <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8004684:	7ffb      	ldrb	r3, [r7, #31]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	3320      	adds	r3, #32
 800468a:	443b      	add	r3, r7
 800468c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8004690:	ee07 3a90 	vmov	s15, r3
 8004694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004698:	edd7 7a06 	vldr	s15, [r7, #24]
 800469c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a0:	7ffb      	ldrb	r3, [r7, #31]
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	4413      	add	r3, r2
 80046a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046ac:	ee17 2a90 	vmov	r2, s15
 80046b0:	b212      	sxth	r2, r2
 80046b2:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80046b4:	7ffb      	ldrb	r3, [r7, #31]
 80046b6:	3301      	adds	r3, #1
 80046b8:	77fb      	strb	r3, [r7, #31]
 80046ba:	7ffb      	ldrb	r3, [r7, #31]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d9e1      	bls.n	8004684 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop
 80046c4:	3720      	adds	r7, #32
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	3e0f5c29 	.word	0x3e0f5c29
 80046d0:	3e947ae1 	.word	0x3e947ae1
 80046d4:	3edc28f6 	.word	0x3edc28f6
 80046d8:	3f147ae1 	.word	0x3f147ae1

080046dc <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80046e6:	88fb      	ldrh	r3, [r7, #6]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 f879 	bl	80047e0 <LPS22HB_Init>
}
 80046ee:	bf00      	nop
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b084      	sub	sp, #16
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	4603      	mov	r3, r0
 80046fe:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004700:	2300      	movs	r3, #0
 8004702:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8004704:	f7fe ff3c 	bl	8003580 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8004708:	88fb      	ldrh	r3, [r7, #6]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	210f      	movs	r1, #15
 800470e:	4618      	mov	r0, r3
 8004710:	f7fe ff5a 	bl	80035c8 <SENSOR_IO_Read>
 8004714:	4603      	mov	r3, r0
 8004716:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8004718:	7bfb      	ldrb	r3, [r7, #15]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8004724:	b590      	push	{r4, r7, lr}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8004732:	2300      	movs	r3, #0
 8004734:	74fb      	strb	r3, [r7, #19]
 8004736:	e013      	b.n	8004760 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8004738:	88fb      	ldrh	r3, [r7, #6]
 800473a:	b2da      	uxtb	r2, r3
 800473c:	7cfb      	ldrb	r3, [r7, #19]
 800473e:	3328      	adds	r3, #40	; 0x28
 8004740:	b2db      	uxtb	r3, r3
 8004742:	7cfc      	ldrb	r4, [r7, #19]
 8004744:	4619      	mov	r1, r3
 8004746:	4610      	mov	r0, r2
 8004748:	f7fe ff3e 	bl	80035c8 <SENSOR_IO_Read>
 800474c:	4603      	mov	r3, r0
 800474e:	461a      	mov	r2, r3
 8004750:	f104 0318 	add.w	r3, r4, #24
 8004754:	443b      	add	r3, r7
 8004756:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800475a:	7cfb      	ldrb	r3, [r7, #19]
 800475c:	3301      	adds	r3, #1
 800475e:	74fb      	strb	r3, [r7, #19]
 8004760:	7cfb      	ldrb	r3, [r7, #19]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d9e8      	bls.n	8004738 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8004766:	2300      	movs	r3, #0
 8004768:	74fb      	strb	r3, [r7, #19]
 800476a:	e00f      	b.n	800478c <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 800476c:	7cfb      	ldrb	r3, [r7, #19]
 800476e:	3318      	adds	r3, #24
 8004770:	443b      	add	r3, r7
 8004772:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004776:	461a      	mov	r2, r3
 8004778:	7cfb      	ldrb	r3, [r7, #19]
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8004786:	7cfb      	ldrb	r3, [r7, #19]
 8004788:	3301      	adds	r3, #1
 800478a:	74fb      	strb	r3, [r7, #19]
 800478c:	7cfb      	ldrb	r3, [r7, #19]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d9ec      	bls.n	800476c <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a2:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2264      	movs	r2, #100	; 0x64
 80047ac:	fb02 f303 	mul.w	r3, r2, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	da01      	bge.n	80047b8 <LPS22HB_P_ReadPressure+0x94>
 80047b4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80047b8:	131b      	asrs	r3, r3, #12
 80047ba:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047c6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80047dc <LPS22HB_P_ReadPressure+0xb8>
 80047ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80047ce:	eef0 7a66 	vmov.f32	s15, s13
}
 80047d2:	eeb0 0a67 	vmov.f32	s0, s15
 80047d6:	371c      	adds	r7, #28
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd90      	pop	{r4, r7, pc}
 80047dc:	42c80000 	.word	0x42c80000

080047e0 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	4603      	mov	r3, r0
 80047e8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	211a      	movs	r1, #26
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fe fee9 	bl	80035c8 <SENSOR_IO_Read>
 80047f6:	4603      	mov	r3, r0
 80047f8:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	f023 0301 	bic.w	r3, r3, #1
 8004800:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8004802:	7bfb      	ldrb	r3, [r7, #15]
 8004804:	f043 0301 	orr.w	r3, r3, #1
 8004808:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	b2db      	uxtb	r3, r3
 800480e:	7bfa      	ldrb	r2, [r7, #15]
 8004810:	211a      	movs	r1, #26
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe febe 	bl	8003594 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8004818:	88fb      	ldrh	r3, [r7, #6]
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2110      	movs	r1, #16
 800481e:	4618      	mov	r0, r3
 8004820:	f7fe fed2 	bl	80035c8 <SENSOR_IO_Read>
 8004824:	4603      	mov	r3, r0
 8004826:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8004828:	7bfb      	ldrb	r3, [r7, #15]
 800482a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004836:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8004838:	7bfb      	ldrb	r3, [r7, #15]
 800483a:	f023 0302 	bic.w	r3, r3, #2
 800483e:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	f043 0302 	orr.w	r3, r3, #2
 8004846:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	b2db      	uxtb	r3, r3
 800484c:	7bfa      	ldrb	r2, [r7, #15]
 800484e:	2110      	movs	r1, #16
 8004850:	4618      	mov	r0, r3
 8004852:	f7fe fe9f 	bl	8003594 <SENSOR_IO_Write>
}  
 8004856:	bf00      	nop
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	4603      	mov	r3, r0
 8004866:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004868:	2300      	movs	r3, #0
 800486a:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800486c:	2110      	movs	r1, #16
 800486e:	20d4      	movs	r0, #212	; 0xd4
 8004870:	f7fe feaa 	bl	80035c8 <SENSOR_IO_Read>
 8004874:	4603      	mov	r3, r0
 8004876:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8004878:	88fb      	ldrh	r3, [r7, #6]
 800487a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800487c:	7bbb      	ldrb	r3, [r7, #14]
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8004884:	7bba      	ldrb	r2, [r7, #14]
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	4313      	orrs	r3, r2
 800488a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800488c:	7bbb      	ldrb	r3, [r7, #14]
 800488e:	461a      	mov	r2, r3
 8004890:	2110      	movs	r1, #16
 8004892:	20d4      	movs	r0, #212	; 0xd4
 8004894:	f7fe fe7e 	bl	8003594 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8004898:	2112      	movs	r1, #18
 800489a:	20d4      	movs	r0, #212	; 0xd4
 800489c:	f7fe fe94 	bl	80035c8 <SENSOR_IO_Read>
 80048a0:	4603      	mov	r3, r0
 80048a2:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80048a4:	88fb      	ldrh	r3, [r7, #6]
 80048a6:	0a1b      	lsrs	r3, r3, #8
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80048ac:	7bbb      	ldrb	r3, [r7, #14]
 80048ae:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80048b2:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80048b4:	7bba      	ldrb	r2, [r7, #14]
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80048bc:	7bbb      	ldrb	r3, [r7, #14]
 80048be:	461a      	mov	r2, r3
 80048c0:	2112      	movs	r1, #18
 80048c2:	20d4      	movs	r0, #212	; 0xd4
 80048c4:	f7fe fe66 	bl	8003594 <SENSOR_IO_Write>
}
 80048c8:	bf00      	nop
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80048d6:	2300      	movs	r3, #0
 80048d8:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80048da:	2110      	movs	r1, #16
 80048dc:	20d4      	movs	r0, #212	; 0xd4
 80048de:	f7fe fe73 	bl	80035c8 <SENSOR_IO_Read>
 80048e2:	4603      	mov	r3, r0
 80048e4:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	f003 030f 	and.w	r3, r3, #15
 80048ec:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	461a      	mov	r2, r3
 80048f2:	2110      	movs	r1, #16
 80048f4:	20d4      	movs	r0, #212	; 0xd4
 80048f6:	f7fe fe4d 	bl	8003594 <SENSOR_IO_Write>
}
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8004902:	b580      	push	{r7, lr}
 8004904:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8004906:	f7fe fe3b 	bl	8003580 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800490a:	210f      	movs	r1, #15
 800490c:	20d4      	movs	r0, #212	; 0xd4
 800490e:	f7fe fe5b 	bl	80035c8 <SENSOR_IO_Read>
 8004912:	4603      	mov	r3, r0
}
 8004914:	4618      	mov	r0, r3
 8004916:	bd80      	pop	{r7, pc}

08004918 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004922:	2300      	movs	r3, #0
 8004924:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8004926:	2115      	movs	r1, #21
 8004928:	20d4      	movs	r0, #212	; 0xd4
 800492a:	f7fe fe4d 	bl	80035c8 <SENSOR_IO_Read>
 800492e:	4603      	mov	r3, r0
 8004930:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	f023 0310 	bic.w	r3, r3, #16
 8004938:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800493a:	88fb      	ldrh	r3, [r7, #6]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	f043 0310 	orr.w	r3, r3, #16
 8004946:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	461a      	mov	r2, r3
 800494c:	2115      	movs	r1, #21
 800494e:	20d4      	movs	r0, #212	; 0xd4
 8004950:	f7fe fe20 	bl	8003594 <SENSOR_IO_Write>
}
 8004954:	bf00      	nop
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8004964:	2300      	movs	r3, #0
 8004966:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004972:	2110      	movs	r1, #16
 8004974:	20d4      	movs	r0, #212	; 0xd4
 8004976:	f7fe fe27 	bl	80035c8 <SENSOR_IO_Read>
 800497a:	4603      	mov	r3, r0
 800497c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800497e:	f107 0208 	add.w	r2, r7, #8
 8004982:	2306      	movs	r3, #6
 8004984:	2128      	movs	r1, #40	; 0x28
 8004986:	20d4      	movs	r0, #212	; 0xd4
 8004988:	f7fe fe3c 	bl	8003604 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800498c:	2300      	movs	r3, #0
 800498e:	77fb      	strb	r3, [r7, #31]
 8004990:	e01c      	b.n	80049cc <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8004992:	7ffb      	ldrb	r3, [r7, #31]
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	3301      	adds	r3, #1
 8004998:	3320      	adds	r3, #32
 800499a:	443b      	add	r3, r7
 800499c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	021b      	lsls	r3, r3, #8
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	7ffb      	ldrb	r3, [r7, #31]
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	3320      	adds	r3, #32
 80049ac:	443b      	add	r3, r7
 80049ae:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	4413      	add	r3, r2
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	7ffb      	ldrb	r3, [r7, #31]
 80049ba:	b212      	sxth	r2, r2
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	3320      	adds	r3, #32
 80049c0:	443b      	add	r3, r7
 80049c2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80049c6:	7ffb      	ldrb	r3, [r7, #31]
 80049c8:	3301      	adds	r3, #1
 80049ca:	77fb      	strb	r3, [r7, #31]
 80049cc:	7ffb      	ldrb	r3, [r7, #31]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d9df      	bls.n	8004992 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80049d2:	7dfb      	ldrb	r3, [r7, #23]
 80049d4:	f003 030c 	and.w	r3, r3, #12
 80049d8:	2b0c      	cmp	r3, #12
 80049da:	d829      	bhi.n	8004a30 <LSM6DSL_AccReadXYZ+0xd4>
 80049dc:	a201      	add	r2, pc, #4	; (adr r2, 80049e4 <LSM6DSL_AccReadXYZ+0x88>)
 80049de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e2:	bf00      	nop
 80049e4:	08004a19 	.word	0x08004a19
 80049e8:	08004a31 	.word	0x08004a31
 80049ec:	08004a31 	.word	0x08004a31
 80049f0:	08004a31 	.word	0x08004a31
 80049f4:	08004a2b 	.word	0x08004a2b
 80049f8:	08004a31 	.word	0x08004a31
 80049fc:	08004a31 	.word	0x08004a31
 8004a00:	08004a31 	.word	0x08004a31
 8004a04:	08004a1f 	.word	0x08004a1f
 8004a08:	08004a31 	.word	0x08004a31
 8004a0c:	08004a31 	.word	0x08004a31
 8004a10:	08004a31 	.word	0x08004a31
 8004a14:	08004a25 	.word	0x08004a25
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8004a18:	4b18      	ldr	r3, [pc, #96]	; (8004a7c <LSM6DSL_AccReadXYZ+0x120>)
 8004a1a:	61bb      	str	r3, [r7, #24]
    break;
 8004a1c:	e008      	b.n	8004a30 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8004a1e:	4b18      	ldr	r3, [pc, #96]	; (8004a80 <LSM6DSL_AccReadXYZ+0x124>)
 8004a20:	61bb      	str	r3, [r7, #24]
    break;
 8004a22:	e005      	b.n	8004a30 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8004a24:	4b17      	ldr	r3, [pc, #92]	; (8004a84 <LSM6DSL_AccReadXYZ+0x128>)
 8004a26:	61bb      	str	r3, [r7, #24]
    break;
 8004a28:	e002      	b.n	8004a30 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8004a2a:	4b17      	ldr	r3, [pc, #92]	; (8004a88 <LSM6DSL_AccReadXYZ+0x12c>)
 8004a2c:	61bb      	str	r3, [r7, #24]
    break;    
 8004a2e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8004a30:	2300      	movs	r3, #0
 8004a32:	77fb      	strb	r3, [r7, #31]
 8004a34:	e01a      	b.n	8004a6c <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8004a36:	7ffb      	ldrb	r3, [r7, #31]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	3320      	adds	r3, #32
 8004a3c:	443b      	add	r3, r7
 8004a3e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a52:	7ffb      	ldrb	r3, [r7, #31]
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	4413      	add	r3, r2
 8004a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a5e:	ee17 2a90 	vmov	r2, s15
 8004a62:	b212      	sxth	r2, r2
 8004a64:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8004a66:	7ffb      	ldrb	r3, [r7, #31]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	77fb      	strb	r3, [r7, #31]
 8004a6c:	7ffb      	ldrb	r3, [r7, #31]
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d9e1      	bls.n	8004a36 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8004a72:	bf00      	nop
 8004a74:	bf00      	nop
 8004a76:	3720      	adds	r7, #32
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	3d79db23 	.word	0x3d79db23
 8004a80:	3df9db23 	.word	0x3df9db23
 8004a84:	3e79db23 	.word	0x3e79db23
 8004a88:	3ef9db23 	.word	0x3ef9db23

08004a8c <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	4603      	mov	r3, r0
 8004a94:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004a96:	2300      	movs	r3, #0
 8004a98:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8004a9a:	2111      	movs	r1, #17
 8004a9c:	20d4      	movs	r0, #212	; 0xd4
 8004a9e:	f7fe fd93 	bl	80035c8 <SENSOR_IO_Read>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8004aaa:	7bbb      	ldrb	r3, [r7, #14]
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8004ab2:	7bba      	ldrb	r2, [r7, #14]
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8004aba:	7bbb      	ldrb	r3, [r7, #14]
 8004abc:	461a      	mov	r2, r3
 8004abe:	2111      	movs	r1, #17
 8004ac0:	20d4      	movs	r0, #212	; 0xd4
 8004ac2:	f7fe fd67 	bl	8003594 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8004ac6:	2112      	movs	r1, #18
 8004ac8:	20d4      	movs	r0, #212	; 0xd4
 8004aca:	f7fe fd7d 	bl	80035c8 <SENSOR_IO_Read>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8004ad2:	88fb      	ldrh	r3, [r7, #6]
 8004ad4:	0a1b      	lsrs	r3, r3, #8
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8004ada:	7bbb      	ldrb	r3, [r7, #14]
 8004adc:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8004ae0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8004ae2:	7bba      	ldrb	r2, [r7, #14]
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8004aea:	7bbb      	ldrb	r3, [r7, #14]
 8004aec:	461a      	mov	r2, r3
 8004aee:	2112      	movs	r1, #18
 8004af0:	20d4      	movs	r0, #212	; 0xd4
 8004af2:	f7fe fd4f 	bl	8003594 <SENSOR_IO_Write>
}
 8004af6:	bf00      	nop
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8004b04:	2300      	movs	r3, #0
 8004b06:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8004b08:	2111      	movs	r1, #17
 8004b0a:	20d4      	movs	r0, #212	; 0xd4
 8004b0c:	f7fe fd5c 	bl	80035c8 <SENSOR_IO_Read>
 8004b10:	4603      	mov	r3, r0
 8004b12:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	2111      	movs	r1, #17
 8004b22:	20d4      	movs	r0, #212	; 0xd4
 8004b24:	f7fe fd36 	bl	8003594 <SENSOR_IO_Write>
}
 8004b28:	bf00      	nop
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8004b34:	f7fe fd24 	bl	8003580 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8004b38:	210f      	movs	r1, #15
 8004b3a:	20d4      	movs	r0, #212	; 0xd4
 8004b3c:	f7fe fd44 	bl	80035c8 <SENSOR_IO_Read>
 8004b40:	4603      	mov	r3, r0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004b50:	2300      	movs	r3, #0
 8004b52:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8004b54:	2116      	movs	r1, #22
 8004b56:	20d4      	movs	r0, #212	; 0xd4
 8004b58:	f7fe fd36 	bl	80035c8 <SENSOR_IO_Read>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b66:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
 8004b70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b74:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	2116      	movs	r1, #22
 8004b7c:	20d4      	movs	r0, #212	; 0xd4
 8004b7e:	f7fe fd09 	bl	8003594 <SENSOR_IO_Write>
}
 8004b82:	bf00      	nop
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8004b94:	2300      	movs	r3, #0
 8004b96:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8004ba2:	2111      	movs	r1, #17
 8004ba4:	20d4      	movs	r0, #212	; 0xd4
 8004ba6:	f7fe fd0f 	bl	80035c8 <SENSOR_IO_Read>
 8004baa:	4603      	mov	r3, r0
 8004bac:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8004bae:	f107 0208 	add.w	r2, r7, #8
 8004bb2:	2306      	movs	r3, #6
 8004bb4:	2122      	movs	r1, #34	; 0x22
 8004bb6:	20d4      	movs	r0, #212	; 0xd4
 8004bb8:	f7fe fd24 	bl	8003604 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	77fb      	strb	r3, [r7, #31]
 8004bc0:	e01c      	b.n	8004bfc <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8004bc2:	7ffb      	ldrb	r3, [r7, #31]
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	3320      	adds	r3, #32
 8004bca:	443b      	add	r3, r7
 8004bcc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	021b      	lsls	r3, r3, #8
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	7ffb      	ldrb	r3, [r7, #31]
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	3320      	adds	r3, #32
 8004bdc:	443b      	add	r3, r7
 8004bde:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	4413      	add	r3, r2
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	7ffb      	ldrb	r3, [r7, #31]
 8004bea:	b212      	sxth	r2, r2
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	3320      	adds	r3, #32
 8004bf0:	443b      	add	r3, r7
 8004bf2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8004bf6:	7ffb      	ldrb	r3, [r7, #31]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	7ffb      	ldrb	r3, [r7, #31]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d9df      	bls.n	8004bc2 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	f003 030c 	and.w	r3, r3, #12
 8004c08:	2b0c      	cmp	r3, #12
 8004c0a:	d829      	bhi.n	8004c60 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8004c0c:	a201      	add	r2, pc, #4	; (adr r2, 8004c14 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8004c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c12:	bf00      	nop
 8004c14:	08004c49 	.word	0x08004c49
 8004c18:	08004c61 	.word	0x08004c61
 8004c1c:	08004c61 	.word	0x08004c61
 8004c20:	08004c61 	.word	0x08004c61
 8004c24:	08004c4f 	.word	0x08004c4f
 8004c28:	08004c61 	.word	0x08004c61
 8004c2c:	08004c61 	.word	0x08004c61
 8004c30:	08004c61 	.word	0x08004c61
 8004c34:	08004c55 	.word	0x08004c55
 8004c38:	08004c61 	.word	0x08004c61
 8004c3c:	08004c61 	.word	0x08004c61
 8004c40:	08004c61 	.word	0x08004c61
 8004c44:	08004c5b 	.word	0x08004c5b
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8004c48:	4b16      	ldr	r3, [pc, #88]	; (8004ca4 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8004c4a:	61bb      	str	r3, [r7, #24]
    break;
 8004c4c:	e008      	b.n	8004c60 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8004c4e:	4b16      	ldr	r3, [pc, #88]	; (8004ca8 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8004c50:	61bb      	str	r3, [r7, #24]
    break;
 8004c52:	e005      	b.n	8004c60 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8004c54:	4b15      	ldr	r3, [pc, #84]	; (8004cac <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8004c56:	61bb      	str	r3, [r7, #24]
    break;
 8004c58:	e002      	b.n	8004c60 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8004c5a:	4b15      	ldr	r3, [pc, #84]	; (8004cb0 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8004c5c:	61bb      	str	r3, [r7, #24]
    break;    
 8004c5e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8004c60:	2300      	movs	r3, #0
 8004c62:	77fb      	strb	r3, [r7, #31]
 8004c64:	e016      	b.n	8004c94 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8004c66:	7ffb      	ldrb	r3, [r7, #31]
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	3320      	adds	r3, #32
 8004c6c:	443b      	add	r3, r7
 8004c6e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8004c72:	ee07 3a90 	vmov	s15, r3
 8004c76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c7a:	7ffb      	ldrb	r3, [r7, #31]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	4413      	add	r3, r2
 8004c82:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8a:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8004c8e:	7ffb      	ldrb	r3, [r7, #31]
 8004c90:	3301      	adds	r3, #1
 8004c92:	77fb      	strb	r3, [r7, #31]
 8004c94:	7ffb      	ldrb	r3, [r7, #31]
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d9e5      	bls.n	8004c66 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 8004c9a:	bf00      	nop
 8004c9c:	bf00      	nop
 8004c9e:	3720      	adds	r7, #32
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	410c0000 	.word	0x410c0000
 8004ca8:	418c0000 	.word	0x418c0000
 8004cac:	420c0000 	.word	0x420c0000
 8004cb0:	428c0000 	.word	0x428c0000

08004cb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cbe:	2003      	movs	r0, #3
 8004cc0:	f000 f8dd 	bl	8004e7e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004cc4:	200f      	movs	r0, #15
 8004cc6:	f7fe f9cf 	bl	8003068 <HAL_InitTick>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	71fb      	strb	r3, [r7, #7]
 8004cd4:	e001      	b.n	8004cda <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004cd6:	f7fe f82f 	bl	8002d38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004cda:	79fb      	ldrb	r3, [r7, #7]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004ce8:	4b06      	ldr	r3, [pc, #24]	; (8004d04 <HAL_IncTick+0x20>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <HAL_IncTick+0x24>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	4a04      	ldr	r2, [pc, #16]	; (8004d08 <HAL_IncTick+0x24>)
 8004cf6:	6013      	str	r3, [r2, #0]
}
 8004cf8:	bf00      	nop
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	200000cc 	.word	0x200000cc
 8004d08:	20000854 	.word	0x20000854

08004d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8004d10:	4b03      	ldr	r3, [pc, #12]	; (8004d20 <HAL_GetTick+0x14>)
 8004d12:	681b      	ldr	r3, [r3, #0]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	20000854 	.word	0x20000854

08004d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d34:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <__NVIC_SetPriorityGrouping+0x44>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d40:	4013      	ands	r3, r2
 8004d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d56:	4a04      	ldr	r2, [pc, #16]	; (8004d68 <__NVIC_SetPriorityGrouping+0x44>)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	60d3      	str	r3, [r2, #12]
}
 8004d5c:	bf00      	nop
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	e000ed00 	.word	0xe000ed00

08004d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d70:	4b04      	ldr	r3, [pc, #16]	; (8004d84 <__NVIC_GetPriorityGrouping+0x18>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	0a1b      	lsrs	r3, r3, #8
 8004d76:	f003 0307 	and.w	r3, r3, #7
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	e000ed00 	.word	0xe000ed00

08004d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	4603      	mov	r3, r0
 8004d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	db0b      	blt.n	8004db2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d9a:	79fb      	ldrb	r3, [r7, #7]
 8004d9c:	f003 021f 	and.w	r2, r3, #31
 8004da0:	4907      	ldr	r1, [pc, #28]	; (8004dc0 <__NVIC_EnableIRQ+0x38>)
 8004da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	2001      	movs	r0, #1
 8004daa:	fa00 f202 	lsl.w	r2, r0, r2
 8004dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	e000e100 	.word	0xe000e100

08004dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	6039      	str	r1, [r7, #0]
 8004dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	db0a      	blt.n	8004dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	490c      	ldr	r1, [pc, #48]	; (8004e10 <__NVIC_SetPriority+0x4c>)
 8004dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de2:	0112      	lsls	r2, r2, #4
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	440b      	add	r3, r1
 8004de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dec:	e00a      	b.n	8004e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	4908      	ldr	r1, [pc, #32]	; (8004e14 <__NVIC_SetPriority+0x50>)
 8004df4:	79fb      	ldrb	r3, [r7, #7]
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	3b04      	subs	r3, #4
 8004dfc:	0112      	lsls	r2, r2, #4
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	440b      	add	r3, r1
 8004e02:	761a      	strb	r2, [r3, #24]
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	e000e100 	.word	0xe000e100
 8004e14:	e000ed00 	.word	0xe000ed00

08004e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b089      	sub	sp, #36	; 0x24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	f1c3 0307 	rsb	r3, r3, #7
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	bf28      	it	cs
 8004e36:	2304      	movcs	r3, #4
 8004e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	2b06      	cmp	r3, #6
 8004e40:	d902      	bls.n	8004e48 <NVIC_EncodePriority+0x30>
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	3b03      	subs	r3, #3
 8004e46:	e000      	b.n	8004e4a <NVIC_EncodePriority+0x32>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	43da      	mvns	r2, r3
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	401a      	ands	r2, r3
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6a:	43d9      	mvns	r1, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e70:	4313      	orrs	r3, r2
         );
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3724      	adds	r7, #36	; 0x24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b082      	sub	sp, #8
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7ff ff4c 	bl	8004d24 <__NVIC_SetPriorityGrouping>
}
 8004e8c:	bf00      	nop
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
 8004ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ea6:	f7ff ff61 	bl	8004d6c <__NVIC_GetPriorityGrouping>
 8004eaa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	68b9      	ldr	r1, [r7, #8]
 8004eb0:	6978      	ldr	r0, [r7, #20]
 8004eb2:	f7ff ffb1 	bl	8004e18 <NVIC_EncodePriority>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff ff80 	bl	8004dc4 <__NVIC_SetPriority>
}
 8004ec4:	bf00      	nop
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff ff54 	bl	8004d88 <__NVIC_EnableIRQ>
}
 8004ee0:	bf00      	nop
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ef6:	e166      	b.n	80051c6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	2101      	movs	r1, #1
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	fa01 f303 	lsl.w	r3, r1, r3
 8004f04:	4013      	ands	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 8158 	beq.w	80051c0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f003 0303 	and.w	r3, r3, #3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d005      	beq.n	8004f28 <HAL_GPIO_Init+0x40>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d130      	bne.n	8004f8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	2203      	movs	r2, #3
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f5e:	2201      	movs	r2, #1
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	43db      	mvns	r3, r3
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	091b      	lsrs	r3, r3, #4
 8004f74:	f003 0201 	and.w	r2, r3, #1
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d017      	beq.n	8004fc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	2203      	movs	r2, #3
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4013      	ands	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d123      	bne.n	800501a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	08da      	lsrs	r2, r3, #3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3208      	adds	r2, #8
 8004fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	220f      	movs	r2, #15
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	691a      	ldr	r2, [r3, #16]
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	08da      	lsrs	r2, r3, #3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3208      	adds	r2, #8
 8005014:	6939      	ldr	r1, [r7, #16]
 8005016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	2203      	movs	r2, #3
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	43db      	mvns	r3, r3
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4013      	ands	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f003 0203 	and.w	r2, r3, #3
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 80b2 	beq.w	80051c0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800505c:	4b61      	ldr	r3, [pc, #388]	; (80051e4 <HAL_GPIO_Init+0x2fc>)
 800505e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005060:	4a60      	ldr	r2, [pc, #384]	; (80051e4 <HAL_GPIO_Init+0x2fc>)
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	6613      	str	r3, [r2, #96]	; 0x60
 8005068:	4b5e      	ldr	r3, [pc, #376]	; (80051e4 <HAL_GPIO_Init+0x2fc>)
 800506a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	60bb      	str	r3, [r7, #8]
 8005072:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005074:	4a5c      	ldr	r2, [pc, #368]	; (80051e8 <HAL_GPIO_Init+0x300>)
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	089b      	lsrs	r3, r3, #2
 800507a:	3302      	adds	r3, #2
 800507c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005080:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	220f      	movs	r2, #15
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	43db      	mvns	r3, r3
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4013      	ands	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800509e:	d02b      	beq.n	80050f8 <HAL_GPIO_Init+0x210>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a52      	ldr	r2, [pc, #328]	; (80051ec <HAL_GPIO_Init+0x304>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d025      	beq.n	80050f4 <HAL_GPIO_Init+0x20c>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a51      	ldr	r2, [pc, #324]	; (80051f0 <HAL_GPIO_Init+0x308>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d01f      	beq.n	80050f0 <HAL_GPIO_Init+0x208>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a50      	ldr	r2, [pc, #320]	; (80051f4 <HAL_GPIO_Init+0x30c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d019      	beq.n	80050ec <HAL_GPIO_Init+0x204>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a4f      	ldr	r2, [pc, #316]	; (80051f8 <HAL_GPIO_Init+0x310>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d013      	beq.n	80050e8 <HAL_GPIO_Init+0x200>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a4e      	ldr	r2, [pc, #312]	; (80051fc <HAL_GPIO_Init+0x314>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00d      	beq.n	80050e4 <HAL_GPIO_Init+0x1fc>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a4d      	ldr	r2, [pc, #308]	; (8005200 <HAL_GPIO_Init+0x318>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d007      	beq.n	80050e0 <HAL_GPIO_Init+0x1f8>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a4c      	ldr	r2, [pc, #304]	; (8005204 <HAL_GPIO_Init+0x31c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d101      	bne.n	80050dc <HAL_GPIO_Init+0x1f4>
 80050d8:	2307      	movs	r3, #7
 80050da:	e00e      	b.n	80050fa <HAL_GPIO_Init+0x212>
 80050dc:	2308      	movs	r3, #8
 80050de:	e00c      	b.n	80050fa <HAL_GPIO_Init+0x212>
 80050e0:	2306      	movs	r3, #6
 80050e2:	e00a      	b.n	80050fa <HAL_GPIO_Init+0x212>
 80050e4:	2305      	movs	r3, #5
 80050e6:	e008      	b.n	80050fa <HAL_GPIO_Init+0x212>
 80050e8:	2304      	movs	r3, #4
 80050ea:	e006      	b.n	80050fa <HAL_GPIO_Init+0x212>
 80050ec:	2303      	movs	r3, #3
 80050ee:	e004      	b.n	80050fa <HAL_GPIO_Init+0x212>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e002      	b.n	80050fa <HAL_GPIO_Init+0x212>
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <HAL_GPIO_Init+0x212>
 80050f8:	2300      	movs	r3, #0
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	f002 0203 	and.w	r2, r2, #3
 8005100:	0092      	lsls	r2, r2, #2
 8005102:	4093      	lsls	r3, r2
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800510a:	4937      	ldr	r1, [pc, #220]	; (80051e8 <HAL_GPIO_Init+0x300>)
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	089b      	lsrs	r3, r3, #2
 8005110:	3302      	adds	r3, #2
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005118:	4b3b      	ldr	r3, [pc, #236]	; (8005208 <HAL_GPIO_Init+0x320>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	43db      	mvns	r3, r3
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4013      	ands	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800513c:	4a32      	ldr	r2, [pc, #200]	; (8005208 <HAL_GPIO_Init+0x320>)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005142:	4b31      	ldr	r3, [pc, #196]	; (8005208 <HAL_GPIO_Init+0x320>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	43db      	mvns	r3, r3
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4013      	ands	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005166:	4a28      	ldr	r2, [pc, #160]	; (8005208 <HAL_GPIO_Init+0x320>)
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800516c:	4b26      	ldr	r3, [pc, #152]	; (8005208 <HAL_GPIO_Init+0x320>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	43db      	mvns	r3, r3
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4013      	ands	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005190:	4a1d      	ldr	r2, [pc, #116]	; (8005208 <HAL_GPIO_Init+0x320>)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005196:	4b1c      	ldr	r3, [pc, #112]	; (8005208 <HAL_GPIO_Init+0x320>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	43db      	mvns	r3, r3
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4013      	ands	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80051ba:	4a13      	ldr	r2, [pc, #76]	; (8005208 <HAL_GPIO_Init+0x320>)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	3301      	adds	r3, #1
 80051c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	fa22 f303 	lsr.w	r3, r2, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f47f ae91 	bne.w	8004ef8 <HAL_GPIO_Init+0x10>
  }
}
 80051d6:	bf00      	nop
 80051d8:	bf00      	nop
 80051da:	371c      	adds	r7, #28
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	40021000 	.word	0x40021000
 80051e8:	40010000 	.word	0x40010000
 80051ec:	48000400 	.word	0x48000400
 80051f0:	48000800 	.word	0x48000800
 80051f4:	48000c00 	.word	0x48000c00
 80051f8:	48001000 	.word	0x48001000
 80051fc:	48001400 	.word	0x48001400
 8005200:	48001800 	.word	0x48001800
 8005204:	48001c00 	.word	0x48001c00
 8005208:	40010400 	.word	0x40010400

0800520c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005216:	2300      	movs	r3, #0
 8005218:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800521a:	e0c9      	b.n	80053b0 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800521c:	2201      	movs	r2, #1
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	4013      	ands	r3, r2
 8005228:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 80bc 	beq.w	80053aa <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005232:	4a66      	ldr	r2, [pc, #408]	; (80053cc <HAL_GPIO_DeInit+0x1c0>)
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	089b      	lsrs	r3, r3, #2
 8005238:	3302      	adds	r3, #2
 800523a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800523e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	220f      	movs	r2, #15
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4013      	ands	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800525a:	d02b      	beq.n	80052b4 <HAL_GPIO_DeInit+0xa8>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a5c      	ldr	r2, [pc, #368]	; (80053d0 <HAL_GPIO_DeInit+0x1c4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d025      	beq.n	80052b0 <HAL_GPIO_DeInit+0xa4>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a5b      	ldr	r2, [pc, #364]	; (80053d4 <HAL_GPIO_DeInit+0x1c8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d01f      	beq.n	80052ac <HAL_GPIO_DeInit+0xa0>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a5a      	ldr	r2, [pc, #360]	; (80053d8 <HAL_GPIO_DeInit+0x1cc>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d019      	beq.n	80052a8 <HAL_GPIO_DeInit+0x9c>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a59      	ldr	r2, [pc, #356]	; (80053dc <HAL_GPIO_DeInit+0x1d0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d013      	beq.n	80052a4 <HAL_GPIO_DeInit+0x98>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a58      	ldr	r2, [pc, #352]	; (80053e0 <HAL_GPIO_DeInit+0x1d4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00d      	beq.n	80052a0 <HAL_GPIO_DeInit+0x94>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a57      	ldr	r2, [pc, #348]	; (80053e4 <HAL_GPIO_DeInit+0x1d8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d007      	beq.n	800529c <HAL_GPIO_DeInit+0x90>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a56      	ldr	r2, [pc, #344]	; (80053e8 <HAL_GPIO_DeInit+0x1dc>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d101      	bne.n	8005298 <HAL_GPIO_DeInit+0x8c>
 8005294:	2307      	movs	r3, #7
 8005296:	e00e      	b.n	80052b6 <HAL_GPIO_DeInit+0xaa>
 8005298:	2308      	movs	r3, #8
 800529a:	e00c      	b.n	80052b6 <HAL_GPIO_DeInit+0xaa>
 800529c:	2306      	movs	r3, #6
 800529e:	e00a      	b.n	80052b6 <HAL_GPIO_DeInit+0xaa>
 80052a0:	2305      	movs	r3, #5
 80052a2:	e008      	b.n	80052b6 <HAL_GPIO_DeInit+0xaa>
 80052a4:	2304      	movs	r3, #4
 80052a6:	e006      	b.n	80052b6 <HAL_GPIO_DeInit+0xaa>
 80052a8:	2303      	movs	r3, #3
 80052aa:	e004      	b.n	80052b6 <HAL_GPIO_DeInit+0xaa>
 80052ac:	2302      	movs	r3, #2
 80052ae:	e002      	b.n	80052b6 <HAL_GPIO_DeInit+0xaa>
 80052b0:	2301      	movs	r3, #1
 80052b2:	e000      	b.n	80052b6 <HAL_GPIO_DeInit+0xaa>
 80052b4:	2300      	movs	r3, #0
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	f002 0203 	and.w	r2, r2, #3
 80052bc:	0092      	lsls	r2, r2, #2
 80052be:	4093      	lsls	r3, r2
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d132      	bne.n	800532c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80052c6:	4b49      	ldr	r3, [pc, #292]	; (80053ec <HAL_GPIO_DeInit+0x1e0>)
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	43db      	mvns	r3, r3
 80052ce:	4947      	ldr	r1, [pc, #284]	; (80053ec <HAL_GPIO_DeInit+0x1e0>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80052d4:	4b45      	ldr	r3, [pc, #276]	; (80053ec <HAL_GPIO_DeInit+0x1e0>)
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	43db      	mvns	r3, r3
 80052dc:	4943      	ldr	r1, [pc, #268]	; (80053ec <HAL_GPIO_DeInit+0x1e0>)
 80052de:	4013      	ands	r3, r2
 80052e0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80052e2:	4b42      	ldr	r3, [pc, #264]	; (80053ec <HAL_GPIO_DeInit+0x1e0>)
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	43db      	mvns	r3, r3
 80052ea:	4940      	ldr	r1, [pc, #256]	; (80053ec <HAL_GPIO_DeInit+0x1e0>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80052f0:	4b3e      	ldr	r3, [pc, #248]	; (80053ec <HAL_GPIO_DeInit+0x1e0>)
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	43db      	mvns	r3, r3
 80052f8:	493c      	ldr	r1, [pc, #240]	; (80053ec <HAL_GPIO_DeInit+0x1e0>)
 80052fa:	4013      	ands	r3, r2
 80052fc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f003 0303 	and.w	r3, r3, #3
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	220f      	movs	r2, #15
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800530e:	4a2f      	ldr	r2, [pc, #188]	; (80053cc <HAL_GPIO_DeInit+0x1c0>)
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	089b      	lsrs	r3, r3, #2
 8005314:	3302      	adds	r3, #2
 8005316:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	43da      	mvns	r2, r3
 800531e:	482b      	ldr	r0, [pc, #172]	; (80053cc <HAL_GPIO_DeInit+0x1c0>)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	089b      	lsrs	r3, r3, #2
 8005324:	400a      	ands	r2, r1
 8005326:	3302      	adds	r3, #2
 8005328:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	2103      	movs	r1, #3
 8005336:	fa01 f303 	lsl.w	r3, r1, r3
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	08da      	lsrs	r2, r3, #3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3208      	adds	r2, #8
 8005348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	220f      	movs	r2, #15
 8005356:	fa02 f303 	lsl.w	r3, r2, r3
 800535a:	43db      	mvns	r3, r3
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	08d2      	lsrs	r2, r2, #3
 8005360:	4019      	ands	r1, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3208      	adds	r2, #8
 8005366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689a      	ldr	r2, [r3, #8]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	2103      	movs	r1, #3
 8005374:	fa01 f303 	lsl.w	r3, r1, r3
 8005378:	43db      	mvns	r3, r3
 800537a:	401a      	ands	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	2101      	movs	r1, #1
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	fa01 f303 	lsl.w	r3, r1, r3
 800538c:	43db      	mvns	r3, r3
 800538e:	401a      	ands	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	2103      	movs	r1, #3
 800539e:	fa01 f303 	lsl.w	r3, r1, r3
 80053a2:	43db      	mvns	r3, r3
 80053a4:	401a      	ands	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	3301      	adds	r3, #1
 80053ae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	fa22 f303 	lsr.w	r3, r2, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f47f af2f 	bne.w	800521c <HAL_GPIO_DeInit+0x10>
  }
}
 80053be:	bf00      	nop
 80053c0:	bf00      	nop
 80053c2:	371c      	adds	r7, #28
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	40010000 	.word	0x40010000
 80053d0:	48000400 	.word	0x48000400
 80053d4:	48000800 	.word	0x48000800
 80053d8:	48000c00 	.word	0x48000c00
 80053dc:	48001000 	.word	0x48001000
 80053e0:	48001400 	.word	0x48001400
 80053e4:	48001800 	.word	0x48001800
 80053e8:	48001c00 	.word	0x48001c00
 80053ec:	40010400 	.word	0x40010400

080053f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691a      	ldr	r2, [r3, #16]
 8005400:	887b      	ldrh	r3, [r7, #2]
 8005402:	4013      	ands	r3, r2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005408:	2301      	movs	r3, #1
 800540a:	73fb      	strb	r3, [r7, #15]
 800540c:	e001      	b.n	8005412 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800540e:	2300      	movs	r3, #0
 8005410:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005412:	7bfb      	ldrb	r3, [r7, #15]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e08d      	b.n	800554e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7fd fc9e 	bl	8002d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2224      	movs	r2, #36	; 0x24
 8005450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0201 	bic.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005470:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005480:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d107      	bne.n	800549a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005496:	609a      	str	r2, [r3, #8]
 8005498:	e006      	b.n	80054a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80054a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d108      	bne.n	80054c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054be:	605a      	str	r2, [r3, #4]
 80054c0:	e007      	b.n	80054d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6812      	ldr	r2, [r2, #0]
 80054dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691a      	ldr	r2, [r3, #16]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	69d9      	ldr	r1, [r3, #28]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a1a      	ldr	r2, [r3, #32]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b082      	sub	sp, #8
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e021      	b.n	80055ac <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2224      	movs	r2, #36	; 0x24
 800556c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0201 	bic.w	r2, r2, #1
 800557e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7fd fc5f 	bl	8002e44 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af02      	add	r7, sp, #8
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	4608      	mov	r0, r1
 80055be:	4611      	mov	r1, r2
 80055c0:	461a      	mov	r2, r3
 80055c2:	4603      	mov	r3, r0
 80055c4:	817b      	strh	r3, [r7, #10]
 80055c6:	460b      	mov	r3, r1
 80055c8:	813b      	strh	r3, [r7, #8]
 80055ca:	4613      	mov	r3, r2
 80055cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b20      	cmp	r3, #32
 80055d8:	f040 80f9 	bne.w	80057ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <HAL_I2C_Mem_Write+0x34>
 80055e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d105      	bne.n	80055f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e0ed      	b.n	80057d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d101      	bne.n	8005602 <HAL_I2C_Mem_Write+0x4e>
 80055fe:	2302      	movs	r3, #2
 8005600:	e0e6      	b.n	80057d0 <HAL_I2C_Mem_Write+0x21c>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800560a:	f7ff fb7f 	bl	8004d0c <HAL_GetTick>
 800560e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	2319      	movs	r3, #25
 8005616:	2201      	movs	r2, #1
 8005618:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 fac3 	bl	8005ba8 <I2C_WaitOnFlagUntilTimeout>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e0d1      	b.n	80057d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2221      	movs	r2, #33	; 0x21
 8005630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2240      	movs	r2, #64	; 0x40
 8005638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6a3a      	ldr	r2, [r7, #32]
 8005646:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800564c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005654:	88f8      	ldrh	r0, [r7, #6]
 8005656:	893a      	ldrh	r2, [r7, #8]
 8005658:	8979      	ldrh	r1, [r7, #10]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	9301      	str	r3, [sp, #4]
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	4603      	mov	r3, r0
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 f9d3 	bl	8005a10 <I2C_RequestMemoryWrite>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d005      	beq.n	800567c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e0a9      	b.n	80057d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005680:	b29b      	uxth	r3, r3
 8005682:	2bff      	cmp	r3, #255	; 0xff
 8005684:	d90e      	bls.n	80056a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	22ff      	movs	r2, #255	; 0xff
 800568a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005690:	b2da      	uxtb	r2, r3
 8005692:	8979      	ldrh	r1, [r7, #10]
 8005694:	2300      	movs	r3, #0
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 fc3d 	bl	8005f1c <I2C_TransferConfig>
 80056a2:	e00f      	b.n	80056c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	8979      	ldrh	r1, [r7, #10]
 80056b6:	2300      	movs	r3, #0
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 fc2c 	bl	8005f1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 fabc 	bl	8005c46 <I2C_WaitOnTXISFlagUntilTimeout>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e07b      	b.n	80057d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	781a      	ldrb	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	1c5a      	adds	r2, r3, #1
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800570c:	b29b      	uxth	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d034      	beq.n	800577c <HAL_I2C_Mem_Write+0x1c8>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005716:	2b00      	cmp	r3, #0
 8005718:	d130      	bne.n	800577c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005720:	2200      	movs	r2, #0
 8005722:	2180      	movs	r1, #128	; 0x80
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 fa3f 	bl	8005ba8 <I2C_WaitOnFlagUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e04d      	b.n	80057d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005738:	b29b      	uxth	r3, r3
 800573a:	2bff      	cmp	r3, #255	; 0xff
 800573c:	d90e      	bls.n	800575c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	22ff      	movs	r2, #255	; 0xff
 8005742:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005748:	b2da      	uxtb	r2, r3
 800574a:	8979      	ldrh	r1, [r7, #10]
 800574c:	2300      	movs	r3, #0
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 fbe1 	bl	8005f1c <I2C_TransferConfig>
 800575a:	e00f      	b.n	800577c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576a:	b2da      	uxtb	r2, r3
 800576c:	8979      	ldrh	r1, [r7, #10]
 800576e:	2300      	movs	r3, #0
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 fbd0 	bl	8005f1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005780:	b29b      	uxth	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d19e      	bne.n	80056c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 faa2 	bl	8005cd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e01a      	b.n	80057d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2220      	movs	r2, #32
 80057a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6859      	ldr	r1, [r3, #4]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <HAL_I2C_Mem_Write+0x224>)
 80057ae:	400b      	ands	r3, r1
 80057b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	e000      	b.n	80057d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80057ce:	2302      	movs	r3, #2
  }
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	fe00e800 	.word	0xfe00e800

080057dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b088      	sub	sp, #32
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	4608      	mov	r0, r1
 80057e6:	4611      	mov	r1, r2
 80057e8:	461a      	mov	r2, r3
 80057ea:	4603      	mov	r3, r0
 80057ec:	817b      	strh	r3, [r7, #10]
 80057ee:	460b      	mov	r3, r1
 80057f0:	813b      	strh	r3, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b20      	cmp	r3, #32
 8005800:	f040 80fd 	bne.w	80059fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <HAL_I2C_Mem_Read+0x34>
 800580a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800580c:	2b00      	cmp	r3, #0
 800580e:	d105      	bne.n	800581c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005816:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e0f1      	b.n	8005a00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005822:	2b01      	cmp	r3, #1
 8005824:	d101      	bne.n	800582a <HAL_I2C_Mem_Read+0x4e>
 8005826:	2302      	movs	r3, #2
 8005828:	e0ea      	b.n	8005a00 <HAL_I2C_Mem_Read+0x224>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005832:	f7ff fa6b 	bl	8004d0c <HAL_GetTick>
 8005836:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	2319      	movs	r3, #25
 800583e:	2201      	movs	r2, #1
 8005840:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 f9af 	bl	8005ba8 <I2C_WaitOnFlagUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e0d5      	b.n	8005a00 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2222      	movs	r2, #34	; 0x22
 8005858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2240      	movs	r2, #64	; 0x40
 8005860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a3a      	ldr	r2, [r7, #32]
 800586e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005874:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800587c:	88f8      	ldrh	r0, [r7, #6]
 800587e:	893a      	ldrh	r2, [r7, #8]
 8005880:	8979      	ldrh	r1, [r7, #10]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	9301      	str	r3, [sp, #4]
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	4603      	mov	r3, r0
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 f913 	bl	8005ab8 <I2C_RequestMemoryRead>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e0ad      	b.n	8005a00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2bff      	cmp	r3, #255	; 0xff
 80058ac:	d90e      	bls.n	80058cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	22ff      	movs	r2, #255	; 0xff
 80058b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	8979      	ldrh	r1, [r7, #10]
 80058bc:	4b52      	ldr	r3, [pc, #328]	; (8005a08 <HAL_I2C_Mem_Read+0x22c>)
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 fb29 	bl	8005f1c <I2C_TransferConfig>
 80058ca:	e00f      	b.n	80058ec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	8979      	ldrh	r1, [r7, #10]
 80058de:	4b4a      	ldr	r3, [pc, #296]	; (8005a08 <HAL_I2C_Mem_Read+0x22c>)
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 fb18 	bl	8005f1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f2:	2200      	movs	r2, #0
 80058f4:	2104      	movs	r1, #4
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 f956 	bl	8005ba8 <I2C_WaitOnFlagUntilTimeout>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e07c      	b.n	8005a00 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005922:	3b01      	subs	r3, #1
 8005924:	b29a      	uxth	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800592e:	b29b      	uxth	r3, r3
 8005930:	3b01      	subs	r3, #1
 8005932:	b29a      	uxth	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d034      	beq.n	80059ac <HAL_I2C_Mem_Read+0x1d0>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005946:	2b00      	cmp	r3, #0
 8005948:	d130      	bne.n	80059ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005950:	2200      	movs	r2, #0
 8005952:	2180      	movs	r1, #128	; 0x80
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 f927 	bl	8005ba8 <I2C_WaitOnFlagUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e04d      	b.n	8005a00 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005968:	b29b      	uxth	r3, r3
 800596a:	2bff      	cmp	r3, #255	; 0xff
 800596c:	d90e      	bls.n	800598c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	22ff      	movs	r2, #255	; 0xff
 8005972:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005978:	b2da      	uxtb	r2, r3
 800597a:	8979      	ldrh	r1, [r7, #10]
 800597c:	2300      	movs	r3, #0
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 fac9 	bl	8005f1c <I2C_TransferConfig>
 800598a:	e00f      	b.n	80059ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800599a:	b2da      	uxtb	r2, r3
 800599c:	8979      	ldrh	r1, [r7, #10]
 800599e:	2300      	movs	r3, #0
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 fab8 	bl	8005f1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d19a      	bne.n	80058ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 f98a 	bl	8005cd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e01a      	b.n	8005a00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2220      	movs	r2, #32
 80059d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6859      	ldr	r1, [r3, #4]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	4b0b      	ldr	r3, [pc, #44]	; (8005a0c <HAL_I2C_Mem_Read+0x230>)
 80059de:	400b      	ands	r3, r1
 80059e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	e000      	b.n	8005a00 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80059fe:	2302      	movs	r3, #2
  }
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	80002400 	.word	0x80002400
 8005a0c:	fe00e800 	.word	0xfe00e800

08005a10 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af02      	add	r7, sp, #8
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	4608      	mov	r0, r1
 8005a1a:	4611      	mov	r1, r2
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4603      	mov	r3, r0
 8005a20:	817b      	strh	r3, [r7, #10]
 8005a22:	460b      	mov	r3, r1
 8005a24:	813b      	strh	r3, [r7, #8]
 8005a26:	4613      	mov	r3, r2
 8005a28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005a2a:	88fb      	ldrh	r3, [r7, #6]
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	8979      	ldrh	r1, [r7, #10]
 8005a30:	4b20      	ldr	r3, [pc, #128]	; (8005ab4 <I2C_RequestMemoryWrite+0xa4>)
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 fa6f 	bl	8005f1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a3e:	69fa      	ldr	r2, [r7, #28]
 8005a40:	69b9      	ldr	r1, [r7, #24]
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 f8ff 	bl	8005c46 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e02c      	b.n	8005aac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d105      	bne.n	8005a64 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a58:	893b      	ldrh	r3, [r7, #8]
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	629a      	str	r2, [r3, #40]	; 0x28
 8005a62:	e015      	b.n	8005a90 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a64:	893b      	ldrh	r3, [r7, #8]
 8005a66:	0a1b      	lsrs	r3, r3, #8
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	69b9      	ldr	r1, [r7, #24]
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 f8e5 	bl	8005c46 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e012      	b.n	8005aac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a86:	893b      	ldrh	r3, [r7, #8]
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	2200      	movs	r2, #0
 8005a98:	2180      	movs	r1, #128	; 0x80
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 f884 	bl	8005ba8 <I2C_WaitOnFlagUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	80002000 	.word	0x80002000

08005ab8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	4608      	mov	r0, r1
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	817b      	strh	r3, [r7, #10]
 8005aca:	460b      	mov	r3, r1
 8005acc:	813b      	strh	r3, [r7, #8]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005ad2:	88fb      	ldrh	r3, [r7, #6]
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	8979      	ldrh	r1, [r7, #10]
 8005ad8:	4b20      	ldr	r3, [pc, #128]	; (8005b5c <I2C_RequestMemoryRead+0xa4>)
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	2300      	movs	r3, #0
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 fa1c 	bl	8005f1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	69b9      	ldr	r1, [r7, #24]
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 f8ac 	bl	8005c46 <I2C_WaitOnTXISFlagUntilTimeout>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e02c      	b.n	8005b52 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d105      	bne.n	8005b0a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005afe:	893b      	ldrh	r3, [r7, #8]
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	629a      	str	r2, [r3, #40]	; 0x28
 8005b08:	e015      	b.n	8005b36 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b0a:	893b      	ldrh	r3, [r7, #8]
 8005b0c:	0a1b      	lsrs	r3, r3, #8
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b18:	69fa      	ldr	r2, [r7, #28]
 8005b1a:	69b9      	ldr	r1, [r7, #24]
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 f892 	bl	8005c46 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e012      	b.n	8005b52 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b2c:	893b      	ldrh	r3, [r7, #8]
 8005b2e:	b2da      	uxtb	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2140      	movs	r1, #64	; 0x40
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f831 	bl	8005ba8 <I2C_WaitOnFlagUntilTimeout>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e000      	b.n	8005b52 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	80002000 	.word	0x80002000

08005b60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d103      	bne.n	8005b7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d007      	beq.n	8005b9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	699a      	ldr	r2, [r3, #24]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0201 	orr.w	r2, r2, #1
 8005b9a:	619a      	str	r2, [r3, #24]
  }
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bb8:	e031      	b.n	8005c1e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bc0:	d02d      	beq.n	8005c1e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bc2:	f7ff f8a3 	bl	8004d0c <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d302      	bcc.n	8005bd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d122      	bne.n	8005c1e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	699a      	ldr	r2, [r3, #24]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	4013      	ands	r3, r2
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	bf0c      	ite	eq
 8005be8:	2301      	moveq	r3, #1
 8005bea:	2300      	movne	r3, #0
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	461a      	mov	r2, r3
 8005bf0:	79fb      	ldrb	r3, [r7, #7]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d113      	bne.n	8005c1e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfa:	f043 0220 	orr.w	r2, r3, #32
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e00f      	b.n	8005c3e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	699a      	ldr	r2, [r3, #24]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	4013      	ands	r3, r2
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	bf0c      	ite	eq
 8005c2e:	2301      	moveq	r3, #1
 8005c30:	2300      	movne	r3, #0
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	79fb      	ldrb	r3, [r7, #7]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d0be      	beq.n	8005bba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b084      	sub	sp, #16
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c52:	e033      	b.n	8005cbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	68b9      	ldr	r1, [r7, #8]
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 f87f 	bl	8005d5c <I2C_IsErrorOccurred>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e031      	b.n	8005ccc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c6e:	d025      	beq.n	8005cbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c70:	f7ff f84c 	bl	8004d0c <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d302      	bcc.n	8005c86 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d11a      	bne.n	8005cbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d013      	beq.n	8005cbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c98:	f043 0220 	orr.w	r2, r3, #32
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e007      	b.n	8005ccc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d1c4      	bne.n	8005c54 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ce0:	e02f      	b.n	8005d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 f838 	bl	8005d5c <I2C_IsErrorOccurred>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e02d      	b.n	8005d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf6:	f7ff f809 	bl	8004d0c <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d302      	bcc.n	8005d0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d11a      	bne.n	8005d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	f003 0320 	and.w	r3, r3, #32
 8005d16:	2b20      	cmp	r3, #32
 8005d18:	d013      	beq.n	8005d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1e:	f043 0220 	orr.w	r2, r3, #32
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e007      	b.n	8005d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	f003 0320 	and.w	r3, r3, #32
 8005d4c:	2b20      	cmp	r3, #32
 8005d4e:	d1c8      	bne.n	8005ce2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08a      	sub	sp, #40	; 0x28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005d76:	2300      	movs	r3, #0
 8005d78:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d068      	beq.n	8005e5a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2210      	movs	r2, #16
 8005d8e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d90:	e049      	b.n	8005e26 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d98:	d045      	beq.n	8005e26 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d9a:	f7fe ffb7 	bl	8004d0c <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d302      	bcc.n	8005db0 <I2C_IsErrorOccurred+0x54>
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d13a      	bne.n	8005e26 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005dc2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dd2:	d121      	bne.n	8005e18 <I2C_IsErrorOccurred+0xbc>
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dda:	d01d      	beq.n	8005e18 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005ddc:	7cfb      	ldrb	r3, [r7, #19]
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	d01a      	beq.n	8005e18 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005df0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005df2:	f7fe ff8b 	bl	8004d0c <HAL_GetTick>
 8005df6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005df8:	e00e      	b.n	8005e18 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005dfa:	f7fe ff87 	bl	8004d0c <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b19      	cmp	r3, #25
 8005e06:	d907      	bls.n	8005e18 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	f043 0320 	orr.w	r3, r3, #32
 8005e0e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005e16:	e006      	b.n	8005e26 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	f003 0320 	and.w	r3, r3, #32
 8005e22:	2b20      	cmp	r3, #32
 8005e24:	d1e9      	bne.n	8005dfa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	f003 0320 	and.w	r3, r3, #32
 8005e30:	2b20      	cmp	r3, #32
 8005e32:	d003      	beq.n	8005e3c <I2C_IsErrorOccurred+0xe0>
 8005e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0aa      	beq.n	8005d92 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d103      	bne.n	8005e4c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	f043 0304 	orr.w	r3, r3, #4
 8005e52:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00b      	beq.n	8005e84 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	f043 0301 	orr.w	r3, r3, #1
 8005e72:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00b      	beq.n	8005ea6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	f043 0308 	orr.w	r3, r3, #8
 8005e94:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00b      	beq.n	8005ec8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	f043 0302 	orr.w	r3, r3, #2
 8005eb6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ec0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01c      	beq.n	8005f0a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7ff fe45 	bl	8005b60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6859      	ldr	r1, [r3, #4]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	4b0d      	ldr	r3, [pc, #52]	; (8005f18 <I2C_IsErrorOccurred+0x1bc>)
 8005ee2:	400b      	ands	r3, r1
 8005ee4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	431a      	orrs	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3728      	adds	r7, #40	; 0x28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	fe00e800 	.word	0xfe00e800

08005f1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	607b      	str	r3, [r7, #4]
 8005f26:	460b      	mov	r3, r1
 8005f28:	817b      	strh	r3, [r7, #10]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f2e:	897b      	ldrh	r3, [r7, #10]
 8005f30:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f34:	7a7b      	ldrb	r3, [r7, #9]
 8005f36:	041b      	lsls	r3, r3, #16
 8005f38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f3c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f4a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	6a3b      	ldr	r3, [r7, #32]
 8005f54:	0d5b      	lsrs	r3, r3, #21
 8005f56:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005f5a:	4b08      	ldr	r3, [pc, #32]	; (8005f7c <I2C_TransferConfig+0x60>)
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	43db      	mvns	r3, r3
 8005f60:	ea02 0103 	and.w	r1, r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005f6e:	bf00      	nop
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	03ff63ff 	.word	0x03ff63ff

08005f80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b20      	cmp	r3, #32
 8005f94:	d138      	bne.n	8006008 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d101      	bne.n	8005fa4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e032      	b.n	800600a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2224      	movs	r2, #36	; 0x24
 8005fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0201 	bic.w	r2, r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6819      	ldr	r1, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0201 	orr.w	r2, r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	e000      	b.n	800600a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006008:	2302      	movs	r3, #2
  }
}
 800600a:	4618      	mov	r0, r3
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006016:	b480      	push	{r7}
 8006018:	b085      	sub	sp, #20
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b20      	cmp	r3, #32
 800602a:	d139      	bne.n	80060a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006036:	2302      	movs	r3, #2
 8006038:	e033      	b.n	80060a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2224      	movs	r2, #36	; 0x24
 8006046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 0201 	bic.w	r2, r2, #1
 8006058:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006068:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4313      	orrs	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0201 	orr.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2220      	movs	r2, #32
 8006090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	e000      	b.n	80060a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80060a0:	2302      	movs	r3, #2
  }
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
	...

080060b0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af02      	add	r7, sp, #8
 80060b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060b8:	2300      	movs	r3, #0
 80060ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80060bc:	f7fe fe26 	bl	8004d0c <HAL_GetTick>
 80060c0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d102      	bne.n	80060ce <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	73fb      	strb	r3, [r7, #15]
 80060cc:	e092      	b.n	80061f4 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f040 808b 	bne.w	80061f4 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7fc fed4 	bl	8002e8c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80060e4:	f241 3188 	movw	r1, #5000	; 0x1388
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fad0 	bl	800668e <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	4b42      	ldr	r3, [pc, #264]	; (8006200 <HAL_OSPI_Init+0x150>)
 80060f6:	4013      	ands	r3, r2
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	68d1      	ldr	r1, [r2, #12]
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6912      	ldr	r2, [r2, #16]
 8006100:	3a01      	subs	r2, #1
 8006102:	0412      	lsls	r2, r2, #16
 8006104:	4311      	orrs	r1, r2
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6952      	ldr	r2, [r2, #20]
 800610a:	3a01      	subs	r2, #1
 800610c:	0212      	lsls	r2, r2, #8
 800610e:	4311      	orrs	r1, r2
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006114:	4311      	orrs	r1, r2
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	69d2      	ldr	r2, [r2, #28]
 800611a:	4311      	orrs	r1, r2
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6812      	ldr	r2, [r2, #0]
 8006120:	430b      	orrs	r3, r1
 8006122:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	0412      	lsls	r2, r2, #16
 800612e:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	3b01      	subs	r3, #1
 8006140:	021a      	lsls	r2, r3, #8
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2200      	movs	r2, #0
 8006154:	2120      	movs	r1, #32
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fddc 	bl	8006d14 <OSPI_WaitFlagStateUntilTimeout>
 800615c:	4603      	mov	r3, r0
 800615e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006160:	7bfb      	ldrb	r3, [r7, #15]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d146      	bne.n	80061f4 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	1e5a      	subs	r2, r3, #1
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800619c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a8:	431a      	orrs	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0201 	orr.w	r2, r2, #1
 80061c2:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d107      	bne.n	80061dc <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689a      	ldr	r2, [r3, #8]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f042 0202 	orr.w	r2, r2, #2
 80061da:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061e4:	d103      	bne.n	80061ee <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	645a      	str	r2, [r3, #68]	; 0x44
 80061ec:	e002      	b.n	80061f4 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2202      	movs	r2, #2
 80061f2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	f8e0f8f4 	.word	0xf8e0f8f4

08006204 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d102      	bne.n	800621c <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	73fb      	strb	r3, [r7, #15]
 800621a:	e015      	b.n	8006248 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0201 	bic.w	r2, r2, #1
 800622a:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689a      	ldr	r2, [r3, #8]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0202 	bic.w	r2, r2, #2
 800623a:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7fc fe91 	bl	8002f64 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b08a      	sub	sp, #40	; 0x28
 8006256:	af02      	add	r7, sp, #8
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	60b9      	str	r1, [r7, #8]
 800625c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800625e:	f7fe fd55 	bl	8004d0c <HAL_GetTick>
 8006262:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006268:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626e:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	2b02      	cmp	r3, #2
 8006274:	d104      	bne.n	8006280 <HAL_OSPI_Command+0x2e>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800627e:	d10d      	bne.n	800629c <HAL_OSPI_Command+0x4a>
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2b14      	cmp	r3, #20
 8006284:	d103      	bne.n	800628e <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b02      	cmp	r3, #2
 800628c:	d006      	beq.n	800629c <HAL_OSPI_Command+0x4a>
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b24      	cmp	r3, #36	; 0x24
 8006292:	d153      	bne.n	800633c <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d14f      	bne.n	800633c <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	2200      	movs	r2, #0
 80062a4:	2120      	movs	r1, #32
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 fd34 	bl	8006d14 <OSPI_WaitFlagStateUntilTimeout>
 80062ac:	4603      	mov	r3, r0
 80062ae:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80062b0:	7ffb      	ldrb	r3, [r7, #31]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d148      	bne.n	8006348 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 fd60 	bl	8006d84 <OSPI_ConfigCmd>
 80062c4:	4603      	mov	r3, r0
 80062c6:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80062c8:	7ffb      	ldrb	r3, [r7, #31]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d13c      	bne.n	8006348 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10e      	bne.n	80062f4 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	2201      	movs	r2, #1
 80062de:	2102      	movs	r1, #2
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 fd17 	bl	8006d14 <OSPI_WaitFlagStateUntilTimeout>
 80062e6:	4603      	mov	r3, r0
 80062e8:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2202      	movs	r2, #2
 80062f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80062f2:	e029      	b.n	8006348 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d103      	bne.n	8006304 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2204      	movs	r2, #4
 8006300:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8006302:	e021      	b.n	8006348 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d10b      	bne.n	8006324 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006310:	2b24      	cmp	r3, #36	; 0x24
 8006312:	d103      	bne.n	800631c <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2204      	movs	r2, #4
 8006318:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 800631a:	e015      	b.n	8006348 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2214      	movs	r2, #20
 8006320:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8006322:	e011      	b.n	8006348 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006328:	2b14      	cmp	r3, #20
 800632a:	d103      	bne.n	8006334 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2204      	movs	r2, #4
 8006330:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8006332:	e009      	b.n	8006348 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2224      	movs	r2, #36	; 0x24
 8006338:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 800633a:	e005      	b.n	8006348 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2210      	movs	r2, #16
 8006344:	649a      	str	r2, [r3, #72]	; 0x48
 8006346:	e000      	b.n	800634a <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 8006348:	bf00      	nop
  }

  /* Return function status */
  return status;
 800634a:	7ffb      	ldrb	r3, [r7, #31]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3720      	adds	r7, #32
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b08a      	sub	sp, #40	; 0x28
 8006358:	af02      	add	r7, sp, #8
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006360:	f7fe fcd4 	bl	8004d0c <HAL_GetTick>
 8006364:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3350      	adds	r3, #80	; 0x50
 800636c:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d105      	bne.n	8006380 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2208      	movs	r2, #8
 800637c:	649a      	str	r2, [r3, #72]	; 0x48
 800637e:	e057      	b.n	8006430 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006384:	2b04      	cmp	r3, #4
 8006386:	d14e      	bne.n	8006426 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80063b0:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	2201      	movs	r2, #1
 80063ba:	2104      	movs	r1, #4
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 fca9 	bl	8006d14 <OSPI_WaitFlagStateUntilTimeout>
 80063c2:	4603      	mov	r3, r0
 80063c4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80063c6:	7ffb      	ldrb	r3, [r7, #31]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d113      	bne.n	80063f4 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d0:	781a      	ldrb	r2, [r3, #0]
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e4:	1e5a      	subs	r2, r3, #1
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1df      	bne.n	80063b2 <HAL_OSPI_Transmit+0x5e>
 80063f2:	e000      	b.n	80063f6 <HAL_OSPI_Transmit+0xa2>
          break;
 80063f4:	bf00      	nop

      if (status == HAL_OK)
 80063f6:	7ffb      	ldrb	r3, [r7, #31]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d119      	bne.n	8006430 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	2201      	movs	r2, #1
 8006404:	2102      	movs	r1, #2
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 fc84 	bl	8006d14 <OSPI_WaitFlagStateUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8006410:	7ffb      	ldrb	r3, [r7, #31]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10c      	bne.n	8006430 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2202      	movs	r2, #2
 800641c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2202      	movs	r2, #2
 8006422:	645a      	str	r2, [r3, #68]	; 0x44
 8006424:	e004      	b.n	8006430 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2210      	movs	r2, #16
 800642e:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8006430:	7ffb      	ldrb	r3, [r7, #31]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3720      	adds	r7, #32
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b08c      	sub	sp, #48	; 0x30
 800643e:	af02      	add	r7, sp, #8
 8006440:	60f8      	str	r0, [r7, #12]
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006446:	f7fe fc61 	bl	8004d0c <HAL_GetTick>
 800644a:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3350      	adds	r3, #80	; 0x50
 8006452:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800645a:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8006464:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d106      	bne.n	800647a <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2208      	movs	r2, #8
 8006476:	649a      	str	r2, [r3, #72]	; 0x48
 8006478:	e07c      	b.n	8006574 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647e:	2b04      	cmp	r3, #4
 8006480:	d172      	bne.n	8006568 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80064ae:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064b8:	d104      	bne.n	80064c4 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	649a      	str	r2, [r3, #72]	; 0x48
 80064c2:	e011      	b.n	80064e8 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80064cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d004      	beq.n	80064de <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	649a      	str	r2, [r3, #72]	; 0x48
 80064dc:	e004      	b.n	80064e8 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	2201      	movs	r2, #1
 80064f0:	2106      	movs	r1, #6
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 fc0e 	bl	8006d14 <OSPI_WaitFlagStateUntilTimeout>
 80064f8:	4603      	mov	r3, r0
 80064fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 80064fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006502:	2b00      	cmp	r3, #0
 8006504:	d114      	bne.n	8006530 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800650a:	69fa      	ldr	r2, [r7, #28]
 800650c:	7812      	ldrb	r2, [r2, #0]
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006520:	1e5a      	subs	r2, r3, #1
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1dc      	bne.n	80064e8 <HAL_OSPI_Receive+0xae>
 800652e:	e000      	b.n	8006532 <HAL_OSPI_Receive+0xf8>
          break;
 8006530:	bf00      	nop

      if (status == HAL_OK)
 8006532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006536:	2b00      	cmp	r3, #0
 8006538:	d11c      	bne.n	8006574 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	2201      	movs	r2, #1
 8006542:	2102      	movs	r1, #2
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 fbe5 	bl	8006d14 <OSPI_WaitFlagStateUntilTimeout>
 800654a:	4603      	mov	r3, r0
 800654c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8006550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10d      	bne.n	8006574 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2202      	movs	r2, #2
 800655e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2202      	movs	r2, #2
 8006564:	645a      	str	r2, [r3, #68]	; 0x44
 8006566:	e005      	b.n	8006574 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2210      	movs	r2, #16
 8006572:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8006574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006578:	4618      	mov	r0, r3
 800657a:	3728      	adds	r7, #40	; 0x28
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08a      	sub	sp, #40	; 0x28
 8006584:	af02      	add	r7, sp, #8
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800658c:	f7fe fbbe 	bl	8004d0c <HAL_GetTick>
 8006590:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006598:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80065a2:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a8:	2b04      	cmp	r3, #4
 80065aa:	d164      	bne.n	8006676 <HAL_OSPI_AutoPolling+0xf6>
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065b4:	d15f      	bne.n	8006676 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	2200      	movs	r2, #0
 80065be:	2120      	movs	r1, #32
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 fba7 	bl	8006d14 <OSPI_WaitFlagStateUntilTimeout>
 80065c6:	4603      	mov	r3, r0
 80065c8:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80065ca:	7ffb      	ldrb	r3, [r7, #31]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d158      	bne.n	8006682 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	6812      	ldr	r2, [r2, #0]
 80065d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	6852      	ldr	r2, [r2, #4]
 80065e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	6912      	ldr	r2, [r2, #16]
 80065f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	6899      	ldr	r1, [r3, #8]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	430b      	orrs	r3, r1
 8006608:	431a      	orrs	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006612:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800661c:	d104      	bne.n	8006628 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	649a      	str	r2, [r3, #72]	; 0x48
 8006626:	e011      	b.n	800664c <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006634:	2b00      	cmp	r3, #0
 8006636:	d004      	beq.n	8006642 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	649a      	str	r2, [r3, #72]	; 0x48
 8006640:	e004      	b.n	800664c <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	2201      	movs	r2, #1
 8006654:	2108      	movs	r1, #8
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 fb5c 	bl	8006d14 <OSPI_WaitFlagStateUntilTimeout>
 800665c:	4603      	mov	r3, r0
 800665e:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8006660:	7ffb      	ldrb	r3, [r7, #31]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10d      	bne.n	8006682 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2208      	movs	r2, #8
 800666c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2202      	movs	r2, #2
 8006672:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8006674:	e005      	b.n	8006682 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2210      	movs	r2, #16
 800667e:	649a      	str	r2, [r3, #72]	; 0x48
 8006680:	e000      	b.n	8006684 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8006682:	bf00      	nop
  }

  /* Return function status */
  return status;
 8006684:	7ffb      	ldrb	r3, [r7, #31]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3720      	adds	r7, #32
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b092      	sub	sp, #72	; 0x48
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a08      	ldr	r2, [pc, #32]	; (80066ec <HAL_OSPIM_Config+0x40>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d105      	bne.n	80066da <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80066d2:	2301      	movs	r3, #1
 80066d4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80066d8:	e004      	b.n	80066e4 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80066da:	2301      	movs	r3, #1
 80066dc:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80066de:	2300      	movs	r3, #0
 80066e0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80066e4:	2300      	movs	r3, #0
 80066e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80066ea:	e01f      	b.n	800672c <HAL_OSPIM_Config+0x80>
 80066ec:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80066f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066f4:	3301      	adds	r3, #1
 80066f6:	b2d8      	uxtb	r0, r3
 80066f8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80066fc:	f107 0114 	add.w	r1, r7, #20
 8006700:	4613      	mov	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	440b      	add	r3, r1
 800670a:	4619      	mov	r1, r3
 800670c:	f000 fc9c 	bl	8007048 <OSPIM_GetConfig>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d005      	beq.n	8006722 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2208      	movs	r2, #8
 8006720:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006722:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006726:	3301      	adds	r3, #1
 8006728:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800672c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006730:	2b01      	cmp	r3, #1
 8006732:	d9dd      	bls.n	80066f0 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8006734:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006738:	2b00      	cmp	r3, #0
 800673a:	f040 82de 	bne.w	8006cfa <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800673e:	4bc6      	ldr	r3, [pc, #792]	; (8006a58 <HAL_OSPIM_Config+0x3ac>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00b      	beq.n	8006762 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800674a:	4bc3      	ldr	r3, [pc, #780]	; (8006a58 <HAL_OSPIM_Config+0x3ac>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4ac2      	ldr	r2, [pc, #776]	; (8006a58 <HAL_OSPIM_Config+0x3ac>)
 8006750:	f023 0301 	bic.w	r3, r3, #1
 8006754:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8006756:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800675a:	f043 0301 	orr.w	r3, r3, #1
 800675e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8006762:	4bbe      	ldr	r3, [pc, #760]	; (8006a5c <HAL_OSPIM_Config+0x3b0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00b      	beq.n	8006786 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800676e:	4bbb      	ldr	r3, [pc, #748]	; (8006a5c <HAL_OSPIM_Config+0x3b0>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4aba      	ldr	r2, [pc, #744]	; (8006a5c <HAL_OSPIM_Config+0x3b0>)
 8006774:	f023 0301 	bic.w	r3, r3, #1
 8006778:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800677a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800677e:	f043 0302 	orr.w	r3, r3, #2
 8006782:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006786:	49b6      	ldr	r1, [pc, #728]	; (8006a60 <HAL_OSPIM_Config+0x3b4>)
 8006788:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800678a:	4613      	mov	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	3348      	adds	r3, #72	; 0x48
 8006794:	443b      	add	r3, r7
 8006796:	3b2c      	subs	r3, #44	; 0x2c
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3b01      	subs	r3, #1
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	440b      	add	r3, r1
 80067a0:	6859      	ldr	r1, [r3, #4]
 80067a2:	48af      	ldr	r0, [pc, #700]	; (8006a60 <HAL_OSPIM_Config+0x3b4>)
 80067a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067a6:	4613      	mov	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	3348      	adds	r3, #72	; 0x48
 80067b0:	443b      	add	r3, r7
 80067b2:	3b2c      	subs	r3, #44	; 0x2c
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4403      	add	r3, r0
 80067c0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80067c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067c4:	4613      	mov	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	3348      	adds	r3, #72	; 0x48
 80067ce:	443b      	add	r3, r7
 80067d0:	3b34      	subs	r3, #52	; 0x34
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 80a1 	beq.w	800691c <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80067da:	49a1      	ldr	r1, [pc, #644]	; (8006a60 <HAL_OSPIM_Config+0x3b4>)
 80067dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067de:	4613      	mov	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	3348      	adds	r3, #72	; 0x48
 80067e8:	443b      	add	r3, r7
 80067ea:	3b34      	subs	r3, #52	; 0x34
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	440b      	add	r3, r1
 80067f4:	6859      	ldr	r1, [r3, #4]
 80067f6:	489a      	ldr	r0, [pc, #616]	; (8006a60 <HAL_OSPIM_Config+0x3b4>)
 80067f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067fa:	4613      	mov	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	3348      	adds	r3, #72	; 0x48
 8006804:	443b      	add	r3, r7
 8006806:	3b34      	subs	r3, #52	; 0x34
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3b01      	subs	r3, #1
 800680c:	f021 0201 	bic.w	r2, r1, #1
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4403      	add	r3, r0
 8006814:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8006816:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	3348      	adds	r3, #72	; 0x48
 8006822:	443b      	add	r3, r7
 8006824:	3b30      	subs	r3, #48	; 0x30
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d01d      	beq.n	8006868 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800682c:	498c      	ldr	r1, [pc, #560]	; (8006a60 <HAL_OSPIM_Config+0x3b4>)
 800682e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006830:	4613      	mov	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	3348      	adds	r3, #72	; 0x48
 800683a:	443b      	add	r3, r7
 800683c:	3b30      	subs	r3, #48	; 0x30
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3b01      	subs	r3, #1
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	440b      	add	r3, r1
 8006846:	6859      	ldr	r1, [r3, #4]
 8006848:	4885      	ldr	r0, [pc, #532]	; (8006a60 <HAL_OSPIM_Config+0x3b4>)
 800684a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800684c:	4613      	mov	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	3348      	adds	r3, #72	; 0x48
 8006856:	443b      	add	r3, r7
 8006858:	3b30      	subs	r3, #48	; 0x30
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3b01      	subs	r3, #1
 800685e:	f021 0210 	bic.w	r2, r1, #16
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4403      	add	r3, r0
 8006866:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006868:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800686a:	4613      	mov	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	3348      	adds	r3, #72	; 0x48
 8006874:	443b      	add	r3, r7
 8006876:	3b28      	subs	r3, #40	; 0x28
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d021      	beq.n	80068c2 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800687e:	4978      	ldr	r1, [pc, #480]	; (8006a60 <HAL_OSPIM_Config+0x3b4>)
 8006880:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006882:	4613      	mov	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	3348      	adds	r3, #72	; 0x48
 800688c:	443b      	add	r3, r7
 800688e:	3b28      	subs	r3, #40	; 0x28
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3b01      	subs	r3, #1
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	440b      	add	r3, r1
 800689c:	6859      	ldr	r1, [r3, #4]
 800689e:	4870      	ldr	r0, [pc, #448]	; (8006a60 <HAL_OSPIM_Config+0x3b4>)
 80068a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068a2:	4613      	mov	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	3348      	adds	r3, #72	; 0x48
 80068ac:	443b      	add	r3, r7
 80068ae:	3b28      	subs	r3, #40	; 0x28
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3b01      	subs	r3, #1
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4403      	add	r3, r0
 80068c0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80068c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068c4:	4613      	mov	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	3348      	adds	r3, #72	; 0x48
 80068ce:	443b      	add	r3, r7
 80068d0:	3b24      	subs	r3, #36	; 0x24
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d021      	beq.n	800691c <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80068d8:	4961      	ldr	r1, [pc, #388]	; (8006a60 <HAL_OSPIM_Config+0x3b4>)
 80068da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068dc:	4613      	mov	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	3348      	adds	r3, #72	; 0x48
 80068e6:	443b      	add	r3, r7
 80068e8:	3b24      	subs	r3, #36	; 0x24
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	6859      	ldr	r1, [r3, #4]
 80068f8:	4859      	ldr	r0, [pc, #356]	; (8006a60 <HAL_OSPIM_Config+0x3b4>)
 80068fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	3348      	adds	r3, #72	; 0x48
 8006906:	443b      	add	r3, r7
 8006908:	3b24      	subs	r3, #36	; 0x24
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3b01      	subs	r3, #1
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4403      	add	r3, r0
 800691a:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	6819      	ldr	r1, [r3, #0]
 8006920:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006924:	4613      	mov	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	3348      	adds	r3, #72	; 0x48
 800692e:	443b      	add	r3, r7
 8006930:	3b34      	subs	r3, #52	; 0x34
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4299      	cmp	r1, r3
 8006936:	d038      	beq.n	80069aa <HAL_OSPIM_Config+0x2fe>
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	6859      	ldr	r1, [r3, #4]
 800693c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	3348      	adds	r3, #72	; 0x48
 800694a:	443b      	add	r3, r7
 800694c:	3b30      	subs	r3, #48	; 0x30
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4299      	cmp	r1, r3
 8006952:	d02a      	beq.n	80069aa <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	6899      	ldr	r1, [r3, #8]
 8006958:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800695c:	4613      	mov	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	3348      	adds	r3, #72	; 0x48
 8006966:	443b      	add	r3, r7
 8006968:	3b2c      	subs	r3, #44	; 0x2c
 800696a:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800696c:	4299      	cmp	r1, r3
 800696e:	d01c      	beq.n	80069aa <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	68d9      	ldr	r1, [r3, #12]
 8006974:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006978:	4613      	mov	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	3348      	adds	r3, #72	; 0x48
 8006982:	443b      	add	r3, r7
 8006984:	3b28      	subs	r3, #40	; 0x28
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4299      	cmp	r1, r3
 800698a:	d00e      	beq.n	80069aa <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	6919      	ldr	r1, [r3, #16]
 8006990:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006994:	4613      	mov	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	3348      	adds	r3, #72	; 0x48
 800699e:	443b      	add	r3, r7
 80069a0:	3b24      	subs	r3, #36	; 0x24
 80069a2:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80069a4:	4299      	cmp	r1, r3
 80069a6:	f040 80d3 	bne.w	8006b50 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80069aa:	492d      	ldr	r1, [pc, #180]	; (8006a60 <HAL_OSPIM_Config+0x3b4>)
 80069ac:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80069b0:	4613      	mov	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	3348      	adds	r3, #72	; 0x48
 80069ba:	443b      	add	r3, r7
 80069bc:	3b34      	subs	r3, #52	; 0x34
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3b01      	subs	r3, #1
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	440b      	add	r3, r1
 80069c6:	6859      	ldr	r1, [r3, #4]
 80069c8:	4825      	ldr	r0, [pc, #148]	; (8006a60 <HAL_OSPIM_Config+0x3b4>)
 80069ca:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	3348      	adds	r3, #72	; 0x48
 80069d8:	443b      	add	r3, r7
 80069da:	3b34      	subs	r3, #52	; 0x34
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3b01      	subs	r3, #1
 80069e0:	f021 0201 	bic.w	r2, r1, #1
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4403      	add	r3, r0
 80069e8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80069ea:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	3348      	adds	r3, #72	; 0x48
 80069f8:	443b      	add	r3, r7
 80069fa:	3b30      	subs	r3, #48	; 0x30
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d01f      	beq.n	8006a42 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006a02:	4917      	ldr	r1, [pc, #92]	; (8006a60 <HAL_OSPIM_Config+0x3b4>)
 8006a04:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006a08:	4613      	mov	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	3348      	adds	r3, #72	; 0x48
 8006a12:	443b      	add	r3, r7
 8006a14:	3b30      	subs	r3, #48	; 0x30
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	440b      	add	r3, r1
 8006a1e:	6859      	ldr	r1, [r3, #4]
 8006a20:	480f      	ldr	r0, [pc, #60]	; (8006a60 <HAL_OSPIM_Config+0x3b4>)
 8006a22:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	3348      	adds	r3, #72	; 0x48
 8006a30:	443b      	add	r3, r7
 8006a32:	3b30      	subs	r3, #48	; 0x30
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	f021 0210 	bic.w	r2, r1, #16
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4403      	add	r3, r0
 8006a40:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006a42:	4907      	ldr	r1, [pc, #28]	; (8006a60 <HAL_OSPIM_Config+0x3b4>)
 8006a44:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006a48:	4613      	mov	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	3348      	adds	r3, #72	; 0x48
 8006a52:	443b      	add	r3, r7
 8006a54:	3b2c      	subs	r3, #44	; 0x2c
 8006a56:	e005      	b.n	8006a64 <HAL_OSPIM_Config+0x3b8>
 8006a58:	a0001000 	.word	0xa0001000
 8006a5c:	a0001400 	.word	0xa0001400
 8006a60:	50061c00 	.word	0x50061c00
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3b01      	subs	r3, #1
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	440b      	add	r3, r1
 8006a6c:	6859      	ldr	r1, [r3, #4]
 8006a6e:	48a6      	ldr	r0, [pc, #664]	; (8006d08 <HAL_OSPIM_Config+0x65c>)
 8006a70:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006a74:	4613      	mov	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	3348      	adds	r3, #72	; 0x48
 8006a7e:	443b      	add	r3, r7
 8006a80:	3b2c      	subs	r3, #44	; 0x2c
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3b01      	subs	r3, #1
 8006a86:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4403      	add	r3, r0
 8006a8e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006a90:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006a94:	4613      	mov	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	3348      	adds	r3, #72	; 0x48
 8006a9e:	443b      	add	r3, r7
 8006aa0:	3b28      	subs	r3, #40	; 0x28
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d023      	beq.n	8006af0 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006aa8:	4997      	ldr	r1, [pc, #604]	; (8006d08 <HAL_OSPIM_Config+0x65c>)
 8006aaa:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006aae:	4613      	mov	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	3348      	adds	r3, #72	; 0x48
 8006ab8:	443b      	add	r3, r7
 8006aba:	3b28      	subs	r3, #40	; 0x28
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	440b      	add	r3, r1
 8006ac8:	6859      	ldr	r1, [r3, #4]
 8006aca:	488f      	ldr	r0, [pc, #572]	; (8006d08 <HAL_OSPIM_Config+0x65c>)
 8006acc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	3348      	adds	r3, #72	; 0x48
 8006ada:	443b      	add	r3, r7
 8006adc:	3b28      	subs	r3, #40	; 0x28
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4403      	add	r3, r0
 8006aee:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006af0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006af4:	4613      	mov	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	3348      	adds	r3, #72	; 0x48
 8006afe:	443b      	add	r3, r7
 8006b00:	3b24      	subs	r3, #36	; 0x24
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d023      	beq.n	8006b50 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006b08:	497f      	ldr	r1, [pc, #508]	; (8006d08 <HAL_OSPIM_Config+0x65c>)
 8006b0a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006b0e:	4613      	mov	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	3348      	adds	r3, #72	; 0x48
 8006b18:	443b      	add	r3, r7
 8006b1a:	3b24      	subs	r3, #36	; 0x24
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	440b      	add	r3, r1
 8006b28:	6859      	ldr	r1, [r3, #4]
 8006b2a:	4877      	ldr	r0, [pc, #476]	; (8006d08 <HAL_OSPIM_Config+0x65c>)
 8006b2c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006b30:	4613      	mov	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	3348      	adds	r3, #72	; 0x48
 8006b3a:	443b      	add	r3, r7
 8006b3c:	3b24      	subs	r3, #36	; 0x24
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3b01      	subs	r3, #1
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4403      	add	r3, r0
 8006b4e:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006b50:	4a6d      	ldr	r2, [pc, #436]	; (8006d08 <HAL_OSPIM_Config+0x65c>)
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b64:	025b      	lsls	r3, r3, #9
 8006b66:	431a      	orrs	r2, r3
 8006b68:	4967      	ldr	r1, [pc, #412]	; (8006d08 <HAL_OSPIM_Config+0x65c>)
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	440b      	add	r3, r1
 8006b78:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8006b7a:	4a63      	ldr	r2, [pc, #396]	; (8006d08 <HAL_OSPIM_Config+0x65c>)
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3b01      	subs	r3, #1
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f023 0203 	bic.w	r2, r3, #3
 8006b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b8e:	005b      	lsls	r3, r3, #1
 8006b90:	431a      	orrs	r2, r3
 8006b92:	495d      	ldr	r1, [pc, #372]	; (8006d08 <HAL_OSPIM_Config+0x65c>)
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	f042 0201 	orr.w	r2, r2, #1
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	440b      	add	r3, r1
 8006ba2:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d014      	beq.n	8006bd6 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8006bac:	4a56      	ldr	r2, [pc, #344]	; (8006d08 <HAL_OSPIM_Config+0x65c>)
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bc0:	015b      	lsls	r3, r3, #5
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	4950      	ldr	r1, [pc, #320]	; (8006d08 <HAL_OSPIM_Config+0x65c>)
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	f042 0210 	orr.w	r2, r2, #16
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	440b      	add	r3, r1
 8006bd4:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d019      	beq.n	8006c16 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006be2:	4a49      	ldr	r2, [pc, #292]	; (8006d08 <HAL_OSPIM_Config+0x65c>)
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	3b01      	subs	r3, #1
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bfa:	049b      	lsls	r3, r3, #18
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	4942      	ldr	r1, [pc, #264]	; (8006d08 <HAL_OSPIM_Config+0x65c>)
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	3b01      	subs	r3, #1
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	440b      	add	r3, r1
 8006c12:	605a      	str	r2, [r3, #4]
 8006c14:	e01c      	b.n	8006c50 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d018      	beq.n	8006c50 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006c1e:	4a3a      	ldr	r2, [pc, #232]	; (8006d08 <HAL_OSPIM_Config+0x65c>)
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c36:	069b      	lsls	r3, r3, #26
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	4933      	ldr	r1, [pc, #204]	; (8006d08 <HAL_OSPIM_Config+0x65c>)
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	440b      	add	r3, r1
 8006c4e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d019      	beq.n	8006c90 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006c5c:	4a2a      	ldr	r2, [pc, #168]	; (8006d08 <HAL_OSPIM_Config+0x65c>)
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c74:	049b      	lsls	r3, r3, #18
 8006c76:	431a      	orrs	r2, r3
 8006c78:	4923      	ldr	r1, [pc, #140]	; (8006d08 <HAL_OSPIM_Config+0x65c>)
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	440b      	add	r3, r1
 8006c8c:	605a      	str	r2, [r3, #4]
 8006c8e:	e01c      	b.n	8006cca <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d018      	beq.n	8006cca <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006c98:	4a1b      	ldr	r2, [pc, #108]	; (8006d08 <HAL_OSPIM_Config+0x65c>)
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cb0:	069b      	lsls	r3, r3, #26
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	4914      	ldr	r1, [pc, #80]	; (8006d08 <HAL_OSPIM_Config+0x65c>)
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	440b      	add	r3, r1
 8006cc8:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8006cca:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d005      	beq.n	8006ce2 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006cd6:	4b0d      	ldr	r3, [pc, #52]	; (8006d0c <HAL_OSPIM_Config+0x660>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a0c      	ldr	r2, [pc, #48]	; (8006d0c <HAL_OSPIM_Config+0x660>)
 8006cdc:	f043 0301 	orr.w	r3, r3, #1
 8006ce0:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8006ce2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d005      	beq.n	8006cfa <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006cee:	4b08      	ldr	r3, [pc, #32]	; (8006d10 <HAL_OSPIM_Config+0x664>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a07      	ldr	r2, [pc, #28]	; (8006d10 <HAL_OSPIM_Config+0x664>)
 8006cf4:	f043 0301 	orr.w	r3, r3, #1
 8006cf8:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8006cfa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3748      	adds	r7, #72	; 0x48
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	50061c00 	.word	0x50061c00
 8006d0c:	a0001000 	.word	0xa0001000
 8006d10:	a0001400 	.word	0xa0001400

08006d14 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	603b      	str	r3, [r7, #0]
 8006d20:	4613      	mov	r3, r2
 8006d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006d24:	e01a      	b.n	8006d5c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d2c:	d016      	beq.n	8006d5c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d2e:	f7fd ffed 	bl	8004d0c <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d302      	bcc.n	8006d44 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10b      	bne.n	8006d5c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d4a:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d50:	f043 0201 	orr.w	r2, r3, #1
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e00e      	b.n	8006d7a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6a1a      	ldr	r2, [r3, #32]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	4013      	ands	r3, r2
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	bf14      	ite	ne
 8006d6a:	2301      	movne	r3, #1
 8006d6c:	2300      	moveq	r3, #0
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	461a      	mov	r2, r3
 8006d72:	79fb      	ldrb	r3, [r7, #7]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d1d6      	bne.n	8006d26 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b089      	sub	sp, #36	; 0x24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006da0:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10a      	bne.n	8006dc0 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d114      	bne.n	8006df2 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006dd0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006dda:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006de4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8006dee:	60fb      	str	r3, [r7, #12]
 8006df0:	e013      	b.n	8006e1a <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006dfa:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8006e04:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8006e0e:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006e18:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e22:	431a      	orrs	r2, r3
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d012      	beq.n	8006e56 <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e48:	4319      	orrs	r1, r3
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4e:	430b      	orrs	r3, r1
 8006e50:	431a      	orrs	r2, r3
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f023 021f 	bic.w	r2, r3, #31
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e62:	431a      	orrs	r2, r3
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d009      	beq.n	8006e84 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d105      	bne.n	8006e84 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3a01      	subs	r2, #1
 8006e82:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 8099 	beq.w	8006fc0 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	69db      	ldr	r3, [r3, #28]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d055      	beq.n	8006f42 <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d01e      	beq.n	8006edc <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	4b68      	ldr	r3, [pc, #416]	; (8007044 <OSPI_ConfigCmd+0x2c0>)
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	68d1      	ldr	r1, [r2, #12]
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	6952      	ldr	r2, [r2, #20]
 8006eae:	4311      	orrs	r1, r2
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	6912      	ldr	r2, [r2, #16]
 8006eb4:	4311      	orrs	r1, r2
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	69d2      	ldr	r2, [r2, #28]
 8006eba:	4311      	orrs	r1, r2
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ec0:	4311      	orrs	r1, r2
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	6a12      	ldr	r2, [r2, #32]
 8006ec6:	4311      	orrs	r1, r2
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ecc:	4311      	orrs	r1, r2
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	601a      	str	r2, [r3, #0]
 8006eda:	e028      	b.n	8006f2e <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006ee4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	68d1      	ldr	r1, [r2, #12]
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	6952      	ldr	r2, [r2, #20]
 8006ef0:	4311      	orrs	r1, r2
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	6912      	ldr	r2, [r2, #16]
 8006ef6:	4311      	orrs	r1, r2
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	69d2      	ldr	r2, [r2, #28]
 8006efc:	4311      	orrs	r1, r2
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f02:	4311      	orrs	r1, r2
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	6a12      	ldr	r2, [r2, #32]
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f18:	d109      	bne.n	8006f2e <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006f1e:	2b08      	cmp	r3, #8
 8006f20:	d105      	bne.n	8006f2e <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	689a      	ldr	r2, [r3, #8]
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	6992      	ldr	r2, [r2, #24]
 8006f3e:	649a      	str	r2, [r3, #72]	; 0x48
 8006f40:	e078      	b.n	8007034 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d017      	beq.n	8006f7a <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8006f52:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	68d1      	ldr	r1, [r2, #12]
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	6952      	ldr	r2, [r2, #20]
 8006f5e:	4311      	orrs	r1, r2
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	6912      	ldr	r2, [r2, #16]
 8006f64:	4311      	orrs	r1, r2
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f6a:	4311      	orrs	r1, r2
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006f70:	430a      	orrs	r2, r1
 8006f72:	431a      	orrs	r2, r3
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	e01d      	b.n	8006fb6 <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	68d9      	ldr	r1, [r3, #12]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	4319      	orrs	r1, r3
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	430b      	orrs	r3, r1
 8006f92:	431a      	orrs	r2, r3
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fa0:	d109      	bne.n	8006fb6 <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006fa6:	2b08      	cmp	r3, #8
 8006fa8:	d105      	bne.n	8006fb6 <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	689a      	ldr	r2, [r3, #8]
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	e039      	b.n	8007034 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d030      	beq.n	800702a <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d017      	beq.n	8007000 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8006fd8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	69d1      	ldr	r1, [r2, #28]
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006fe4:	4311      	orrs	r1, r2
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	6a12      	ldr	r2, [r2, #32]
 8006fea:	4311      	orrs	r1, r2
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ff0:	4311      	orrs	r1, r2
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	e00e      	b.n	800701e <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	69d9      	ldr	r1, [r3, #28]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	4319      	orrs	r1, r3
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	430b      	orrs	r3, r1
 8007018:	431a      	orrs	r2, r3
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	6992      	ldr	r2, [r2, #24]
 8007026:	649a      	str	r2, [r3, #72]	; 0x48
 8007028:	e004      	b.n	8007034 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2208      	movs	r2, #8
 8007032:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8007034:	7ffb      	ldrb	r3, [r7, #31]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3724      	adds	r7, #36	; 0x24
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	f0ffc0c0 	.word	0xf0ffc0c0

08007048 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8007048:	b480      	push	{r7}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
 800704e:	4603      	mov	r3, r0
 8007050:	6039      	str	r1, [r7, #0]
 8007052:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8007058:	2300      	movs	r3, #0
 800705a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800705c:	79fb      	ldrb	r3, [r7, #7]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d005      	beq.n	800706e <OSPIM_GetConfig+0x26>
 8007062:	79fb      	ldrb	r3, [r7, #7]
 8007064:	2b02      	cmp	r3, #2
 8007066:	d802      	bhi.n	800706e <OSPIM_GetConfig+0x26>
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d102      	bne.n	8007074 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	75fb      	strb	r3, [r7, #23]
 8007072:	e08e      	b.n	8007192 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2200      	movs	r2, #0
 8007078:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2200      	movs	r2, #0
 800707e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2200      	movs	r2, #0
 8007084:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2200      	movs	r2, #0
 800708a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2200      	movs	r2, #0
 8007090:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8007092:	79fb      	ldrb	r3, [r7, #7]
 8007094:	2b02      	cmp	r3, #2
 8007096:	d101      	bne.n	800709c <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8007098:	4b41      	ldr	r3, [pc, #260]	; (80071a0 <OSPIM_GetConfig+0x158>)
 800709a:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800709c:	2300      	movs	r3, #0
 800709e:	60fb      	str	r3, [r7, #12]
 80070a0:	e074      	b.n	800718c <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 80070a2:	4a40      	ldr	r2, [pc, #256]	; (80071a4 <OSPIM_GetConfig+0x15c>)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00a      	beq.n	80070ce <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	4053      	eors	r3, r2
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d103      	bne.n	80070ce <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	f003 0310 	and.w	r3, r3, #16
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00a      	beq.n	80070ee <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	4053      	eors	r3, r2
 80070de:	f003 0320 	and.w	r3, r3, #32
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d103      	bne.n	80070ee <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00a      	beq.n	800710e <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	4053      	eors	r3, r2
 80070fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007102:	2b00      	cmp	r3, #0
 8007104:	d103      	bne.n	800710e <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	1c5a      	adds	r2, r3, #1
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d018      	beq.n	800714a <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	4053      	eors	r3, r2
 800711e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d111      	bne.n	800714a <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d106      	bne.n	800713e <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	3301      	adds	r3, #1
 8007134:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	60da      	str	r2, [r3, #12]
 800713c:	e005      	b.n	800714a <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	3301      	adds	r3, #1
 8007142:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d018      	beq.n	8007186 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	4053      	eors	r3, r2
 800715a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d111      	bne.n	8007186 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d106      	bne.n	800717a <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	3301      	adds	r3, #1
 8007170:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	611a      	str	r2, [r3, #16]
 8007178:	e005      	b.n	8007186 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	3301      	adds	r3, #1
 800717e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	3301      	adds	r3, #1
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d987      	bls.n	80070a2 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8007192:	7dfb      	ldrb	r3, [r7, #23]
}
 8007194:	4618      	mov	r0, r3
 8007196:	371c      	adds	r7, #28
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	04040222 	.word	0x04040222
 80071a4:	50061c00 	.word	0x50061c00

080071a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80071ac:	4b0d      	ldr	r3, [pc, #52]	; (80071e4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80071b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071b8:	d102      	bne.n	80071c0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80071ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071be:	e00b      	b.n	80071d8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80071c0:	4b08      	ldr	r3, [pc, #32]	; (80071e4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80071c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ce:	d102      	bne.n	80071d6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80071d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071d4:	e000      	b.n	80071d8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80071d6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80071d8:	4618      	mov	r0, r3
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	40007000 	.word	0x40007000

080071e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d141      	bne.n	800727a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80071f6:	4b4b      	ldr	r3, [pc, #300]	; (8007324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80071fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007202:	d131      	bne.n	8007268 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007204:	4b47      	ldr	r3, [pc, #284]	; (8007324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800720a:	4a46      	ldr	r2, [pc, #280]	; (8007324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800720c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007210:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007214:	4b43      	ldr	r3, [pc, #268]	; (8007324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800721c:	4a41      	ldr	r2, [pc, #260]	; (8007324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800721e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007222:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007224:	4b40      	ldr	r3, [pc, #256]	; (8007328 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2232      	movs	r2, #50	; 0x32
 800722a:	fb02 f303 	mul.w	r3, r2, r3
 800722e:	4a3f      	ldr	r2, [pc, #252]	; (800732c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007230:	fba2 2303 	umull	r2, r3, r2, r3
 8007234:	0c9b      	lsrs	r3, r3, #18
 8007236:	3301      	adds	r3, #1
 8007238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800723a:	e002      	b.n	8007242 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	3b01      	subs	r3, #1
 8007240:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007242:	4b38      	ldr	r3, [pc, #224]	; (8007324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800724a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800724e:	d102      	bne.n	8007256 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1f2      	bne.n	800723c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007256:	4b33      	ldr	r3, [pc, #204]	; (8007324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800725e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007262:	d158      	bne.n	8007316 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e057      	b.n	8007318 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007268:	4b2e      	ldr	r3, [pc, #184]	; (8007324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800726a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800726e:	4a2d      	ldr	r2, [pc, #180]	; (8007324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007274:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007278:	e04d      	b.n	8007316 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007280:	d141      	bne.n	8007306 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007282:	4b28      	ldr	r3, [pc, #160]	; (8007324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800728a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800728e:	d131      	bne.n	80072f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007290:	4b24      	ldr	r3, [pc, #144]	; (8007324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007296:	4a23      	ldr	r2, [pc, #140]	; (8007324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800729c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80072a0:	4b20      	ldr	r3, [pc, #128]	; (8007324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80072a8:	4a1e      	ldr	r2, [pc, #120]	; (8007324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80072b0:	4b1d      	ldr	r3, [pc, #116]	; (8007328 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2232      	movs	r2, #50	; 0x32
 80072b6:	fb02 f303 	mul.w	r3, r2, r3
 80072ba:	4a1c      	ldr	r2, [pc, #112]	; (800732c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80072bc:	fba2 2303 	umull	r2, r3, r2, r3
 80072c0:	0c9b      	lsrs	r3, r3, #18
 80072c2:	3301      	adds	r3, #1
 80072c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072c6:	e002      	b.n	80072ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3b01      	subs	r3, #1
 80072cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072ce:	4b15      	ldr	r3, [pc, #84]	; (8007324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072da:	d102      	bne.n	80072e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1f2      	bne.n	80072c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80072e2:	4b10      	ldr	r3, [pc, #64]	; (8007324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072ee:	d112      	bne.n	8007316 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e011      	b.n	8007318 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072f4:	4b0b      	ldr	r3, [pc, #44]	; (8007324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072fa:	4a0a      	ldr	r2, [pc, #40]	; (8007324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007300:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007304:	e007      	b.n	8007316 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007306:	4b07      	ldr	r3, [pc, #28]	; (8007324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800730e:	4a05      	ldr	r2, [pc, #20]	; (8007324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007310:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007314:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	40007000 	.word	0x40007000
 8007328:	20000000 	.word	0x20000000
 800732c:	431bde83 	.word	0x431bde83

08007330 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d102      	bne.n	8007344 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	f000 bc08 	b.w	8007b54 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007344:	4b96      	ldr	r3, [pc, #600]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f003 030c 	and.w	r3, r3, #12
 800734c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800734e:	4b94      	ldr	r3, [pc, #592]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	f003 0303 	and.w	r3, r3, #3
 8007356:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0310 	and.w	r3, r3, #16
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 80e4 	beq.w	800752e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d007      	beq.n	800737c <HAL_RCC_OscConfig+0x4c>
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	2b0c      	cmp	r3, #12
 8007370:	f040 808b 	bne.w	800748a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	2b01      	cmp	r3, #1
 8007378:	f040 8087 	bne.w	800748a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800737c:	4b88      	ldr	r3, [pc, #544]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0302 	and.w	r3, r3, #2
 8007384:	2b00      	cmp	r3, #0
 8007386:	d005      	beq.n	8007394 <HAL_RCC_OscConfig+0x64>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e3df      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a1a      	ldr	r2, [r3, #32]
 8007398:	4b81      	ldr	r3, [pc, #516]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0308 	and.w	r3, r3, #8
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d004      	beq.n	80073ae <HAL_RCC_OscConfig+0x7e>
 80073a4:	4b7e      	ldr	r3, [pc, #504]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073ac:	e005      	b.n	80073ba <HAL_RCC_OscConfig+0x8a>
 80073ae:	4b7c      	ldr	r3, [pc, #496]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 80073b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073b4:	091b      	lsrs	r3, r3, #4
 80073b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d223      	bcs.n	8007406 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fdfe 	bl	8007fc4 <RCC_SetFlashLatencyFromMSIRange>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e3c0      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80073d2:	4b73      	ldr	r3, [pc, #460]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a72      	ldr	r2, [pc, #456]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 80073d8:	f043 0308 	orr.w	r3, r3, #8
 80073dc:	6013      	str	r3, [r2, #0]
 80073de:	4b70      	ldr	r3, [pc, #448]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	496d      	ldr	r1, [pc, #436]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80073f0:	4b6b      	ldr	r3, [pc, #428]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	69db      	ldr	r3, [r3, #28]
 80073fc:	021b      	lsls	r3, r3, #8
 80073fe:	4968      	ldr	r1, [pc, #416]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 8007400:	4313      	orrs	r3, r2
 8007402:	604b      	str	r3, [r1, #4]
 8007404:	e025      	b.n	8007452 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007406:	4b66      	ldr	r3, [pc, #408]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a65      	ldr	r2, [pc, #404]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 800740c:	f043 0308 	orr.w	r3, r3, #8
 8007410:	6013      	str	r3, [r2, #0]
 8007412:	4b63      	ldr	r3, [pc, #396]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	4960      	ldr	r1, [pc, #384]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 8007420:	4313      	orrs	r3, r2
 8007422:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007424:	4b5e      	ldr	r3, [pc, #376]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	021b      	lsls	r3, r3, #8
 8007432:	495b      	ldr	r1, [pc, #364]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 8007434:	4313      	orrs	r3, r2
 8007436:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d109      	bne.n	8007452 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	4618      	mov	r0, r3
 8007444:	f000 fdbe 	bl	8007fc4 <RCC_SetFlashLatencyFromMSIRange>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e380      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007452:	f000 fcc1 	bl	8007dd8 <HAL_RCC_GetSysClockFreq>
 8007456:	4602      	mov	r2, r0
 8007458:	4b51      	ldr	r3, [pc, #324]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	091b      	lsrs	r3, r3, #4
 800745e:	f003 030f 	and.w	r3, r3, #15
 8007462:	4950      	ldr	r1, [pc, #320]	; (80075a4 <HAL_RCC_OscConfig+0x274>)
 8007464:	5ccb      	ldrb	r3, [r1, r3]
 8007466:	f003 031f 	and.w	r3, r3, #31
 800746a:	fa22 f303 	lsr.w	r3, r2, r3
 800746e:	4a4e      	ldr	r2, [pc, #312]	; (80075a8 <HAL_RCC_OscConfig+0x278>)
 8007470:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007472:	4b4e      	ldr	r3, [pc, #312]	; (80075ac <HAL_RCC_OscConfig+0x27c>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4618      	mov	r0, r3
 8007478:	f7fb fdf6 	bl	8003068 <HAL_InitTick>
 800747c:	4603      	mov	r3, r0
 800747e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007480:	7bfb      	ldrb	r3, [r7, #15]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d052      	beq.n	800752c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007486:	7bfb      	ldrb	r3, [r7, #15]
 8007488:	e364      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d032      	beq.n	80074f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007492:	4b43      	ldr	r3, [pc, #268]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a42      	ldr	r2, [pc, #264]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 8007498:	f043 0301 	orr.w	r3, r3, #1
 800749c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800749e:	f7fd fc35 	bl	8004d0c <HAL_GetTick>
 80074a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80074a4:	e008      	b.n	80074b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80074a6:	f7fd fc31 	bl	8004d0c <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d901      	bls.n	80074b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e34d      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80074b8:	4b39      	ldr	r3, [pc, #228]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d0f0      	beq.n	80074a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80074c4:	4b36      	ldr	r3, [pc, #216]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a35      	ldr	r2, [pc, #212]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 80074ca:	f043 0308 	orr.w	r3, r3, #8
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	4b33      	ldr	r3, [pc, #204]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	4930      	ldr	r1, [pc, #192]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80074e2:	4b2f      	ldr	r3, [pc, #188]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	021b      	lsls	r3, r3, #8
 80074f0:	492b      	ldr	r1, [pc, #172]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	604b      	str	r3, [r1, #4]
 80074f6:	e01a      	b.n	800752e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80074f8:	4b29      	ldr	r3, [pc, #164]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a28      	ldr	r2, [pc, #160]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 80074fe:	f023 0301 	bic.w	r3, r3, #1
 8007502:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007504:	f7fd fc02 	bl	8004d0c <HAL_GetTick>
 8007508:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800750a:	e008      	b.n	800751e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800750c:	f7fd fbfe 	bl	8004d0c <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b02      	cmp	r3, #2
 8007518:	d901      	bls.n	800751e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e31a      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800751e:	4b20      	ldr	r3, [pc, #128]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0302 	and.w	r3, r3, #2
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1f0      	bne.n	800750c <HAL_RCC_OscConfig+0x1dc>
 800752a:	e000      	b.n	800752e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800752c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b00      	cmp	r3, #0
 8007538:	d073      	beq.n	8007622 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	2b08      	cmp	r3, #8
 800753e:	d005      	beq.n	800754c <HAL_RCC_OscConfig+0x21c>
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	2b0c      	cmp	r3, #12
 8007544:	d10e      	bne.n	8007564 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2b03      	cmp	r3, #3
 800754a:	d10b      	bne.n	8007564 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800754c:	4b14      	ldr	r3, [pc, #80]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d063      	beq.n	8007620 <HAL_RCC_OscConfig+0x2f0>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d15f      	bne.n	8007620 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e2f7      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800756c:	d106      	bne.n	800757c <HAL_RCC_OscConfig+0x24c>
 800756e:	4b0c      	ldr	r3, [pc, #48]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a0b      	ldr	r2, [pc, #44]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 8007574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007578:	6013      	str	r3, [r2, #0]
 800757a:	e025      	b.n	80075c8 <HAL_RCC_OscConfig+0x298>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007584:	d114      	bne.n	80075b0 <HAL_RCC_OscConfig+0x280>
 8007586:	4b06      	ldr	r3, [pc, #24]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a05      	ldr	r2, [pc, #20]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 800758c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007590:	6013      	str	r3, [r2, #0]
 8007592:	4b03      	ldr	r3, [pc, #12]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a02      	ldr	r2, [pc, #8]	; (80075a0 <HAL_RCC_OscConfig+0x270>)
 8007598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	e013      	b.n	80075c8 <HAL_RCC_OscConfig+0x298>
 80075a0:	40021000 	.word	0x40021000
 80075a4:	0800f820 	.word	0x0800f820
 80075a8:	20000000 	.word	0x20000000
 80075ac:	200000c8 	.word	0x200000c8
 80075b0:	4ba0      	ldr	r3, [pc, #640]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a9f      	ldr	r2, [pc, #636]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 80075b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075ba:	6013      	str	r3, [r2, #0]
 80075bc:	4b9d      	ldr	r3, [pc, #628]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a9c      	ldr	r2, [pc, #624]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 80075c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d013      	beq.n	80075f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d0:	f7fd fb9c 	bl	8004d0c <HAL_GetTick>
 80075d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075d6:	e008      	b.n	80075ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075d8:	f7fd fb98 	bl	8004d0c <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b64      	cmp	r3, #100	; 0x64
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e2b4      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075ea:	4b92      	ldr	r3, [pc, #584]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0f0      	beq.n	80075d8 <HAL_RCC_OscConfig+0x2a8>
 80075f6:	e014      	b.n	8007622 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f8:	f7fd fb88 	bl	8004d0c <HAL_GetTick>
 80075fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80075fe:	e008      	b.n	8007612 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007600:	f7fd fb84 	bl	8004d0c <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	2b64      	cmp	r3, #100	; 0x64
 800760c:	d901      	bls.n	8007612 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e2a0      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007612:	4b88      	ldr	r3, [pc, #544]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1f0      	bne.n	8007600 <HAL_RCC_OscConfig+0x2d0>
 800761e:	e000      	b.n	8007622 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d060      	beq.n	80076f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	2b04      	cmp	r3, #4
 8007632:	d005      	beq.n	8007640 <HAL_RCC_OscConfig+0x310>
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	2b0c      	cmp	r3, #12
 8007638:	d119      	bne.n	800766e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2b02      	cmp	r3, #2
 800763e:	d116      	bne.n	800766e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007640:	4b7c      	ldr	r3, [pc, #496]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007648:	2b00      	cmp	r3, #0
 800764a:	d005      	beq.n	8007658 <HAL_RCC_OscConfig+0x328>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e27d      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007658:	4b76      	ldr	r3, [pc, #472]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	061b      	lsls	r3, r3, #24
 8007666:	4973      	ldr	r1, [pc, #460]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 8007668:	4313      	orrs	r3, r2
 800766a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800766c:	e040      	b.n	80076f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d023      	beq.n	80076be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007676:	4b6f      	ldr	r3, [pc, #444]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a6e      	ldr	r2, [pc, #440]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 800767c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007682:	f7fd fb43 	bl	8004d0c <HAL_GetTick>
 8007686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007688:	e008      	b.n	800769c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800768a:	f7fd fb3f 	bl	8004d0c <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b02      	cmp	r3, #2
 8007696:	d901      	bls.n	800769c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e25b      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800769c:	4b65      	ldr	r3, [pc, #404]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d0f0      	beq.n	800768a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076a8:	4b62      	ldr	r3, [pc, #392]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	061b      	lsls	r3, r3, #24
 80076b6:	495f      	ldr	r1, [pc, #380]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	604b      	str	r3, [r1, #4]
 80076bc:	e018      	b.n	80076f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076be:	4b5d      	ldr	r3, [pc, #372]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a5c      	ldr	r2, [pc, #368]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 80076c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ca:	f7fd fb1f 	bl	8004d0c <HAL_GetTick>
 80076ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80076d0:	e008      	b.n	80076e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076d2:	f7fd fb1b 	bl	8004d0c <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d901      	bls.n	80076e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e237      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80076e4:	4b53      	ldr	r3, [pc, #332]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1f0      	bne.n	80076d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0308 	and.w	r3, r3, #8
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d03c      	beq.n	8007776 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d01c      	beq.n	800773e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007704:	4b4b      	ldr	r3, [pc, #300]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 8007706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800770a:	4a4a      	ldr	r2, [pc, #296]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 800770c:	f043 0301 	orr.w	r3, r3, #1
 8007710:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007714:	f7fd fafa 	bl	8004d0c <HAL_GetTick>
 8007718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800771a:	e008      	b.n	800772e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800771c:	f7fd faf6 	bl	8004d0c <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b02      	cmp	r3, #2
 8007728:	d901      	bls.n	800772e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e212      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800772e:	4b41      	ldr	r3, [pc, #260]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 8007730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007734:	f003 0302 	and.w	r3, r3, #2
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0ef      	beq.n	800771c <HAL_RCC_OscConfig+0x3ec>
 800773c:	e01b      	b.n	8007776 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800773e:	4b3d      	ldr	r3, [pc, #244]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 8007740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007744:	4a3b      	ldr	r2, [pc, #236]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 8007746:	f023 0301 	bic.w	r3, r3, #1
 800774a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800774e:	f7fd fadd 	bl	8004d0c <HAL_GetTick>
 8007752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007754:	e008      	b.n	8007768 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007756:	f7fd fad9 	bl	8004d0c <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	2b02      	cmp	r3, #2
 8007762:	d901      	bls.n	8007768 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e1f5      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007768:	4b32      	ldr	r3, [pc, #200]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 800776a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1ef      	bne.n	8007756 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0304 	and.w	r3, r3, #4
 800777e:	2b00      	cmp	r3, #0
 8007780:	f000 80a6 	beq.w	80078d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007784:	2300      	movs	r3, #0
 8007786:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007788:	4b2a      	ldr	r3, [pc, #168]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 800778a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800778c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10d      	bne.n	80077b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007794:	4b27      	ldr	r3, [pc, #156]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 8007796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007798:	4a26      	ldr	r2, [pc, #152]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 800779a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800779e:	6593      	str	r3, [r2, #88]	; 0x58
 80077a0:	4b24      	ldr	r3, [pc, #144]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 80077a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077a8:	60bb      	str	r3, [r7, #8]
 80077aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077ac:	2301      	movs	r3, #1
 80077ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077b0:	4b21      	ldr	r3, [pc, #132]	; (8007838 <HAL_RCC_OscConfig+0x508>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d118      	bne.n	80077ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077bc:	4b1e      	ldr	r3, [pc, #120]	; (8007838 <HAL_RCC_OscConfig+0x508>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a1d      	ldr	r2, [pc, #116]	; (8007838 <HAL_RCC_OscConfig+0x508>)
 80077c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077c8:	f7fd faa0 	bl	8004d0c <HAL_GetTick>
 80077cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077ce:	e008      	b.n	80077e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077d0:	f7fd fa9c 	bl	8004d0c <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d901      	bls.n	80077e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e1b8      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077e2:	4b15      	ldr	r3, [pc, #84]	; (8007838 <HAL_RCC_OscConfig+0x508>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0f0      	beq.n	80077d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d108      	bne.n	8007808 <HAL_RCC_OscConfig+0x4d8>
 80077f6:	4b0f      	ldr	r3, [pc, #60]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 80077f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077fc:	4a0d      	ldr	r2, [pc, #52]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 80077fe:	f043 0301 	orr.w	r3, r3, #1
 8007802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007806:	e029      	b.n	800785c <HAL_RCC_OscConfig+0x52c>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	2b05      	cmp	r3, #5
 800780e:	d115      	bne.n	800783c <HAL_RCC_OscConfig+0x50c>
 8007810:	4b08      	ldr	r3, [pc, #32]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 8007812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007816:	4a07      	ldr	r2, [pc, #28]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 8007818:	f043 0304 	orr.w	r3, r3, #4
 800781c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007820:	4b04      	ldr	r3, [pc, #16]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 8007822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007826:	4a03      	ldr	r2, [pc, #12]	; (8007834 <HAL_RCC_OscConfig+0x504>)
 8007828:	f043 0301 	orr.w	r3, r3, #1
 800782c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007830:	e014      	b.n	800785c <HAL_RCC_OscConfig+0x52c>
 8007832:	bf00      	nop
 8007834:	40021000 	.word	0x40021000
 8007838:	40007000 	.word	0x40007000
 800783c:	4b9d      	ldr	r3, [pc, #628]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 800783e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007842:	4a9c      	ldr	r2, [pc, #624]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 8007844:	f023 0301 	bic.w	r3, r3, #1
 8007848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800784c:	4b99      	ldr	r3, [pc, #612]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 800784e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007852:	4a98      	ldr	r2, [pc, #608]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 8007854:	f023 0304 	bic.w	r3, r3, #4
 8007858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d016      	beq.n	8007892 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007864:	f7fd fa52 	bl	8004d0c <HAL_GetTick>
 8007868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800786a:	e00a      	b.n	8007882 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800786c:	f7fd fa4e 	bl	8004d0c <HAL_GetTick>
 8007870:	4602      	mov	r2, r0
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	f241 3288 	movw	r2, #5000	; 0x1388
 800787a:	4293      	cmp	r3, r2
 800787c:	d901      	bls.n	8007882 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e168      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007882:	4b8c      	ldr	r3, [pc, #560]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 8007884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d0ed      	beq.n	800786c <HAL_RCC_OscConfig+0x53c>
 8007890:	e015      	b.n	80078be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007892:	f7fd fa3b 	bl	8004d0c <HAL_GetTick>
 8007896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007898:	e00a      	b.n	80078b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800789a:	f7fd fa37 	bl	8004d0c <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d901      	bls.n	80078b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e151      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80078b0:	4b80      	ldr	r3, [pc, #512]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 80078b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078b6:	f003 0302 	and.w	r3, r3, #2
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1ed      	bne.n	800789a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078be:	7ffb      	ldrb	r3, [r7, #31]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d105      	bne.n	80078d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078c4:	4b7b      	ldr	r3, [pc, #492]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 80078c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078c8:	4a7a      	ldr	r2, [pc, #488]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 80078ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0320 	and.w	r3, r3, #32
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d03c      	beq.n	8007956 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d01c      	beq.n	800791e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80078e4:	4b73      	ldr	r3, [pc, #460]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 80078e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078ea:	4a72      	ldr	r2, [pc, #456]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 80078ec:	f043 0301 	orr.w	r3, r3, #1
 80078f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078f4:	f7fd fa0a 	bl	8004d0c <HAL_GetTick>
 80078f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80078fa:	e008      	b.n	800790e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078fc:	f7fd fa06 	bl	8004d0c <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	2b02      	cmp	r3, #2
 8007908:	d901      	bls.n	800790e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e122      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800790e:	4b69      	ldr	r3, [pc, #420]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 8007910:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b00      	cmp	r3, #0
 800791a:	d0ef      	beq.n	80078fc <HAL_RCC_OscConfig+0x5cc>
 800791c:	e01b      	b.n	8007956 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800791e:	4b65      	ldr	r3, [pc, #404]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 8007920:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007924:	4a63      	ldr	r2, [pc, #396]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 8007926:	f023 0301 	bic.w	r3, r3, #1
 800792a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800792e:	f7fd f9ed 	bl	8004d0c <HAL_GetTick>
 8007932:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007934:	e008      	b.n	8007948 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007936:	f7fd f9e9 	bl	8004d0c <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	2b02      	cmp	r3, #2
 8007942:	d901      	bls.n	8007948 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e105      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007948:	4b5a      	ldr	r3, [pc, #360]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 800794a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800794e:	f003 0302 	and.w	r3, r3, #2
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1ef      	bne.n	8007936 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795a:	2b00      	cmp	r3, #0
 800795c:	f000 80f9 	beq.w	8007b52 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007964:	2b02      	cmp	r3, #2
 8007966:	f040 80cf 	bne.w	8007b08 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800796a:	4b52      	ldr	r3, [pc, #328]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f003 0203 	and.w	r2, r3, #3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797a:	429a      	cmp	r2, r3
 800797c:	d12c      	bne.n	80079d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007988:	3b01      	subs	r3, #1
 800798a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800798c:	429a      	cmp	r2, r3
 800798e:	d123      	bne.n	80079d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800799c:	429a      	cmp	r2, r3
 800799e:	d11b      	bne.n	80079d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d113      	bne.n	80079d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ba:	085b      	lsrs	r3, r3, #1
 80079bc:	3b01      	subs	r3, #1
 80079be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d109      	bne.n	80079d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ce:	085b      	lsrs	r3, r3, #1
 80079d0:	3b01      	subs	r3, #1
 80079d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d071      	beq.n	8007abc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	2b0c      	cmp	r3, #12
 80079dc:	d068      	beq.n	8007ab0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80079de:	4b35      	ldr	r3, [pc, #212]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d105      	bne.n	80079f6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80079ea:	4b32      	ldr	r3, [pc, #200]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e0ac      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80079fa:	4b2e      	ldr	r3, [pc, #184]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a2d      	ldr	r2, [pc, #180]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 8007a00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a04:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007a06:	f7fd f981 	bl	8004d0c <HAL_GetTick>
 8007a0a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a0c:	e008      	b.n	8007a20 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a0e:	f7fd f97d 	bl	8004d0c <HAL_GetTick>
 8007a12:	4602      	mov	r2, r0
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d901      	bls.n	8007a20 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e099      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a20:	4b24      	ldr	r3, [pc, #144]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1f0      	bne.n	8007a0e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a2c:	4b21      	ldr	r3, [pc, #132]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 8007a2e:	68da      	ldr	r2, [r3, #12]
 8007a30:	4b21      	ldr	r3, [pc, #132]	; (8007ab8 <HAL_RCC_OscConfig+0x788>)
 8007a32:	4013      	ands	r3, r2
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007a3c:	3a01      	subs	r2, #1
 8007a3e:	0112      	lsls	r2, r2, #4
 8007a40:	4311      	orrs	r1, r2
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a46:	0212      	lsls	r2, r2, #8
 8007a48:	4311      	orrs	r1, r2
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007a4e:	0852      	lsrs	r2, r2, #1
 8007a50:	3a01      	subs	r2, #1
 8007a52:	0552      	lsls	r2, r2, #21
 8007a54:	4311      	orrs	r1, r2
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007a5a:	0852      	lsrs	r2, r2, #1
 8007a5c:	3a01      	subs	r2, #1
 8007a5e:	0652      	lsls	r2, r2, #25
 8007a60:	4311      	orrs	r1, r2
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a66:	06d2      	lsls	r2, r2, #27
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	4912      	ldr	r1, [pc, #72]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007a70:	4b10      	ldr	r3, [pc, #64]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a0f      	ldr	r2, [pc, #60]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 8007a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a7c:	4b0d      	ldr	r3, [pc, #52]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	4a0c      	ldr	r2, [pc, #48]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 8007a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007a88:	f7fd f940 	bl	8004d0c <HAL_GetTick>
 8007a8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a8e:	e008      	b.n	8007aa2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a90:	f7fd f93c 	bl	8004d0c <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d901      	bls.n	8007aa2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e058      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007aa2:	4b04      	ldr	r3, [pc, #16]	; (8007ab4 <HAL_RCC_OscConfig+0x784>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d0f0      	beq.n	8007a90 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007aae:	e050      	b.n	8007b52 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e04f      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
 8007ab4:	40021000 	.word	0x40021000
 8007ab8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007abc:	4b27      	ldr	r3, [pc, #156]	; (8007b5c <HAL_RCC_OscConfig+0x82c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d144      	bne.n	8007b52 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007ac8:	4b24      	ldr	r3, [pc, #144]	; (8007b5c <HAL_RCC_OscConfig+0x82c>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a23      	ldr	r2, [pc, #140]	; (8007b5c <HAL_RCC_OscConfig+0x82c>)
 8007ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ad2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ad4:	4b21      	ldr	r3, [pc, #132]	; (8007b5c <HAL_RCC_OscConfig+0x82c>)
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	4a20      	ldr	r2, [pc, #128]	; (8007b5c <HAL_RCC_OscConfig+0x82c>)
 8007ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ade:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007ae0:	f7fd f914 	bl	8004d0c <HAL_GetTick>
 8007ae4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ae6:	e008      	b.n	8007afa <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ae8:	f7fd f910 	bl	8004d0c <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d901      	bls.n	8007afa <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e02c      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007afa:	4b18      	ldr	r3, [pc, #96]	; (8007b5c <HAL_RCC_OscConfig+0x82c>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0f0      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x7b8>
 8007b06:	e024      	b.n	8007b52 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	2b0c      	cmp	r3, #12
 8007b0c:	d01f      	beq.n	8007b4e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b0e:	4b13      	ldr	r3, [pc, #76]	; (8007b5c <HAL_RCC_OscConfig+0x82c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a12      	ldr	r2, [pc, #72]	; (8007b5c <HAL_RCC_OscConfig+0x82c>)
 8007b14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b1a:	f7fd f8f7 	bl	8004d0c <HAL_GetTick>
 8007b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b20:	e008      	b.n	8007b34 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b22:	f7fd f8f3 	bl	8004d0c <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d901      	bls.n	8007b34 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e00f      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b34:	4b09      	ldr	r3, [pc, #36]	; (8007b5c <HAL_RCC_OscConfig+0x82c>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1f0      	bne.n	8007b22 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007b40:	4b06      	ldr	r3, [pc, #24]	; (8007b5c <HAL_RCC_OscConfig+0x82c>)
 8007b42:	68da      	ldr	r2, [r3, #12]
 8007b44:	4905      	ldr	r1, [pc, #20]	; (8007b5c <HAL_RCC_OscConfig+0x82c>)
 8007b46:	4b06      	ldr	r3, [pc, #24]	; (8007b60 <HAL_RCC_OscConfig+0x830>)
 8007b48:	4013      	ands	r3, r2
 8007b4a:	60cb      	str	r3, [r1, #12]
 8007b4c:	e001      	b.n	8007b52 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e000      	b.n	8007b54 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3720      	adds	r7, #32
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	40021000 	.word	0x40021000
 8007b60:	feeefffc 	.word	0xfeeefffc

08007b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e11d      	b.n	8007db8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b7c:	4b90      	ldr	r3, [pc, #576]	; (8007dc0 <HAL_RCC_ClockConfig+0x25c>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 030f 	and.w	r3, r3, #15
 8007b84:	683a      	ldr	r2, [r7, #0]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d910      	bls.n	8007bac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b8a:	4b8d      	ldr	r3, [pc, #564]	; (8007dc0 <HAL_RCC_ClockConfig+0x25c>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f023 020f 	bic.w	r2, r3, #15
 8007b92:	498b      	ldr	r1, [pc, #556]	; (8007dc0 <HAL_RCC_ClockConfig+0x25c>)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b9a:	4b89      	ldr	r3, [pc, #548]	; (8007dc0 <HAL_RCC_ClockConfig+0x25c>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 030f 	and.w	r3, r3, #15
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d001      	beq.n	8007bac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e105      	b.n	8007db8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0302 	and.w	r3, r3, #2
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d010      	beq.n	8007bda <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	689a      	ldr	r2, [r3, #8]
 8007bbc:	4b81      	ldr	r3, [pc, #516]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d908      	bls.n	8007bda <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bc8:	4b7e      	ldr	r3, [pc, #504]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	497b      	ldr	r1, [pc, #492]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d079      	beq.n	8007cda <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d11e      	bne.n	8007c2c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bee:	4b75      	ldr	r3, [pc, #468]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e0dc      	b.n	8007db8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8007bfe:	f000 fa3b 	bl	8008078 <RCC_GetSysClockFreqFromPLLSource>
 8007c02:	4603      	mov	r3, r0
 8007c04:	4a70      	ldr	r2, [pc, #448]	; (8007dc8 <HAL_RCC_ClockConfig+0x264>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d946      	bls.n	8007c98 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007c0a:	4b6e      	ldr	r3, [pc, #440]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d140      	bne.n	8007c98 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c16:	4b6b      	ldr	r3, [pc, #428]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c1e:	4a69      	ldr	r2, [pc, #420]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007c26:	2380      	movs	r3, #128	; 0x80
 8007c28:	617b      	str	r3, [r7, #20]
 8007c2a:	e035      	b.n	8007c98 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d107      	bne.n	8007c44 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c34:	4b63      	ldr	r3, [pc, #396]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d115      	bne.n	8007c6c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e0b9      	b.n	8007db8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d107      	bne.n	8007c5c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007c4c:	4b5d      	ldr	r3, [pc, #372]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0302 	and.w	r3, r3, #2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d109      	bne.n	8007c6c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e0ad      	b.n	8007db8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c5c:	4b59      	ldr	r3, [pc, #356]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e0a5      	b.n	8007db8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8007c6c:	f000 f8b4 	bl	8007dd8 <HAL_RCC_GetSysClockFreq>
 8007c70:	4603      	mov	r3, r0
 8007c72:	4a55      	ldr	r2, [pc, #340]	; (8007dc8 <HAL_RCC_ClockConfig+0x264>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d90f      	bls.n	8007c98 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007c78:	4b52      	ldr	r3, [pc, #328]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d109      	bne.n	8007c98 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c84:	4b4f      	ldr	r3, [pc, #316]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c8c:	4a4d      	ldr	r2, [pc, #308]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c92:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007c94:	2380      	movs	r3, #128	; 0x80
 8007c96:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c98:	4b4a      	ldr	r3, [pc, #296]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f023 0203 	bic.w	r2, r3, #3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	4947      	ldr	r1, [pc, #284]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007caa:	f7fd f82f 	bl	8004d0c <HAL_GetTick>
 8007cae:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cb0:	e00a      	b.n	8007cc8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cb2:	f7fd f82b 	bl	8004d0c <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d901      	bls.n	8007cc8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e077      	b.n	8007db8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cc8:	4b3e      	ldr	r3, [pc, #248]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f003 020c 	and.w	r2, r3, #12
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d1eb      	bne.n	8007cb2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	2b80      	cmp	r3, #128	; 0x80
 8007cde:	d105      	bne.n	8007cec <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007ce0:	4b38      	ldr	r3, [pc, #224]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	4a37      	ldr	r2, [pc, #220]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cea:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0302 	and.w	r3, r3, #2
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d010      	beq.n	8007d1a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	689a      	ldr	r2, [r3, #8]
 8007cfc:	4b31      	ldr	r3, [pc, #196]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d208      	bcs.n	8007d1a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d08:	4b2e      	ldr	r3, [pc, #184]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	492b      	ldr	r1, [pc, #172]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d1a:	4b29      	ldr	r3, [pc, #164]	; (8007dc0 <HAL_RCC_ClockConfig+0x25c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 030f 	and.w	r3, r3, #15
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d210      	bcs.n	8007d4a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d28:	4b25      	ldr	r3, [pc, #148]	; (8007dc0 <HAL_RCC_ClockConfig+0x25c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f023 020f 	bic.w	r2, r3, #15
 8007d30:	4923      	ldr	r1, [pc, #140]	; (8007dc0 <HAL_RCC_ClockConfig+0x25c>)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d38:	4b21      	ldr	r3, [pc, #132]	; (8007dc0 <HAL_RCC_ClockConfig+0x25c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 030f 	and.w	r3, r3, #15
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d001      	beq.n	8007d4a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e036      	b.n	8007db8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 0304 	and.w	r3, r3, #4
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d008      	beq.n	8007d68 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d56:	4b1b      	ldr	r3, [pc, #108]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	4918      	ldr	r1, [pc, #96]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007d64:	4313      	orrs	r3, r2
 8007d66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0308 	and.w	r3, r3, #8
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d009      	beq.n	8007d88 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d74:	4b13      	ldr	r3, [pc, #76]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	00db      	lsls	r3, r3, #3
 8007d82:	4910      	ldr	r1, [pc, #64]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007d88:	f000 f826 	bl	8007dd8 <HAL_RCC_GetSysClockFreq>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	4b0d      	ldr	r3, [pc, #52]	; (8007dc4 <HAL_RCC_ClockConfig+0x260>)
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	091b      	lsrs	r3, r3, #4
 8007d94:	f003 030f 	and.w	r3, r3, #15
 8007d98:	490c      	ldr	r1, [pc, #48]	; (8007dcc <HAL_RCC_ClockConfig+0x268>)
 8007d9a:	5ccb      	ldrb	r3, [r1, r3]
 8007d9c:	f003 031f 	and.w	r3, r3, #31
 8007da0:	fa22 f303 	lsr.w	r3, r2, r3
 8007da4:	4a0a      	ldr	r2, [pc, #40]	; (8007dd0 <HAL_RCC_ClockConfig+0x26c>)
 8007da6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007da8:	4b0a      	ldr	r3, [pc, #40]	; (8007dd4 <HAL_RCC_ClockConfig+0x270>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7fb f95b 	bl	8003068 <HAL_InitTick>
 8007db2:	4603      	mov	r3, r0
 8007db4:	73fb      	strb	r3, [r7, #15]

  return status;
 8007db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	40022000 	.word	0x40022000
 8007dc4:	40021000 	.word	0x40021000
 8007dc8:	04c4b400 	.word	0x04c4b400
 8007dcc:	0800f820 	.word	0x0800f820
 8007dd0:	20000000 	.word	0x20000000
 8007dd4:	200000c8 	.word	0x200000c8

08007dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b089      	sub	sp, #36	; 0x24
 8007ddc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	61fb      	str	r3, [r7, #28]
 8007de2:	2300      	movs	r3, #0
 8007de4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007de6:	4b3e      	ldr	r3, [pc, #248]	; (8007ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f003 030c 	and.w	r3, r3, #12
 8007dee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007df0:	4b3b      	ldr	r3, [pc, #236]	; (8007ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f003 0303 	and.w	r3, r3, #3
 8007df8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d005      	beq.n	8007e0c <HAL_RCC_GetSysClockFreq+0x34>
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	2b0c      	cmp	r3, #12
 8007e04:	d121      	bne.n	8007e4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d11e      	bne.n	8007e4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007e0c:	4b34      	ldr	r3, [pc, #208]	; (8007ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0308 	and.w	r3, r3, #8
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d107      	bne.n	8007e28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007e18:	4b31      	ldr	r3, [pc, #196]	; (8007ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e1e:	0a1b      	lsrs	r3, r3, #8
 8007e20:	f003 030f 	and.w	r3, r3, #15
 8007e24:	61fb      	str	r3, [r7, #28]
 8007e26:	e005      	b.n	8007e34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007e28:	4b2d      	ldr	r3, [pc, #180]	; (8007ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	091b      	lsrs	r3, r3, #4
 8007e2e:	f003 030f 	and.w	r3, r3, #15
 8007e32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007e34:	4a2b      	ldr	r2, [pc, #172]	; (8007ee4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10d      	bne.n	8007e60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e48:	e00a      	b.n	8007e60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	2b04      	cmp	r3, #4
 8007e4e:	d102      	bne.n	8007e56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007e50:	4b25      	ldr	r3, [pc, #148]	; (8007ee8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007e52:	61bb      	str	r3, [r7, #24]
 8007e54:	e004      	b.n	8007e60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	d101      	bne.n	8007e60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007e5c:	4b23      	ldr	r3, [pc, #140]	; (8007eec <HAL_RCC_GetSysClockFreq+0x114>)
 8007e5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	2b0c      	cmp	r3, #12
 8007e64:	d134      	bne.n	8007ed0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e66:	4b1e      	ldr	r3, [pc, #120]	; (8007ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	f003 0303 	and.w	r3, r3, #3
 8007e6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d003      	beq.n	8007e7e <HAL_RCC_GetSysClockFreq+0xa6>
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	d003      	beq.n	8007e84 <HAL_RCC_GetSysClockFreq+0xac>
 8007e7c:	e005      	b.n	8007e8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007e7e:	4b1a      	ldr	r3, [pc, #104]	; (8007ee8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007e80:	617b      	str	r3, [r7, #20]
      break;
 8007e82:	e005      	b.n	8007e90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007e84:	4b19      	ldr	r3, [pc, #100]	; (8007eec <HAL_RCC_GetSysClockFreq+0x114>)
 8007e86:	617b      	str	r3, [r7, #20]
      break;
 8007e88:	e002      	b.n	8007e90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	617b      	str	r3, [r7, #20]
      break;
 8007e8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e90:	4b13      	ldr	r3, [pc, #76]	; (8007ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	091b      	lsrs	r3, r3, #4
 8007e96:	f003 030f 	and.w	r3, r3, #15
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007e9e:	4b10      	ldr	r3, [pc, #64]	; (8007ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	0a1b      	lsrs	r3, r3, #8
 8007ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ea8:	697a      	ldr	r2, [r7, #20]
 8007eaa:	fb03 f202 	mul.w	r2, r3, r2
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eb4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007eb6:	4b0a      	ldr	r3, [pc, #40]	; (8007ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	0e5b      	lsrs	r3, r3, #25
 8007ebc:	f003 0303 	and.w	r3, r3, #3
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	005b      	lsls	r3, r3, #1
 8007ec4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ece:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007ed0:	69bb      	ldr	r3, [r7, #24]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3724      	adds	r7, #36	; 0x24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	40021000 	.word	0x40021000
 8007ee4:	0800f838 	.word	0x0800f838
 8007ee8:	00f42400 	.word	0x00f42400
 8007eec:	007a1200 	.word	0x007a1200

08007ef0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ef4:	4b03      	ldr	r3, [pc, #12]	; (8007f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	20000000 	.word	0x20000000

08007f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007f0c:	f7ff fff0 	bl	8007ef0 <HAL_RCC_GetHCLKFreq>
 8007f10:	4602      	mov	r2, r0
 8007f12:	4b06      	ldr	r3, [pc, #24]	; (8007f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	0a1b      	lsrs	r3, r3, #8
 8007f18:	f003 0307 	and.w	r3, r3, #7
 8007f1c:	4904      	ldr	r1, [pc, #16]	; (8007f30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f1e:	5ccb      	ldrb	r3, [r1, r3]
 8007f20:	f003 031f 	and.w	r3, r3, #31
 8007f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	40021000 	.word	0x40021000
 8007f30:	0800f830 	.word	0x0800f830

08007f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007f38:	f7ff ffda 	bl	8007ef0 <HAL_RCC_GetHCLKFreq>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	4b06      	ldr	r3, [pc, #24]	; (8007f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	0adb      	lsrs	r3, r3, #11
 8007f44:	f003 0307 	and.w	r3, r3, #7
 8007f48:	4904      	ldr	r1, [pc, #16]	; (8007f5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f4a:	5ccb      	ldrb	r3, [r1, r3]
 8007f4c:	f003 031f 	and.w	r3, r3, #31
 8007f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	40021000 	.word	0x40021000
 8007f5c:	0800f830 	.word	0x0800f830

08007f60 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	220f      	movs	r2, #15
 8007f6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007f70:	4b12      	ldr	r3, [pc, #72]	; (8007fbc <HAL_RCC_GetClockConfig+0x5c>)
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	f003 0203 	and.w	r2, r3, #3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007f7c:	4b0f      	ldr	r3, [pc, #60]	; (8007fbc <HAL_RCC_GetClockConfig+0x5c>)
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007f88:	4b0c      	ldr	r3, [pc, #48]	; (8007fbc <HAL_RCC_GetClockConfig+0x5c>)
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007f94:	4b09      	ldr	r3, [pc, #36]	; (8007fbc <HAL_RCC_GetClockConfig+0x5c>)
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	08db      	lsrs	r3, r3, #3
 8007f9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007fa2:	4b07      	ldr	r3, [pc, #28]	; (8007fc0 <HAL_RCC_GetClockConfig+0x60>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 020f 	and.w	r2, r3, #15
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	601a      	str	r2, [r3, #0]
}
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	40021000 	.word	0x40021000
 8007fc0:	40022000 	.word	0x40022000

08007fc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007fcc:	2300      	movs	r3, #0
 8007fce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007fd0:	4b27      	ldr	r3, [pc, #156]	; (8008070 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d003      	beq.n	8007fe4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007fdc:	f7ff f8e4 	bl	80071a8 <HAL_PWREx_GetVoltageRange>
 8007fe0:	6178      	str	r0, [r7, #20]
 8007fe2:	e014      	b.n	800800e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007fe4:	4b22      	ldr	r3, [pc, #136]	; (8008070 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fe8:	4a21      	ldr	r2, [pc, #132]	; (8008070 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fee:	6593      	str	r3, [r2, #88]	; 0x58
 8007ff0:	4b1f      	ldr	r3, [pc, #124]	; (8008070 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ff8:	60fb      	str	r3, [r7, #12]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007ffc:	f7ff f8d4 	bl	80071a8 <HAL_PWREx_GetVoltageRange>
 8008000:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008002:	4b1b      	ldr	r3, [pc, #108]	; (8008070 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008006:	4a1a      	ldr	r2, [pc, #104]	; (8008070 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800800c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008014:	d10b      	bne.n	800802e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b80      	cmp	r3, #128	; 0x80
 800801a:	d913      	bls.n	8008044 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2ba0      	cmp	r3, #160	; 0xa0
 8008020:	d902      	bls.n	8008028 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008022:	2302      	movs	r3, #2
 8008024:	613b      	str	r3, [r7, #16]
 8008026:	e00d      	b.n	8008044 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008028:	2301      	movs	r3, #1
 800802a:	613b      	str	r3, [r7, #16]
 800802c:	e00a      	b.n	8008044 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2b7f      	cmp	r3, #127	; 0x7f
 8008032:	d902      	bls.n	800803a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8008034:	2302      	movs	r3, #2
 8008036:	613b      	str	r3, [r7, #16]
 8008038:	e004      	b.n	8008044 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2b70      	cmp	r3, #112	; 0x70
 800803e:	d101      	bne.n	8008044 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008040:	2301      	movs	r3, #1
 8008042:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008044:	4b0b      	ldr	r3, [pc, #44]	; (8008074 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f023 020f 	bic.w	r2, r3, #15
 800804c:	4909      	ldr	r1, [pc, #36]	; (8008074 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	4313      	orrs	r3, r2
 8008052:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008054:	4b07      	ldr	r3, [pc, #28]	; (8008074 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 030f 	and.w	r3, r3, #15
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	429a      	cmp	r2, r3
 8008060:	d001      	beq.n	8008066 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e000      	b.n	8008068 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3718      	adds	r7, #24
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	40021000 	.word	0x40021000
 8008074:	40022000 	.word	0x40022000

08008078 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008078:	b480      	push	{r7}
 800807a:	b087      	sub	sp, #28
 800807c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800807e:	4b2d      	ldr	r3, [pc, #180]	; (8008134 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b03      	cmp	r3, #3
 800808c:	d00b      	beq.n	80080a6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b03      	cmp	r3, #3
 8008092:	d825      	bhi.n	80080e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d008      	beq.n	80080ac <RCC_GetSysClockFreqFromPLLSource+0x34>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2b02      	cmp	r3, #2
 800809e:	d11f      	bne.n	80080e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80080a0:	4b25      	ldr	r3, [pc, #148]	; (8008138 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80080a2:	613b      	str	r3, [r7, #16]
    break;
 80080a4:	e01f      	b.n	80080e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80080a6:	4b25      	ldr	r3, [pc, #148]	; (800813c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80080a8:	613b      	str	r3, [r7, #16]
    break;
 80080aa:	e01c      	b.n	80080e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80080ac:	4b21      	ldr	r3, [pc, #132]	; (8008134 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0308 	and.w	r3, r3, #8
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d107      	bne.n	80080c8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80080b8:	4b1e      	ldr	r3, [pc, #120]	; (8008134 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80080ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080be:	0a1b      	lsrs	r3, r3, #8
 80080c0:	f003 030f 	and.w	r3, r3, #15
 80080c4:	617b      	str	r3, [r7, #20]
 80080c6:	e005      	b.n	80080d4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80080c8:	4b1a      	ldr	r3, [pc, #104]	; (8008134 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	091b      	lsrs	r3, r3, #4
 80080ce:	f003 030f 	and.w	r3, r3, #15
 80080d2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80080d4:	4a1a      	ldr	r2, [pc, #104]	; (8008140 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080dc:	613b      	str	r3, [r7, #16]
    break;
 80080de:	e002      	b.n	80080e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80080e0:	2300      	movs	r3, #0
 80080e2:	613b      	str	r3, [r7, #16]
    break;
 80080e4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80080e6:	4b13      	ldr	r3, [pc, #76]	; (8008134 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	091b      	lsrs	r3, r3, #4
 80080ec:	f003 030f 	and.w	r3, r3, #15
 80080f0:	3301      	adds	r3, #1
 80080f2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80080f4:	4b0f      	ldr	r3, [pc, #60]	; (8008134 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	0a1b      	lsrs	r3, r3, #8
 80080fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	fb03 f202 	mul.w	r2, r3, r2
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	fbb2 f3f3 	udiv	r3, r2, r3
 800810a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800810c:	4b09      	ldr	r3, [pc, #36]	; (8008134 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	0e5b      	lsrs	r3, r3, #25
 8008112:	f003 0303 	and.w	r3, r3, #3
 8008116:	3301      	adds	r3, #1
 8008118:	005b      	lsls	r3, r3, #1
 800811a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	fbb2 f3f3 	udiv	r3, r2, r3
 8008124:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8008126:	683b      	ldr	r3, [r7, #0]
}
 8008128:	4618      	mov	r0, r3
 800812a:	371c      	adds	r7, #28
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	40021000 	.word	0x40021000
 8008138:	00f42400 	.word	0x00f42400
 800813c:	007a1200 	.word	0x007a1200
 8008140:	0800f838 	.word	0x0800f838

08008144 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800814c:	2300      	movs	r3, #0
 800814e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008150:	2300      	movs	r3, #0
 8008152:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800815c:	2b00      	cmp	r3, #0
 800815e:	d040      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008164:	2b80      	cmp	r3, #128	; 0x80
 8008166:	d02a      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008168:	2b80      	cmp	r3, #128	; 0x80
 800816a:	d825      	bhi.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800816c:	2b60      	cmp	r3, #96	; 0x60
 800816e:	d026      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008170:	2b60      	cmp	r3, #96	; 0x60
 8008172:	d821      	bhi.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008174:	2b40      	cmp	r3, #64	; 0x40
 8008176:	d006      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8008178:	2b40      	cmp	r3, #64	; 0x40
 800817a:	d81d      	bhi.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800817c:	2b00      	cmp	r3, #0
 800817e:	d009      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8008180:	2b20      	cmp	r3, #32
 8008182:	d010      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008184:	e018      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008186:	4b89      	ldr	r3, [pc, #548]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	4a88      	ldr	r2, [pc, #544]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800818c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008190:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008192:	e015      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	3304      	adds	r3, #4
 8008198:	2100      	movs	r1, #0
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fb02 	bl	80087a4 <RCCEx_PLLSAI1_Config>
 80081a0:	4603      	mov	r3, r0
 80081a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80081a4:	e00c      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3320      	adds	r3, #32
 80081aa:	2100      	movs	r1, #0
 80081ac:	4618      	mov	r0, r3
 80081ae:	f000 fbed 	bl	800898c <RCCEx_PLLSAI2_Config>
 80081b2:	4603      	mov	r3, r0
 80081b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80081b6:	e003      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	74fb      	strb	r3, [r7, #19]
      break;
 80081bc:	e000      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80081be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081c0:	7cfb      	ldrb	r3, [r7, #19]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10b      	bne.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80081c6:	4b79      	ldr	r3, [pc, #484]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80081c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081cc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081d4:	4975      	ldr	r1, [pc, #468]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80081dc:	e001      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081de:	7cfb      	ldrb	r3, [r7, #19]
 80081e0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d047      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081f6:	d030      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80081f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081fc:	d82a      	bhi.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80081fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008202:	d02a      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008204:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008208:	d824      	bhi.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800820a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800820e:	d008      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008214:	d81e      	bhi.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00a      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800821a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800821e:	d010      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008220:	e018      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008222:	4b62      	ldr	r3, [pc, #392]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	4a61      	ldr	r2, [pc, #388]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800822c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800822e:	e015      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	3304      	adds	r3, #4
 8008234:	2100      	movs	r1, #0
 8008236:	4618      	mov	r0, r3
 8008238:	f000 fab4 	bl	80087a4 <RCCEx_PLLSAI1_Config>
 800823c:	4603      	mov	r3, r0
 800823e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008240:	e00c      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	3320      	adds	r3, #32
 8008246:	2100      	movs	r1, #0
 8008248:	4618      	mov	r0, r3
 800824a:	f000 fb9f 	bl	800898c <RCCEx_PLLSAI2_Config>
 800824e:	4603      	mov	r3, r0
 8008250:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008252:	e003      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	74fb      	strb	r3, [r7, #19]
      break;
 8008258:	e000      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800825a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800825c:	7cfb      	ldrb	r3, [r7, #19]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10b      	bne.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008262:	4b52      	ldr	r3, [pc, #328]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008264:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008268:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008270:	494e      	ldr	r1, [pc, #312]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008272:	4313      	orrs	r3, r2
 8008274:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8008278:	e001      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800827a:	7cfb      	ldrb	r3, [r7, #19]
 800827c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 809f 	beq.w	80083ca <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800828c:	2300      	movs	r3, #0
 800828e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008290:	4b46      	ldr	r3, [pc, #280]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d101      	bne.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800829c:	2301      	movs	r3, #1
 800829e:	e000      	b.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80082a0:	2300      	movs	r3, #0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00d      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082a6:	4b41      	ldr	r3, [pc, #260]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80082a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082aa:	4a40      	ldr	r2, [pc, #256]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80082ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082b0:	6593      	str	r3, [r2, #88]	; 0x58
 80082b2:	4b3e      	ldr	r3, [pc, #248]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80082b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ba:	60bb      	str	r3, [r7, #8]
 80082bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082be:	2301      	movs	r3, #1
 80082c0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082c2:	4b3b      	ldr	r3, [pc, #236]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a3a      	ldr	r2, [pc, #232]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80082c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082ce:	f7fc fd1d 	bl	8004d0c <HAL_GetTick>
 80082d2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80082d4:	e009      	b.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082d6:	f7fc fd19 	bl	8004d0c <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d902      	bls.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	74fb      	strb	r3, [r7, #19]
        break;
 80082e8:	e005      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80082ea:	4b31      	ldr	r3, [pc, #196]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d0ef      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80082f6:	7cfb      	ldrb	r3, [r7, #19]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d15b      	bne.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80082fc:	4b2b      	ldr	r3, [pc, #172]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80082fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008306:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d01f      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	429a      	cmp	r2, r3
 8008318:	d019      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800831a:	4b24      	ldr	r3, [pc, #144]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800831c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008324:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008326:	4b21      	ldr	r3, [pc, #132]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800832c:	4a1f      	ldr	r2, [pc, #124]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800832e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008336:	4b1d      	ldr	r3, [pc, #116]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800833c:	4a1b      	ldr	r2, [pc, #108]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800833e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008346:	4a19      	ldr	r2, [pc, #100]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	2b00      	cmp	r3, #0
 8008356:	d016      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008358:	f7fc fcd8 	bl	8004d0c <HAL_GetTick>
 800835c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800835e:	e00b      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008360:	f7fc fcd4 	bl	8004d0c <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	f241 3288 	movw	r2, #5000	; 0x1388
 800836e:	4293      	cmp	r3, r2
 8008370:	d902      	bls.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	74fb      	strb	r3, [r7, #19]
            break;
 8008376:	e006      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008378:	4b0c      	ldr	r3, [pc, #48]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800837a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800837e:	f003 0302 	and.w	r3, r3, #2
 8008382:	2b00      	cmp	r3, #0
 8008384:	d0ec      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8008386:	7cfb      	ldrb	r3, [r7, #19]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10c      	bne.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800838c:	4b07      	ldr	r3, [pc, #28]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800838e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008392:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800839c:	4903      	ldr	r1, [pc, #12]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80083a4:	e008      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083a6:	7cfb      	ldrb	r3, [r7, #19]
 80083a8:	74bb      	strb	r3, [r7, #18]
 80083aa:	e005      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80083ac:	40021000 	.word	0x40021000
 80083b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b4:	7cfb      	ldrb	r3, [r7, #19]
 80083b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80083b8:	7c7b      	ldrb	r3, [r7, #17]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d105      	bne.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083be:	4ba0      	ldr	r3, [pc, #640]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c2:	4a9f      	ldr	r2, [pc, #636]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00a      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80083d6:	4b9a      	ldr	r3, [pc, #616]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083dc:	f023 0203 	bic.w	r2, r3, #3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e4:	4996      	ldr	r1, [pc, #600]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 0302 	and.w	r3, r3, #2
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00a      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80083f8:	4b91      	ldr	r3, [pc, #580]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083fe:	f023 020c 	bic.w	r2, r3, #12
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008406:	498e      	ldr	r1, [pc, #568]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008408:	4313      	orrs	r3, r2
 800840a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0304 	and.w	r3, r3, #4
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00a      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800841a:	4b89      	ldr	r3, [pc, #548]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800841c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008420:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008428:	4985      	ldr	r1, [pc, #532]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800842a:	4313      	orrs	r3, r2
 800842c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0308 	and.w	r3, r3, #8
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00a      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800843c:	4b80      	ldr	r3, [pc, #512]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800843e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008442:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800844a:	497d      	ldr	r1, [pc, #500]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800844c:	4313      	orrs	r3, r2
 800844e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0310 	and.w	r3, r3, #16
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00a      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800845e:	4b78      	ldr	r3, [pc, #480]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008464:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800846c:	4974      	ldr	r1, [pc, #464]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800846e:	4313      	orrs	r3, r2
 8008470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0320 	and.w	r3, r3, #32
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00a      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008480:	4b6f      	ldr	r3, [pc, #444]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008486:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800848e:	496c      	ldr	r1, [pc, #432]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008490:	4313      	orrs	r3, r2
 8008492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00a      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084a2:	4b67      	ldr	r3, [pc, #412]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80084a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084b0:	4963      	ldr	r1, [pc, #396]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00a      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80084c4:	4b5e      	ldr	r3, [pc, #376]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80084c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084d2:	495b      	ldr	r1, [pc, #364]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00a      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80084e6:	4b56      	ldr	r3, [pc, #344]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80084e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f4:	4952      	ldr	r1, [pc, #328]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00a      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008508:	4b4d      	ldr	r3, [pc, #308]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800850a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800850e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008516:	494a      	ldr	r1, [pc, #296]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008518:	4313      	orrs	r3, r2
 800851a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00a      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800852a:	4b45      	ldr	r3, [pc, #276]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800852c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008530:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008538:	4941      	ldr	r1, [pc, #260]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800853a:	4313      	orrs	r3, r2
 800853c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00a      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800854c:	4b3c      	ldr	r3, [pc, #240]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800854e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008552:	f023 0203 	bic.w	r2, r3, #3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800855a:	4939      	ldr	r1, [pc, #228]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800855c:	4313      	orrs	r3, r2
 800855e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d028      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800856e:	4b34      	ldr	r3, [pc, #208]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008574:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800857c:	4930      	ldr	r1, [pc, #192]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800857e:	4313      	orrs	r3, r2
 8008580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008588:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800858c:	d106      	bne.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800858e:	4b2c      	ldr	r3, [pc, #176]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	4a2b      	ldr	r2, [pc, #172]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008598:	60d3      	str	r3, [r2, #12]
 800859a:	e011      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085a4:	d10c      	bne.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	3304      	adds	r3, #4
 80085aa:	2101      	movs	r1, #1
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 f8f9 	bl	80087a4 <RCCEx_PLLSAI1_Config>
 80085b2:	4603      	mov	r3, r0
 80085b4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80085b6:	7cfb      	ldrb	r3, [r7, #19]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80085bc:	7cfb      	ldrb	r3, [r7, #19]
 80085be:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d04d      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085d4:	d108      	bne.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80085d6:	4b1a      	ldr	r3, [pc, #104]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80085d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085dc:	4a18      	ldr	r2, [pc, #96]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80085de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085e2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80085e6:	e012      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80085e8:	4b15      	ldr	r3, [pc, #84]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80085ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085ee:	4a14      	ldr	r2, [pc, #80]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80085f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085f4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80085f8:	4b11      	ldr	r3, [pc, #68]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80085fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008606:	490e      	ldr	r1, [pc, #56]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008608:	4313      	orrs	r3, r2
 800860a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008616:	d106      	bne.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008618:	4b09      	ldr	r3, [pc, #36]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	4a08      	ldr	r2, [pc, #32]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800861e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008622:	60d3      	str	r3, [r2, #12]
 8008624:	e020      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800862a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800862e:	d109      	bne.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008630:	4b03      	ldr	r3, [pc, #12]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	4a02      	ldr	r2, [pc, #8]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800863a:	60d3      	str	r3, [r2, #12]
 800863c:	e014      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800863e:	bf00      	nop
 8008640:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008648:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800864c:	d10c      	bne.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	3304      	adds	r3, #4
 8008652:	2101      	movs	r1, #1
 8008654:	4618      	mov	r0, r3
 8008656:	f000 f8a5 	bl	80087a4 <RCCEx_PLLSAI1_Config>
 800865a:	4603      	mov	r3, r0
 800865c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800865e:	7cfb      	ldrb	r3, [r7, #19]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8008664:	7cfb      	ldrb	r3, [r7, #19]
 8008666:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d028      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008674:	4b4a      	ldr	r3, [pc, #296]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800867a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008682:	4947      	ldr	r1, [pc, #284]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008684:	4313      	orrs	r3, r2
 8008686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800868e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008692:	d106      	bne.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008694:	4b42      	ldr	r3, [pc, #264]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	4a41      	ldr	r2, [pc, #260]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800869a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800869e:	60d3      	str	r3, [r2, #12]
 80086a0:	e011      	b.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80086aa:	d10c      	bne.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	3304      	adds	r3, #4
 80086b0:	2101      	movs	r1, #1
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 f876 	bl	80087a4 <RCCEx_PLLSAI1_Config>
 80086b8:	4603      	mov	r3, r0
 80086ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80086bc:	7cfb      	ldrb	r3, [r7, #19]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d001      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80086c2:	7cfb      	ldrb	r3, [r7, #19]
 80086c4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d01e      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80086d2:	4b33      	ldr	r3, [pc, #204]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086e2:	492f      	ldr	r1, [pc, #188]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086e4:	4313      	orrs	r3, r2
 80086e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086f4:	d10c      	bne.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	3304      	adds	r3, #4
 80086fa:	2102      	movs	r1, #2
 80086fc:	4618      	mov	r0, r3
 80086fe:	f000 f851 	bl	80087a4 <RCCEx_PLLSAI1_Config>
 8008702:	4603      	mov	r3, r0
 8008704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008706:	7cfb      	ldrb	r3, [r7, #19]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800870c:	7cfb      	ldrb	r3, [r7, #19]
 800870e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00b      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800871c:	4b20      	ldr	r3, [pc, #128]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800871e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008722:	f023 0204 	bic.w	r2, r3, #4
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800872c:	491c      	ldr	r1, [pc, #112]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800872e:	4313      	orrs	r3, r2
 8008730:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00b      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008740:	4b17      	ldr	r3, [pc, #92]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008742:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008746:	f023 0218 	bic.w	r2, r3, #24
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008750:	4913      	ldr	r1, [pc, #76]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008752:	4313      	orrs	r3, r2
 8008754:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d017      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008764:	4b0e      	ldr	r3, [pc, #56]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008766:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800876a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008774:	490a      	ldr	r1, [pc, #40]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008776:	4313      	orrs	r3, r2
 8008778:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008782:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008786:	d105      	bne.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008788:	4b05      	ldr	r3, [pc, #20]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	4a04      	ldr	r2, [pc, #16]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800878e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008792:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008794:	7cbb      	ldrb	r3, [r7, #18]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	40021000 	.word	0x40021000

080087a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80087b2:	4b72      	ldr	r3, [pc, #456]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	f003 0303 	and.w	r3, r3, #3
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00e      	beq.n	80087dc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80087be:	4b6f      	ldr	r3, [pc, #444]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	f003 0203 	and.w	r2, r3, #3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d103      	bne.n	80087d6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
       ||
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d142      	bne.n	800885c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	73fb      	strb	r3, [r7, #15]
 80087da:	e03f      	b.n	800885c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b03      	cmp	r3, #3
 80087e2:	d018      	beq.n	8008816 <RCCEx_PLLSAI1_Config+0x72>
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d825      	bhi.n	8008834 <RCCEx_PLLSAI1_Config+0x90>
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d002      	beq.n	80087f2 <RCCEx_PLLSAI1_Config+0x4e>
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d009      	beq.n	8008804 <RCCEx_PLLSAI1_Config+0x60>
 80087f0:	e020      	b.n	8008834 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80087f2:	4b62      	ldr	r3, [pc, #392]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 0302 	and.w	r3, r3, #2
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d11d      	bne.n	800883a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008802:	e01a      	b.n	800883a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008804:	4b5d      	ldr	r3, [pc, #372]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800880c:	2b00      	cmp	r3, #0
 800880e:	d116      	bne.n	800883e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008814:	e013      	b.n	800883e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008816:	4b59      	ldr	r3, [pc, #356]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10f      	bne.n	8008842 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008822:	4b56      	ldr	r3, [pc, #344]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d109      	bne.n	8008842 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008832:	e006      	b.n	8008842 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	73fb      	strb	r3, [r7, #15]
      break;
 8008838:	e004      	b.n	8008844 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800883a:	bf00      	nop
 800883c:	e002      	b.n	8008844 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800883e:	bf00      	nop
 8008840:	e000      	b.n	8008844 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008842:	bf00      	nop
    }

    if(status == HAL_OK)
 8008844:	7bfb      	ldrb	r3, [r7, #15]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d108      	bne.n	800885c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800884a:	4b4c      	ldr	r3, [pc, #304]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	f023 0203 	bic.w	r2, r3, #3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4949      	ldr	r1, [pc, #292]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008858:	4313      	orrs	r3, r2
 800885a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800885c:	7bfb      	ldrb	r3, [r7, #15]
 800885e:	2b00      	cmp	r3, #0
 8008860:	f040 8086 	bne.w	8008970 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008864:	4b45      	ldr	r3, [pc, #276]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a44      	ldr	r2, [pc, #272]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 800886a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800886e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008870:	f7fc fa4c 	bl	8004d0c <HAL_GetTick>
 8008874:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008876:	e009      	b.n	800888c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008878:	f7fc fa48 	bl	8004d0c <HAL_GetTick>
 800887c:	4602      	mov	r2, r0
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	2b02      	cmp	r3, #2
 8008884:	d902      	bls.n	800888c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	73fb      	strb	r3, [r7, #15]
        break;
 800888a:	e005      	b.n	8008898 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800888c:	4b3b      	ldr	r3, [pc, #236]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1ef      	bne.n	8008878 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008898:	7bfb      	ldrb	r3, [r7, #15]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d168      	bne.n	8008970 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d113      	bne.n	80088cc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80088a4:	4b35      	ldr	r3, [pc, #212]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 80088a6:	691a      	ldr	r2, [r3, #16]
 80088a8:	4b35      	ldr	r3, [pc, #212]	; (8008980 <RCCEx_PLLSAI1_Config+0x1dc>)
 80088aa:	4013      	ands	r3, r2
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	6892      	ldr	r2, [r2, #8]
 80088b0:	0211      	lsls	r1, r2, #8
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	68d2      	ldr	r2, [r2, #12]
 80088b6:	06d2      	lsls	r2, r2, #27
 80088b8:	4311      	orrs	r1, r2
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	6852      	ldr	r2, [r2, #4]
 80088be:	3a01      	subs	r2, #1
 80088c0:	0112      	lsls	r2, r2, #4
 80088c2:	430a      	orrs	r2, r1
 80088c4:	492d      	ldr	r1, [pc, #180]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 80088c6:	4313      	orrs	r3, r2
 80088c8:	610b      	str	r3, [r1, #16]
 80088ca:	e02d      	b.n	8008928 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d115      	bne.n	80088fe <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80088d2:	4b2a      	ldr	r3, [pc, #168]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 80088d4:	691a      	ldr	r2, [r3, #16]
 80088d6:	4b2b      	ldr	r3, [pc, #172]	; (8008984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80088d8:	4013      	ands	r3, r2
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	6892      	ldr	r2, [r2, #8]
 80088de:	0211      	lsls	r1, r2, #8
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	6912      	ldr	r2, [r2, #16]
 80088e4:	0852      	lsrs	r2, r2, #1
 80088e6:	3a01      	subs	r2, #1
 80088e8:	0552      	lsls	r2, r2, #21
 80088ea:	4311      	orrs	r1, r2
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	6852      	ldr	r2, [r2, #4]
 80088f0:	3a01      	subs	r2, #1
 80088f2:	0112      	lsls	r2, r2, #4
 80088f4:	430a      	orrs	r2, r1
 80088f6:	4921      	ldr	r1, [pc, #132]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 80088f8:	4313      	orrs	r3, r2
 80088fa:	610b      	str	r3, [r1, #16]
 80088fc:	e014      	b.n	8008928 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80088fe:	4b1f      	ldr	r3, [pc, #124]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008900:	691a      	ldr	r2, [r3, #16]
 8008902:	4b21      	ldr	r3, [pc, #132]	; (8008988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008904:	4013      	ands	r3, r2
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	6892      	ldr	r2, [r2, #8]
 800890a:	0211      	lsls	r1, r2, #8
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	6952      	ldr	r2, [r2, #20]
 8008910:	0852      	lsrs	r2, r2, #1
 8008912:	3a01      	subs	r2, #1
 8008914:	0652      	lsls	r2, r2, #25
 8008916:	4311      	orrs	r1, r2
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	6852      	ldr	r2, [r2, #4]
 800891c:	3a01      	subs	r2, #1
 800891e:	0112      	lsls	r2, r2, #4
 8008920:	430a      	orrs	r2, r1
 8008922:	4916      	ldr	r1, [pc, #88]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008924:	4313      	orrs	r3, r2
 8008926:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008928:	4b14      	ldr	r3, [pc, #80]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a13      	ldr	r2, [pc, #76]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 800892e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008932:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008934:	f7fc f9ea 	bl	8004d0c <HAL_GetTick>
 8008938:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800893a:	e009      	b.n	8008950 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800893c:	f7fc f9e6 	bl	8004d0c <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	2b02      	cmp	r3, #2
 8008948:	d902      	bls.n	8008950 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	73fb      	strb	r3, [r7, #15]
          break;
 800894e:	e005      	b.n	800895c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008950:	4b0a      	ldr	r3, [pc, #40]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d0ef      	beq.n	800893c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d106      	bne.n	8008970 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008962:	4b06      	ldr	r3, [pc, #24]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008964:	691a      	ldr	r2, [r3, #16]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	4904      	ldr	r1, [pc, #16]	; (800897c <RCCEx_PLLSAI1_Config+0x1d8>)
 800896c:	4313      	orrs	r3, r2
 800896e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008970:	7bfb      	ldrb	r3, [r7, #15]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	40021000 	.word	0x40021000
 8008980:	07ff800f 	.word	0x07ff800f
 8008984:	ff9f800f 	.word	0xff9f800f
 8008988:	f9ff800f 	.word	0xf9ff800f

0800898c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800899a:	4b72      	ldr	r3, [pc, #456]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	f003 0303 	and.w	r3, r3, #3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00e      	beq.n	80089c4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80089a6:	4b6f      	ldr	r3, [pc, #444]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	f003 0203 	and.w	r2, r3, #3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d103      	bne.n	80089be <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
       ||
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d142      	bne.n	8008a44 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	73fb      	strb	r3, [r7, #15]
 80089c2:	e03f      	b.n	8008a44 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2b03      	cmp	r3, #3
 80089ca:	d018      	beq.n	80089fe <RCCEx_PLLSAI2_Config+0x72>
 80089cc:	2b03      	cmp	r3, #3
 80089ce:	d825      	bhi.n	8008a1c <RCCEx_PLLSAI2_Config+0x90>
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d002      	beq.n	80089da <RCCEx_PLLSAI2_Config+0x4e>
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d009      	beq.n	80089ec <RCCEx_PLLSAI2_Config+0x60>
 80089d8:	e020      	b.n	8008a1c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80089da:	4b62      	ldr	r3, [pc, #392]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0302 	and.w	r3, r3, #2
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d11d      	bne.n	8008a22 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089ea:	e01a      	b.n	8008a22 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80089ec:	4b5d      	ldr	r3, [pc, #372]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d116      	bne.n	8008a26 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089fc:	e013      	b.n	8008a26 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80089fe:	4b59      	ldr	r3, [pc, #356]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10f      	bne.n	8008a2a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008a0a:	4b56      	ldr	r3, [pc, #344]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d109      	bne.n	8008a2a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008a1a:	e006      	b.n	8008a2a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a20:	e004      	b.n	8008a2c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008a22:	bf00      	nop
 8008a24:	e002      	b.n	8008a2c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008a26:	bf00      	nop
 8008a28:	e000      	b.n	8008a2c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008a2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d108      	bne.n	8008a44 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8008a32:	4b4c      	ldr	r3, [pc, #304]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	f023 0203 	bic.w	r2, r3, #3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4949      	ldr	r1, [pc, #292]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a40:	4313      	orrs	r3, r2
 8008a42:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	f040 8086 	bne.w	8008b58 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008a4c:	4b45      	ldr	r3, [pc, #276]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a44      	ldr	r2, [pc, #272]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a58:	f7fc f958 	bl	8004d0c <HAL_GetTick>
 8008a5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008a5e:	e009      	b.n	8008a74 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008a60:	f7fc f954 	bl	8004d0c <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d902      	bls.n	8008a74 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	73fb      	strb	r3, [r7, #15]
        break;
 8008a72:	e005      	b.n	8008a80 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008a74:	4b3b      	ldr	r3, [pc, #236]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1ef      	bne.n	8008a60 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d168      	bne.n	8008b58 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d113      	bne.n	8008ab4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008a8c:	4b35      	ldr	r3, [pc, #212]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a8e:	695a      	ldr	r2, [r3, #20]
 8008a90:	4b35      	ldr	r3, [pc, #212]	; (8008b68 <RCCEx_PLLSAI2_Config+0x1dc>)
 8008a92:	4013      	ands	r3, r2
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	6892      	ldr	r2, [r2, #8]
 8008a98:	0211      	lsls	r1, r2, #8
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	68d2      	ldr	r2, [r2, #12]
 8008a9e:	06d2      	lsls	r2, r2, #27
 8008aa0:	4311      	orrs	r1, r2
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	6852      	ldr	r2, [r2, #4]
 8008aa6:	3a01      	subs	r2, #1
 8008aa8:	0112      	lsls	r2, r2, #4
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	492d      	ldr	r1, [pc, #180]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	614b      	str	r3, [r1, #20]
 8008ab2:	e02d      	b.n	8008b10 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d115      	bne.n	8008ae6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008aba:	4b2a      	ldr	r3, [pc, #168]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008abc:	695a      	ldr	r2, [r3, #20]
 8008abe:	4b2b      	ldr	r3, [pc, #172]	; (8008b6c <RCCEx_PLLSAI2_Config+0x1e0>)
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	6892      	ldr	r2, [r2, #8]
 8008ac6:	0211      	lsls	r1, r2, #8
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	6912      	ldr	r2, [r2, #16]
 8008acc:	0852      	lsrs	r2, r2, #1
 8008ace:	3a01      	subs	r2, #1
 8008ad0:	0552      	lsls	r2, r2, #21
 8008ad2:	4311      	orrs	r1, r2
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	6852      	ldr	r2, [r2, #4]
 8008ad8:	3a01      	subs	r2, #1
 8008ada:	0112      	lsls	r2, r2, #4
 8008adc:	430a      	orrs	r2, r1
 8008ade:	4921      	ldr	r1, [pc, #132]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	614b      	str	r3, [r1, #20]
 8008ae4:	e014      	b.n	8008b10 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008ae6:	4b1f      	ldr	r3, [pc, #124]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ae8:	695a      	ldr	r2, [r3, #20]
 8008aea:	4b21      	ldr	r3, [pc, #132]	; (8008b70 <RCCEx_PLLSAI2_Config+0x1e4>)
 8008aec:	4013      	ands	r3, r2
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	6892      	ldr	r2, [r2, #8]
 8008af2:	0211      	lsls	r1, r2, #8
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	6952      	ldr	r2, [r2, #20]
 8008af8:	0852      	lsrs	r2, r2, #1
 8008afa:	3a01      	subs	r2, #1
 8008afc:	0652      	lsls	r2, r2, #25
 8008afe:	4311      	orrs	r1, r2
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	6852      	ldr	r2, [r2, #4]
 8008b04:	3a01      	subs	r2, #1
 8008b06:	0112      	lsls	r2, r2, #4
 8008b08:	430a      	orrs	r2, r1
 8008b0a:	4916      	ldr	r1, [pc, #88]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008b10:	4b14      	ldr	r3, [pc, #80]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a13      	ldr	r2, [pc, #76]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b1c:	f7fc f8f6 	bl	8004d0c <HAL_GetTick>
 8008b20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008b22:	e009      	b.n	8008b38 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008b24:	f7fc f8f2 	bl	8004d0c <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d902      	bls.n	8008b38 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	73fb      	strb	r3, [r7, #15]
          break;
 8008b36:	e005      	b.n	8008b44 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008b38:	4b0a      	ldr	r3, [pc, #40]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d0ef      	beq.n	8008b24 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d106      	bne.n	8008b58 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008b4a:	4b06      	ldr	r3, [pc, #24]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b4c:	695a      	ldr	r2, [r3, #20]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	4904      	ldr	r1, [pc, #16]	; (8008b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b54:	4313      	orrs	r3, r2
 8008b56:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	40021000 	.word	0x40021000
 8008b68:	07ff800f 	.word	0x07ff800f
 8008b6c:	ff9f800f 	.word	0xff9f800f
 8008b70:	f9ff800f 	.word	0xf9ff800f

08008b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e049      	b.n	8008c1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d106      	bne.n	8008ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f841 	bl	8008c22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2202      	movs	r2, #2
 8008ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	3304      	adds	r3, #4
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	f000 f9da 	bl	8008f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008c22:	b480      	push	{r7}
 8008c24:	b083      	sub	sp, #12
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008c2a:	bf00      	nop
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
	...

08008c38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d001      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e04f      	b.n	8008cf0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2202      	movs	r2, #2
 8008c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68da      	ldr	r2, [r3, #12]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f042 0201 	orr.w	r2, r2, #1
 8008c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a23      	ldr	r2, [pc, #140]	; (8008cfc <HAL_TIM_Base_Start_IT+0xc4>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d01d      	beq.n	8008cae <HAL_TIM_Base_Start_IT+0x76>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c7a:	d018      	beq.n	8008cae <HAL_TIM_Base_Start_IT+0x76>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a1f      	ldr	r2, [pc, #124]	; (8008d00 <HAL_TIM_Base_Start_IT+0xc8>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d013      	beq.n	8008cae <HAL_TIM_Base_Start_IT+0x76>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a1e      	ldr	r2, [pc, #120]	; (8008d04 <HAL_TIM_Base_Start_IT+0xcc>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d00e      	beq.n	8008cae <HAL_TIM_Base_Start_IT+0x76>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a1c      	ldr	r2, [pc, #112]	; (8008d08 <HAL_TIM_Base_Start_IT+0xd0>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d009      	beq.n	8008cae <HAL_TIM_Base_Start_IT+0x76>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a1b      	ldr	r2, [pc, #108]	; (8008d0c <HAL_TIM_Base_Start_IT+0xd4>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d004      	beq.n	8008cae <HAL_TIM_Base_Start_IT+0x76>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a19      	ldr	r2, [pc, #100]	; (8008d10 <HAL_TIM_Base_Start_IT+0xd8>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d115      	bne.n	8008cda <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	689a      	ldr	r2, [r3, #8]
 8008cb4:	4b17      	ldr	r3, [pc, #92]	; (8008d14 <HAL_TIM_Base_Start_IT+0xdc>)
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2b06      	cmp	r3, #6
 8008cbe:	d015      	beq.n	8008cec <HAL_TIM_Base_Start_IT+0xb4>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cc6:	d011      	beq.n	8008cec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f042 0201 	orr.w	r2, r2, #1
 8008cd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cd8:	e008      	b.n	8008cec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f042 0201 	orr.w	r2, r2, #1
 8008ce8:	601a      	str	r2, [r3, #0]
 8008cea:	e000      	b.n	8008cee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	40012c00 	.word	0x40012c00
 8008d00:	40000400 	.word	0x40000400
 8008d04:	40000800 	.word	0x40000800
 8008d08:	40000c00 	.word	0x40000c00
 8008d0c:	40013400 	.word	0x40013400
 8008d10:	40014000 	.word	0x40014000
 8008d14:	00010007 	.word	0x00010007

08008d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	f003 0302 	and.w	r3, r3, #2
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d020      	beq.n	8008d7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d01b      	beq.n	8008d7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f06f 0202 	mvn.w	r2, #2
 8008d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2201      	movs	r2, #1
 8008d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	f003 0303 	and.w	r3, r3, #3
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d003      	beq.n	8008d6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f8e4 	bl	8008f30 <HAL_TIM_IC_CaptureCallback>
 8008d68:	e005      	b.n	8008d76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f8d6 	bl	8008f1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f8e7 	bl	8008f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	f003 0304 	and.w	r3, r3, #4
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d020      	beq.n	8008dc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f003 0304 	and.w	r3, r3, #4
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d01b      	beq.n	8008dc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f06f 0204 	mvn.w	r2, #4
 8008d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2202      	movs	r2, #2
 8008d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d003      	beq.n	8008db6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f8be 	bl	8008f30 <HAL_TIM_IC_CaptureCallback>
 8008db4:	e005      	b.n	8008dc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f8b0 	bl	8008f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 f8c1 	bl	8008f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	f003 0308 	and.w	r3, r3, #8
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d020      	beq.n	8008e14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f003 0308 	and.w	r3, r3, #8
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d01b      	beq.n	8008e14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f06f 0208 	mvn.w	r2, #8
 8008de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2204      	movs	r2, #4
 8008dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	69db      	ldr	r3, [r3, #28]
 8008df2:	f003 0303 	and.w	r3, r3, #3
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f898 	bl	8008f30 <HAL_TIM_IC_CaptureCallback>
 8008e00:	e005      	b.n	8008e0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f88a 	bl	8008f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 f89b 	bl	8008f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	f003 0310 	and.w	r3, r3, #16
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d020      	beq.n	8008e60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f003 0310 	and.w	r3, r3, #16
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d01b      	beq.n	8008e60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f06f 0210 	mvn.w	r2, #16
 8008e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2208      	movs	r2, #8
 8008e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	69db      	ldr	r3, [r3, #28]
 8008e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d003      	beq.n	8008e4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f872 	bl	8008f30 <HAL_TIM_IC_CaptureCallback>
 8008e4c:	e005      	b.n	8008e5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f864 	bl	8008f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f875 	bl	8008f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00c      	beq.n	8008e84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d007      	beq.n	8008e84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f06f 0201 	mvn.w	r2, #1
 8008e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7f9 ff26 	bl	8002cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00c      	beq.n	8008ea8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d007      	beq.n	8008ea8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f906 	bl	80090b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00c      	beq.n	8008ecc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d007      	beq.n	8008ecc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f8fe 	bl	80090c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00c      	beq.n	8008ef0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d007      	beq.n	8008ef0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f834 	bl	8008f58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	f003 0320 	and.w	r3, r3, #32
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00c      	beq.n	8008f14 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f003 0320 	and.w	r3, r3, #32
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d007      	beq.n	8008f14 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f06f 0220 	mvn.w	r2, #32
 8008f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f8c6 	bl	80090a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f14:	bf00      	nop
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f24:	bf00      	nop
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f38:	bf00      	nop
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f4c:	bf00      	nop
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a40      	ldr	r2, [pc, #256]	; (8009080 <TIM_Base_SetConfig+0x114>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d013      	beq.n	8008fac <TIM_Base_SetConfig+0x40>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f8a:	d00f      	beq.n	8008fac <TIM_Base_SetConfig+0x40>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a3d      	ldr	r2, [pc, #244]	; (8009084 <TIM_Base_SetConfig+0x118>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d00b      	beq.n	8008fac <TIM_Base_SetConfig+0x40>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a3c      	ldr	r2, [pc, #240]	; (8009088 <TIM_Base_SetConfig+0x11c>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d007      	beq.n	8008fac <TIM_Base_SetConfig+0x40>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a3b      	ldr	r2, [pc, #236]	; (800908c <TIM_Base_SetConfig+0x120>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d003      	beq.n	8008fac <TIM_Base_SetConfig+0x40>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a3a      	ldr	r2, [pc, #232]	; (8009090 <TIM_Base_SetConfig+0x124>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d108      	bne.n	8008fbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a2f      	ldr	r2, [pc, #188]	; (8009080 <TIM_Base_SetConfig+0x114>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d01f      	beq.n	8009006 <TIM_Base_SetConfig+0x9a>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fcc:	d01b      	beq.n	8009006 <TIM_Base_SetConfig+0x9a>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a2c      	ldr	r2, [pc, #176]	; (8009084 <TIM_Base_SetConfig+0x118>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d017      	beq.n	8009006 <TIM_Base_SetConfig+0x9a>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a2b      	ldr	r2, [pc, #172]	; (8009088 <TIM_Base_SetConfig+0x11c>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d013      	beq.n	8009006 <TIM_Base_SetConfig+0x9a>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a2a      	ldr	r2, [pc, #168]	; (800908c <TIM_Base_SetConfig+0x120>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d00f      	beq.n	8009006 <TIM_Base_SetConfig+0x9a>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a29      	ldr	r2, [pc, #164]	; (8009090 <TIM_Base_SetConfig+0x124>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d00b      	beq.n	8009006 <TIM_Base_SetConfig+0x9a>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a28      	ldr	r2, [pc, #160]	; (8009094 <TIM_Base_SetConfig+0x128>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d007      	beq.n	8009006 <TIM_Base_SetConfig+0x9a>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a27      	ldr	r2, [pc, #156]	; (8009098 <TIM_Base_SetConfig+0x12c>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d003      	beq.n	8009006 <TIM_Base_SetConfig+0x9a>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a26      	ldr	r2, [pc, #152]	; (800909c <TIM_Base_SetConfig+0x130>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d108      	bne.n	8009018 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800900c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	4313      	orrs	r3, r2
 8009016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	695b      	ldr	r3, [r3, #20]
 8009022:	4313      	orrs	r3, r2
 8009024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	689a      	ldr	r2, [r3, #8]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a10      	ldr	r2, [pc, #64]	; (8009080 <TIM_Base_SetConfig+0x114>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d00f      	beq.n	8009064 <TIM_Base_SetConfig+0xf8>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a12      	ldr	r2, [pc, #72]	; (8009090 <TIM_Base_SetConfig+0x124>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d00b      	beq.n	8009064 <TIM_Base_SetConfig+0xf8>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a11      	ldr	r2, [pc, #68]	; (8009094 <TIM_Base_SetConfig+0x128>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d007      	beq.n	8009064 <TIM_Base_SetConfig+0xf8>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a10      	ldr	r2, [pc, #64]	; (8009098 <TIM_Base_SetConfig+0x12c>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d003      	beq.n	8009064 <TIM_Base_SetConfig+0xf8>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a0f      	ldr	r2, [pc, #60]	; (800909c <TIM_Base_SetConfig+0x130>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d103      	bne.n	800906c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	691a      	ldr	r2, [r3, #16]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	615a      	str	r2, [r3, #20]
}
 8009072:	bf00      	nop
 8009074:	3714      	adds	r7, #20
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	40012c00 	.word	0x40012c00
 8009084:	40000400 	.word	0x40000400
 8009088:	40000800 	.word	0x40000800
 800908c:	40000c00 	.word	0x40000c00
 8009090:	40013400 	.word	0x40013400
 8009094:	40014000 	.word	0x40014000
 8009098:	40014400 	.word	0x40014400
 800909c:	40014800 	.word	0x40014800

080090a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090a8:	bf00      	nop
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090bc:	bf00      	nop
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80090d0:	bf00      	nop
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e042      	b.n	8009174 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d106      	bne.n	8009106 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f7f9 ff53 	bl	8002fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2224      	movs	r2, #36	; 0x24
 800910a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f022 0201 	bic.w	r2, r2, #1
 800911c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009122:	2b00      	cmp	r3, #0
 8009124:	d002      	beq.n	800912c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fbb4 	bl	8009894 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f8b5 	bl	800929c <UART_SetConfig>
 8009132:	4603      	mov	r3, r0
 8009134:	2b01      	cmp	r3, #1
 8009136:	d101      	bne.n	800913c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e01b      	b.n	8009174 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800914a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	689a      	ldr	r2, [r3, #8]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800915a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f042 0201 	orr.w	r2, r2, #1
 800916a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fc33 	bl	80099d8 <UART_CheckIdleState>
 8009172:	4603      	mov	r3, r0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3708      	adds	r7, #8
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b08a      	sub	sp, #40	; 0x28
 8009180:	af02      	add	r7, sp, #8
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	603b      	str	r3, [r7, #0]
 8009188:	4613      	mov	r3, r2
 800918a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009192:	2b20      	cmp	r3, #32
 8009194:	d17c      	bne.n	8009290 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <HAL_UART_Transmit+0x26>
 800919c:	88fb      	ldrh	r3, [r7, #6]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d101      	bne.n	80091a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e075      	b.n	8009292 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2221      	movs	r2, #33	; 0x21
 80091b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091b6:	f7fb fda9 	bl	8004d0c <HAL_GetTick>
 80091ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	88fa      	ldrh	r2, [r7, #6]
 80091c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	88fa      	ldrh	r2, [r7, #6]
 80091c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091d4:	d108      	bne.n	80091e8 <HAL_UART_Transmit+0x6c>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d104      	bne.n	80091e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80091de:	2300      	movs	r3, #0
 80091e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	61bb      	str	r3, [r7, #24]
 80091e6:	e003      	b.n	80091f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091ec:	2300      	movs	r3, #0
 80091ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80091f0:	e031      	b.n	8009256 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	2200      	movs	r2, #0
 80091fa:	2180      	movs	r1, #128	; 0x80
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f000 fc95 	bl	8009b2c <UART_WaitOnFlagUntilTimeout>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d005      	beq.n	8009214 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2220      	movs	r2, #32
 800920c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e03e      	b.n	8009292 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d10b      	bne.n	8009232 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	881a      	ldrh	r2, [r3, #0]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009226:	b292      	uxth	r2, r2
 8009228:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	3302      	adds	r3, #2
 800922e:	61bb      	str	r3, [r7, #24]
 8009230:	e008      	b.n	8009244 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	781a      	ldrb	r2, [r3, #0]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	b292      	uxth	r2, r2
 800923c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	3301      	adds	r3, #1
 8009242:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800924a:	b29b      	uxth	r3, r3
 800924c:	3b01      	subs	r3, #1
 800924e:	b29a      	uxth	r2, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800925c:	b29b      	uxth	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1c7      	bne.n	80091f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2200      	movs	r2, #0
 800926a:	2140      	movs	r1, #64	; 0x40
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f000 fc5d 	bl	8009b2c <UART_WaitOnFlagUntilTimeout>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d005      	beq.n	8009284 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2220      	movs	r2, #32
 800927c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009280:	2303      	movs	r3, #3
 8009282:	e006      	b.n	8009292 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2220      	movs	r2, #32
 8009288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	e000      	b.n	8009292 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8009290:	2302      	movs	r3, #2
  }
}
 8009292:	4618      	mov	r0, r3
 8009294:	3720      	adds	r7, #32
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
	...

0800929c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800929c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092a0:	b08c      	sub	sp, #48	; 0x30
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	689a      	ldr	r2, [r3, #8]
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	431a      	orrs	r2, r3
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	695b      	ldr	r3, [r3, #20]
 80092ba:	431a      	orrs	r2, r3
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	69db      	ldr	r3, [r3, #28]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	4baa      	ldr	r3, [pc, #680]	; (8009574 <UART_SetConfig+0x2d8>)
 80092cc:	4013      	ands	r3, r2
 80092ce:	697a      	ldr	r2, [r7, #20]
 80092d0:	6812      	ldr	r2, [r2, #0]
 80092d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092d4:	430b      	orrs	r3, r1
 80092d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	68da      	ldr	r2, [r3, #12]
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	699b      	ldr	r3, [r3, #24]
 80092f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a9f      	ldr	r2, [pc, #636]	; (8009578 <UART_SetConfig+0x2dc>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d004      	beq.n	8009308 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	6a1b      	ldr	r3, [r3, #32]
 8009302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009304:	4313      	orrs	r3, r2
 8009306:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009312:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009316:	697a      	ldr	r2, [r7, #20]
 8009318:	6812      	ldr	r2, [r2, #0]
 800931a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800931c:	430b      	orrs	r3, r1
 800931e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009326:	f023 010f 	bic.w	r1, r3, #15
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	430a      	orrs	r2, r1
 8009334:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a90      	ldr	r2, [pc, #576]	; (800957c <UART_SetConfig+0x2e0>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d125      	bne.n	800938c <UART_SetConfig+0xf0>
 8009340:	4b8f      	ldr	r3, [pc, #572]	; (8009580 <UART_SetConfig+0x2e4>)
 8009342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009346:	f003 0303 	and.w	r3, r3, #3
 800934a:	2b03      	cmp	r3, #3
 800934c:	d81a      	bhi.n	8009384 <UART_SetConfig+0xe8>
 800934e:	a201      	add	r2, pc, #4	; (adr r2, 8009354 <UART_SetConfig+0xb8>)
 8009350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009354:	08009365 	.word	0x08009365
 8009358:	08009375 	.word	0x08009375
 800935c:	0800936d 	.word	0x0800936d
 8009360:	0800937d 	.word	0x0800937d
 8009364:	2301      	movs	r3, #1
 8009366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800936a:	e116      	b.n	800959a <UART_SetConfig+0x2fe>
 800936c:	2302      	movs	r3, #2
 800936e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009372:	e112      	b.n	800959a <UART_SetConfig+0x2fe>
 8009374:	2304      	movs	r3, #4
 8009376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800937a:	e10e      	b.n	800959a <UART_SetConfig+0x2fe>
 800937c:	2308      	movs	r3, #8
 800937e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009382:	e10a      	b.n	800959a <UART_SetConfig+0x2fe>
 8009384:	2310      	movs	r3, #16
 8009386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800938a:	e106      	b.n	800959a <UART_SetConfig+0x2fe>
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a7c      	ldr	r2, [pc, #496]	; (8009584 <UART_SetConfig+0x2e8>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d138      	bne.n	8009408 <UART_SetConfig+0x16c>
 8009396:	4b7a      	ldr	r3, [pc, #488]	; (8009580 <UART_SetConfig+0x2e4>)
 8009398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800939c:	f003 030c 	and.w	r3, r3, #12
 80093a0:	2b0c      	cmp	r3, #12
 80093a2:	d82d      	bhi.n	8009400 <UART_SetConfig+0x164>
 80093a4:	a201      	add	r2, pc, #4	; (adr r2, 80093ac <UART_SetConfig+0x110>)
 80093a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093aa:	bf00      	nop
 80093ac:	080093e1 	.word	0x080093e1
 80093b0:	08009401 	.word	0x08009401
 80093b4:	08009401 	.word	0x08009401
 80093b8:	08009401 	.word	0x08009401
 80093bc:	080093f1 	.word	0x080093f1
 80093c0:	08009401 	.word	0x08009401
 80093c4:	08009401 	.word	0x08009401
 80093c8:	08009401 	.word	0x08009401
 80093cc:	080093e9 	.word	0x080093e9
 80093d0:	08009401 	.word	0x08009401
 80093d4:	08009401 	.word	0x08009401
 80093d8:	08009401 	.word	0x08009401
 80093dc:	080093f9 	.word	0x080093f9
 80093e0:	2300      	movs	r3, #0
 80093e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093e6:	e0d8      	b.n	800959a <UART_SetConfig+0x2fe>
 80093e8:	2302      	movs	r3, #2
 80093ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093ee:	e0d4      	b.n	800959a <UART_SetConfig+0x2fe>
 80093f0:	2304      	movs	r3, #4
 80093f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093f6:	e0d0      	b.n	800959a <UART_SetConfig+0x2fe>
 80093f8:	2308      	movs	r3, #8
 80093fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093fe:	e0cc      	b.n	800959a <UART_SetConfig+0x2fe>
 8009400:	2310      	movs	r3, #16
 8009402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009406:	e0c8      	b.n	800959a <UART_SetConfig+0x2fe>
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a5e      	ldr	r2, [pc, #376]	; (8009588 <UART_SetConfig+0x2ec>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d125      	bne.n	800945e <UART_SetConfig+0x1c2>
 8009412:	4b5b      	ldr	r3, [pc, #364]	; (8009580 <UART_SetConfig+0x2e4>)
 8009414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009418:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800941c:	2b30      	cmp	r3, #48	; 0x30
 800941e:	d016      	beq.n	800944e <UART_SetConfig+0x1b2>
 8009420:	2b30      	cmp	r3, #48	; 0x30
 8009422:	d818      	bhi.n	8009456 <UART_SetConfig+0x1ba>
 8009424:	2b20      	cmp	r3, #32
 8009426:	d00a      	beq.n	800943e <UART_SetConfig+0x1a2>
 8009428:	2b20      	cmp	r3, #32
 800942a:	d814      	bhi.n	8009456 <UART_SetConfig+0x1ba>
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <UART_SetConfig+0x19a>
 8009430:	2b10      	cmp	r3, #16
 8009432:	d008      	beq.n	8009446 <UART_SetConfig+0x1aa>
 8009434:	e00f      	b.n	8009456 <UART_SetConfig+0x1ba>
 8009436:	2300      	movs	r3, #0
 8009438:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800943c:	e0ad      	b.n	800959a <UART_SetConfig+0x2fe>
 800943e:	2302      	movs	r3, #2
 8009440:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009444:	e0a9      	b.n	800959a <UART_SetConfig+0x2fe>
 8009446:	2304      	movs	r3, #4
 8009448:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800944c:	e0a5      	b.n	800959a <UART_SetConfig+0x2fe>
 800944e:	2308      	movs	r3, #8
 8009450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009454:	e0a1      	b.n	800959a <UART_SetConfig+0x2fe>
 8009456:	2310      	movs	r3, #16
 8009458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800945c:	e09d      	b.n	800959a <UART_SetConfig+0x2fe>
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a4a      	ldr	r2, [pc, #296]	; (800958c <UART_SetConfig+0x2f0>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d125      	bne.n	80094b4 <UART_SetConfig+0x218>
 8009468:	4b45      	ldr	r3, [pc, #276]	; (8009580 <UART_SetConfig+0x2e4>)
 800946a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800946e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009472:	2bc0      	cmp	r3, #192	; 0xc0
 8009474:	d016      	beq.n	80094a4 <UART_SetConfig+0x208>
 8009476:	2bc0      	cmp	r3, #192	; 0xc0
 8009478:	d818      	bhi.n	80094ac <UART_SetConfig+0x210>
 800947a:	2b80      	cmp	r3, #128	; 0x80
 800947c:	d00a      	beq.n	8009494 <UART_SetConfig+0x1f8>
 800947e:	2b80      	cmp	r3, #128	; 0x80
 8009480:	d814      	bhi.n	80094ac <UART_SetConfig+0x210>
 8009482:	2b00      	cmp	r3, #0
 8009484:	d002      	beq.n	800948c <UART_SetConfig+0x1f0>
 8009486:	2b40      	cmp	r3, #64	; 0x40
 8009488:	d008      	beq.n	800949c <UART_SetConfig+0x200>
 800948a:	e00f      	b.n	80094ac <UART_SetConfig+0x210>
 800948c:	2300      	movs	r3, #0
 800948e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009492:	e082      	b.n	800959a <UART_SetConfig+0x2fe>
 8009494:	2302      	movs	r3, #2
 8009496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800949a:	e07e      	b.n	800959a <UART_SetConfig+0x2fe>
 800949c:	2304      	movs	r3, #4
 800949e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094a2:	e07a      	b.n	800959a <UART_SetConfig+0x2fe>
 80094a4:	2308      	movs	r3, #8
 80094a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094aa:	e076      	b.n	800959a <UART_SetConfig+0x2fe>
 80094ac:	2310      	movs	r3, #16
 80094ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094b2:	e072      	b.n	800959a <UART_SetConfig+0x2fe>
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a35      	ldr	r2, [pc, #212]	; (8009590 <UART_SetConfig+0x2f4>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d12a      	bne.n	8009514 <UART_SetConfig+0x278>
 80094be:	4b30      	ldr	r3, [pc, #192]	; (8009580 <UART_SetConfig+0x2e4>)
 80094c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094cc:	d01a      	beq.n	8009504 <UART_SetConfig+0x268>
 80094ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094d2:	d81b      	bhi.n	800950c <UART_SetConfig+0x270>
 80094d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094d8:	d00c      	beq.n	80094f4 <UART_SetConfig+0x258>
 80094da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094de:	d815      	bhi.n	800950c <UART_SetConfig+0x270>
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d003      	beq.n	80094ec <UART_SetConfig+0x250>
 80094e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094e8:	d008      	beq.n	80094fc <UART_SetConfig+0x260>
 80094ea:	e00f      	b.n	800950c <UART_SetConfig+0x270>
 80094ec:	2300      	movs	r3, #0
 80094ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094f2:	e052      	b.n	800959a <UART_SetConfig+0x2fe>
 80094f4:	2302      	movs	r3, #2
 80094f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094fa:	e04e      	b.n	800959a <UART_SetConfig+0x2fe>
 80094fc:	2304      	movs	r3, #4
 80094fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009502:	e04a      	b.n	800959a <UART_SetConfig+0x2fe>
 8009504:	2308      	movs	r3, #8
 8009506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800950a:	e046      	b.n	800959a <UART_SetConfig+0x2fe>
 800950c:	2310      	movs	r3, #16
 800950e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009512:	e042      	b.n	800959a <UART_SetConfig+0x2fe>
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a17      	ldr	r2, [pc, #92]	; (8009578 <UART_SetConfig+0x2dc>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d13a      	bne.n	8009594 <UART_SetConfig+0x2f8>
 800951e:	4b18      	ldr	r3, [pc, #96]	; (8009580 <UART_SetConfig+0x2e4>)
 8009520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009524:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009528:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800952c:	d01a      	beq.n	8009564 <UART_SetConfig+0x2c8>
 800952e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009532:	d81b      	bhi.n	800956c <UART_SetConfig+0x2d0>
 8009534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009538:	d00c      	beq.n	8009554 <UART_SetConfig+0x2b8>
 800953a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800953e:	d815      	bhi.n	800956c <UART_SetConfig+0x2d0>
 8009540:	2b00      	cmp	r3, #0
 8009542:	d003      	beq.n	800954c <UART_SetConfig+0x2b0>
 8009544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009548:	d008      	beq.n	800955c <UART_SetConfig+0x2c0>
 800954a:	e00f      	b.n	800956c <UART_SetConfig+0x2d0>
 800954c:	2300      	movs	r3, #0
 800954e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009552:	e022      	b.n	800959a <UART_SetConfig+0x2fe>
 8009554:	2302      	movs	r3, #2
 8009556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800955a:	e01e      	b.n	800959a <UART_SetConfig+0x2fe>
 800955c:	2304      	movs	r3, #4
 800955e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009562:	e01a      	b.n	800959a <UART_SetConfig+0x2fe>
 8009564:	2308      	movs	r3, #8
 8009566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800956a:	e016      	b.n	800959a <UART_SetConfig+0x2fe>
 800956c:	2310      	movs	r3, #16
 800956e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009572:	e012      	b.n	800959a <UART_SetConfig+0x2fe>
 8009574:	cfff69f3 	.word	0xcfff69f3
 8009578:	40008000 	.word	0x40008000
 800957c:	40013800 	.word	0x40013800
 8009580:	40021000 	.word	0x40021000
 8009584:	40004400 	.word	0x40004400
 8009588:	40004800 	.word	0x40004800
 800958c:	40004c00 	.word	0x40004c00
 8009590:	40005000 	.word	0x40005000
 8009594:	2310      	movs	r3, #16
 8009596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4aae      	ldr	r2, [pc, #696]	; (8009858 <UART_SetConfig+0x5bc>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	f040 8097 	bne.w	80096d4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80095a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095aa:	2b08      	cmp	r3, #8
 80095ac:	d823      	bhi.n	80095f6 <UART_SetConfig+0x35a>
 80095ae:	a201      	add	r2, pc, #4	; (adr r2, 80095b4 <UART_SetConfig+0x318>)
 80095b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b4:	080095d9 	.word	0x080095d9
 80095b8:	080095f7 	.word	0x080095f7
 80095bc:	080095e1 	.word	0x080095e1
 80095c0:	080095f7 	.word	0x080095f7
 80095c4:	080095e7 	.word	0x080095e7
 80095c8:	080095f7 	.word	0x080095f7
 80095cc:	080095f7 	.word	0x080095f7
 80095d0:	080095f7 	.word	0x080095f7
 80095d4:	080095ef 	.word	0x080095ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095d8:	f7fe fc96 	bl	8007f08 <HAL_RCC_GetPCLK1Freq>
 80095dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80095de:	e010      	b.n	8009602 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095e0:	4b9e      	ldr	r3, [pc, #632]	; (800985c <UART_SetConfig+0x5c0>)
 80095e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80095e4:	e00d      	b.n	8009602 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095e6:	f7fe fbf7 	bl	8007dd8 <HAL_RCC_GetSysClockFreq>
 80095ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80095ec:	e009      	b.n	8009602 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80095f4:	e005      	b.n	8009602 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80095f6:	2300      	movs	r3, #0
 80095f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009600:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009604:	2b00      	cmp	r3, #0
 8009606:	f000 8130 	beq.w	800986a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960e:	4a94      	ldr	r2, [pc, #592]	; (8009860 <UART_SetConfig+0x5c4>)
 8009610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009614:	461a      	mov	r2, r3
 8009616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009618:	fbb3 f3f2 	udiv	r3, r3, r2
 800961c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	685a      	ldr	r2, [r3, #4]
 8009622:	4613      	mov	r3, r2
 8009624:	005b      	lsls	r3, r3, #1
 8009626:	4413      	add	r3, r2
 8009628:	69ba      	ldr	r2, [r7, #24]
 800962a:	429a      	cmp	r2, r3
 800962c:	d305      	bcc.n	800963a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009634:	69ba      	ldr	r2, [r7, #24]
 8009636:	429a      	cmp	r2, r3
 8009638:	d903      	bls.n	8009642 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009640:	e113      	b.n	800986a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009644:	2200      	movs	r2, #0
 8009646:	60bb      	str	r3, [r7, #8]
 8009648:	60fa      	str	r2, [r7, #12]
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964e:	4a84      	ldr	r2, [pc, #528]	; (8009860 <UART_SetConfig+0x5c4>)
 8009650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009654:	b29b      	uxth	r3, r3
 8009656:	2200      	movs	r2, #0
 8009658:	603b      	str	r3, [r7, #0]
 800965a:	607a      	str	r2, [r7, #4]
 800965c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009660:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009664:	f7f7 fab8 	bl	8000bd8 <__aeabi_uldivmod>
 8009668:	4602      	mov	r2, r0
 800966a:	460b      	mov	r3, r1
 800966c:	4610      	mov	r0, r2
 800966e:	4619      	mov	r1, r3
 8009670:	f04f 0200 	mov.w	r2, #0
 8009674:	f04f 0300 	mov.w	r3, #0
 8009678:	020b      	lsls	r3, r1, #8
 800967a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800967e:	0202      	lsls	r2, r0, #8
 8009680:	6979      	ldr	r1, [r7, #20]
 8009682:	6849      	ldr	r1, [r1, #4]
 8009684:	0849      	lsrs	r1, r1, #1
 8009686:	2000      	movs	r0, #0
 8009688:	460c      	mov	r4, r1
 800968a:	4605      	mov	r5, r0
 800968c:	eb12 0804 	adds.w	r8, r2, r4
 8009690:	eb43 0905 	adc.w	r9, r3, r5
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	469a      	mov	sl, r3
 800969c:	4693      	mov	fp, r2
 800969e:	4652      	mov	r2, sl
 80096a0:	465b      	mov	r3, fp
 80096a2:	4640      	mov	r0, r8
 80096a4:	4649      	mov	r1, r9
 80096a6:	f7f7 fa97 	bl	8000bd8 <__aeabi_uldivmod>
 80096aa:	4602      	mov	r2, r0
 80096ac:	460b      	mov	r3, r1
 80096ae:	4613      	mov	r3, r2
 80096b0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80096b2:	6a3b      	ldr	r3, [r7, #32]
 80096b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096b8:	d308      	bcc.n	80096cc <UART_SetConfig+0x430>
 80096ba:	6a3b      	ldr	r3, [r7, #32]
 80096bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096c0:	d204      	bcs.n	80096cc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6a3a      	ldr	r2, [r7, #32]
 80096c8:	60da      	str	r2, [r3, #12]
 80096ca:	e0ce      	b.n	800986a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80096d2:	e0ca      	b.n	800986a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	69db      	ldr	r3, [r3, #28]
 80096d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096dc:	d166      	bne.n	80097ac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80096de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80096e2:	2b08      	cmp	r3, #8
 80096e4:	d827      	bhi.n	8009736 <UART_SetConfig+0x49a>
 80096e6:	a201      	add	r2, pc, #4	; (adr r2, 80096ec <UART_SetConfig+0x450>)
 80096e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ec:	08009711 	.word	0x08009711
 80096f0:	08009719 	.word	0x08009719
 80096f4:	08009721 	.word	0x08009721
 80096f8:	08009737 	.word	0x08009737
 80096fc:	08009727 	.word	0x08009727
 8009700:	08009737 	.word	0x08009737
 8009704:	08009737 	.word	0x08009737
 8009708:	08009737 	.word	0x08009737
 800970c:	0800972f 	.word	0x0800972f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009710:	f7fe fbfa 	bl	8007f08 <HAL_RCC_GetPCLK1Freq>
 8009714:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009716:	e014      	b.n	8009742 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009718:	f7fe fc0c 	bl	8007f34 <HAL_RCC_GetPCLK2Freq>
 800971c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800971e:	e010      	b.n	8009742 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009720:	4b4e      	ldr	r3, [pc, #312]	; (800985c <UART_SetConfig+0x5c0>)
 8009722:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009724:	e00d      	b.n	8009742 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009726:	f7fe fb57 	bl	8007dd8 <HAL_RCC_GetSysClockFreq>
 800972a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800972c:	e009      	b.n	8009742 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800972e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009732:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009734:	e005      	b.n	8009742 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009736:	2300      	movs	r3, #0
 8009738:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009740:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009744:	2b00      	cmp	r3, #0
 8009746:	f000 8090 	beq.w	800986a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974e:	4a44      	ldr	r2, [pc, #272]	; (8009860 <UART_SetConfig+0x5c4>)
 8009750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009754:	461a      	mov	r2, r3
 8009756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009758:	fbb3 f3f2 	udiv	r3, r3, r2
 800975c:	005a      	lsls	r2, r3, #1
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	085b      	lsrs	r3, r3, #1
 8009764:	441a      	add	r2, r3
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	fbb2 f3f3 	udiv	r3, r2, r3
 800976e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009770:	6a3b      	ldr	r3, [r7, #32]
 8009772:	2b0f      	cmp	r3, #15
 8009774:	d916      	bls.n	80097a4 <UART_SetConfig+0x508>
 8009776:	6a3b      	ldr	r3, [r7, #32]
 8009778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800977c:	d212      	bcs.n	80097a4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800977e:	6a3b      	ldr	r3, [r7, #32]
 8009780:	b29b      	uxth	r3, r3
 8009782:	f023 030f 	bic.w	r3, r3, #15
 8009786:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009788:	6a3b      	ldr	r3, [r7, #32]
 800978a:	085b      	lsrs	r3, r3, #1
 800978c:	b29b      	uxth	r3, r3
 800978e:	f003 0307 	and.w	r3, r3, #7
 8009792:	b29a      	uxth	r2, r3
 8009794:	8bfb      	ldrh	r3, [r7, #30]
 8009796:	4313      	orrs	r3, r2
 8009798:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	8bfa      	ldrh	r2, [r7, #30]
 80097a0:	60da      	str	r2, [r3, #12]
 80097a2:	e062      	b.n	800986a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80097aa:	e05e      	b.n	800986a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80097ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80097b0:	2b08      	cmp	r3, #8
 80097b2:	d828      	bhi.n	8009806 <UART_SetConfig+0x56a>
 80097b4:	a201      	add	r2, pc, #4	; (adr r2, 80097bc <UART_SetConfig+0x520>)
 80097b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ba:	bf00      	nop
 80097bc:	080097e1 	.word	0x080097e1
 80097c0:	080097e9 	.word	0x080097e9
 80097c4:	080097f1 	.word	0x080097f1
 80097c8:	08009807 	.word	0x08009807
 80097cc:	080097f7 	.word	0x080097f7
 80097d0:	08009807 	.word	0x08009807
 80097d4:	08009807 	.word	0x08009807
 80097d8:	08009807 	.word	0x08009807
 80097dc:	080097ff 	.word	0x080097ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097e0:	f7fe fb92 	bl	8007f08 <HAL_RCC_GetPCLK1Freq>
 80097e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80097e6:	e014      	b.n	8009812 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097e8:	f7fe fba4 	bl	8007f34 <HAL_RCC_GetPCLK2Freq>
 80097ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80097ee:	e010      	b.n	8009812 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097f0:	4b1a      	ldr	r3, [pc, #104]	; (800985c <UART_SetConfig+0x5c0>)
 80097f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80097f4:	e00d      	b.n	8009812 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097f6:	f7fe faef 	bl	8007dd8 <HAL_RCC_GetSysClockFreq>
 80097fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80097fc:	e009      	b.n	8009812 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009802:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009804:	e005      	b.n	8009812 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009806:	2300      	movs	r3, #0
 8009808:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009810:	bf00      	nop
    }

    if (pclk != 0U)
 8009812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009814:	2b00      	cmp	r3, #0
 8009816:	d028      	beq.n	800986a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981c:	4a10      	ldr	r2, [pc, #64]	; (8009860 <UART_SetConfig+0x5c4>)
 800981e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009822:	461a      	mov	r2, r3
 8009824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009826:	fbb3 f2f2 	udiv	r2, r3, r2
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	085b      	lsrs	r3, r3, #1
 8009830:	441a      	add	r2, r3
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	fbb2 f3f3 	udiv	r3, r2, r3
 800983a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800983c:	6a3b      	ldr	r3, [r7, #32]
 800983e:	2b0f      	cmp	r3, #15
 8009840:	d910      	bls.n	8009864 <UART_SetConfig+0x5c8>
 8009842:	6a3b      	ldr	r3, [r7, #32]
 8009844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009848:	d20c      	bcs.n	8009864 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800984a:	6a3b      	ldr	r3, [r7, #32]
 800984c:	b29a      	uxth	r2, r3
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	60da      	str	r2, [r3, #12]
 8009854:	e009      	b.n	800986a <UART_SetConfig+0x5ce>
 8009856:	bf00      	nop
 8009858:	40008000 	.word	0x40008000
 800985c:	00f42400 	.word	0x00f42400
 8009860:	0800f868 	.word	0x0800f868
      }
      else
      {
        ret = HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	2201      	movs	r2, #1
 800986e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	2201      	movs	r2, #1
 8009876:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	2200      	movs	r2, #0
 800987e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	2200      	movs	r2, #0
 8009884:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009886:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800988a:	4618      	mov	r0, r3
 800988c:	3730      	adds	r7, #48	; 0x30
 800988e:	46bd      	mov	sp, r7
 8009890:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a0:	f003 0308 	and.w	r3, r3, #8
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00a      	beq.n	80098be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	430a      	orrs	r2, r1
 80098bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c2:	f003 0301 	and.w	r3, r3, #1
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00a      	beq.n	80098e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	430a      	orrs	r2, r1
 80098de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e4:	f003 0302 	and.w	r3, r3, #2
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d00a      	beq.n	8009902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	430a      	orrs	r2, r1
 8009900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009906:	f003 0304 	and.w	r3, r3, #4
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00a      	beq.n	8009924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	430a      	orrs	r2, r1
 8009922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009928:	f003 0310 	and.w	r3, r3, #16
 800992c:	2b00      	cmp	r3, #0
 800992e:	d00a      	beq.n	8009946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	430a      	orrs	r2, r1
 8009944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994a:	f003 0320 	and.w	r3, r3, #32
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00a      	beq.n	8009968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	430a      	orrs	r2, r1
 8009966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800996c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009970:	2b00      	cmp	r3, #0
 8009972:	d01a      	beq.n	80099aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	430a      	orrs	r2, r1
 8009988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800998e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009992:	d10a      	bne.n	80099aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	430a      	orrs	r2, r1
 80099a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00a      	beq.n	80099cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	430a      	orrs	r2, r1
 80099ca:	605a      	str	r2, [r3, #4]
  }
}
 80099cc:	bf00      	nop
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b098      	sub	sp, #96	; 0x60
 80099dc:	af02      	add	r7, sp, #8
 80099de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80099e8:	f7fb f990 	bl	8004d0c <HAL_GetTick>
 80099ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 0308 	and.w	r3, r3, #8
 80099f8:	2b08      	cmp	r3, #8
 80099fa:	d12f      	bne.n	8009a5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a04:	2200      	movs	r2, #0
 8009a06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f88e 	bl	8009b2c <UART_WaitOnFlagUntilTimeout>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d022      	beq.n	8009a5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1e:	e853 3f00 	ldrex	r3, [r3]
 8009a22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a2a:	653b      	str	r3, [r7, #80]	; 0x50
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	461a      	mov	r2, r3
 8009a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a34:	647b      	str	r3, [r7, #68]	; 0x44
 8009a36:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a3c:	e841 2300 	strex	r3, r2, [r1]
 8009a40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d1e6      	bne.n	8009a16 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2220      	movs	r2, #32
 8009a4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	e063      	b.n	8009b24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 0304 	and.w	r3, r3, #4
 8009a66:	2b04      	cmp	r3, #4
 8009a68:	d149      	bne.n	8009afe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a72:	2200      	movs	r2, #0
 8009a74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 f857 	bl	8009b2c <UART_WaitOnFlagUntilTimeout>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d03c      	beq.n	8009afe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8c:	e853 3f00 	ldrex	r3, [r3]
 8009a90:	623b      	str	r3, [r7, #32]
   return(result);
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8009aa4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aaa:	e841 2300 	strex	r3, r2, [r1]
 8009aae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1e6      	bne.n	8009a84 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	3308      	adds	r3, #8
 8009abc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	e853 3f00 	ldrex	r3, [r3]
 8009ac4:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f023 0301 	bic.w	r3, r3, #1
 8009acc:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	3308      	adds	r3, #8
 8009ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ad6:	61fa      	str	r2, [r7, #28]
 8009ad8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ada:	69b9      	ldr	r1, [r7, #24]
 8009adc:	69fa      	ldr	r2, [r7, #28]
 8009ade:	e841 2300 	strex	r3, r2, [r1]
 8009ae2:	617b      	str	r3, [r7, #20]
   return(result);
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1e5      	bne.n	8009ab6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2220      	movs	r2, #32
 8009aee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009afa:	2303      	movs	r3, #3
 8009afc:	e012      	b.n	8009b24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2220      	movs	r2, #32
 8009b02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2220      	movs	r2, #32
 8009b0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3758      	adds	r7, #88	; 0x58
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	603b      	str	r3, [r7, #0]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b3c:	e049      	b.n	8009bd2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b44:	d045      	beq.n	8009bd2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b46:	f7fb f8e1 	bl	8004d0c <HAL_GetTick>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	69ba      	ldr	r2, [r7, #24]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d302      	bcc.n	8009b5c <UART_WaitOnFlagUntilTimeout+0x30>
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d101      	bne.n	8009b60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009b5c:	2303      	movs	r3, #3
 8009b5e:	e048      	b.n	8009bf2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f003 0304 	and.w	r3, r3, #4
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d031      	beq.n	8009bd2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	69db      	ldr	r3, [r3, #28]
 8009b74:	f003 0308 	and.w	r3, r3, #8
 8009b78:	2b08      	cmp	r3, #8
 8009b7a:	d110      	bne.n	8009b9e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2208      	movs	r2, #8
 8009b82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f000 f838 	bl	8009bfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2208      	movs	r2, #8
 8009b8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e029      	b.n	8009bf2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	69db      	ldr	r3, [r3, #28]
 8009ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bac:	d111      	bne.n	8009bd2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009bb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009bb8:	68f8      	ldr	r0, [r7, #12]
 8009bba:	f000 f81e 	bl	8009bfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2220      	movs	r2, #32
 8009bc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	e00f      	b.n	8009bf2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	69da      	ldr	r2, [r3, #28]
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	4013      	ands	r3, r2
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	bf0c      	ite	eq
 8009be2:	2301      	moveq	r3, #1
 8009be4:	2300      	movne	r3, #0
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	461a      	mov	r2, r3
 8009bea:	79fb      	ldrb	r3, [r7, #7]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d0a6      	beq.n	8009b3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b095      	sub	sp, #84	; 0x54
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c0a:	e853 3f00 	ldrex	r3, [r3]
 8009c0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c20:	643b      	str	r3, [r7, #64]	; 0x40
 8009c22:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c28:	e841 2300 	strex	r3, r2, [r1]
 8009c2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1e6      	bne.n	8009c02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	3308      	adds	r3, #8
 8009c3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	e853 3f00 	ldrex	r3, [r3]
 8009c42:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c4a:	f023 0301 	bic.w	r3, r3, #1
 8009c4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	3308      	adds	r3, #8
 8009c56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c60:	e841 2300 	strex	r3, r2, [r1]
 8009c64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1e3      	bne.n	8009c34 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d118      	bne.n	8009ca6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	e853 3f00 	ldrex	r3, [r3]
 8009c80:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	f023 0310 	bic.w	r3, r3, #16
 8009c88:	647b      	str	r3, [r7, #68]	; 0x44
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c92:	61bb      	str	r3, [r7, #24]
 8009c94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c96:	6979      	ldr	r1, [r7, #20]
 8009c98:	69ba      	ldr	r2, [r7, #24]
 8009c9a:	e841 2300 	strex	r3, r2, [r1]
 8009c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d1e6      	bne.n	8009c74 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2220      	movs	r2, #32
 8009caa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009cba:	bf00      	nop
 8009cbc:	3754      	adds	r7, #84	; 0x54
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr

08009cc6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009cc6:	b480      	push	{r7}
 8009cc8:	b085      	sub	sp, #20
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d101      	bne.n	8009cdc <HAL_UARTEx_DisableFifoMode+0x16>
 8009cd8:	2302      	movs	r3, #2
 8009cda:	e027      	b.n	8009d2c <HAL_UARTEx_DisableFifoMode+0x66>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2224      	movs	r2, #36	; 0x24
 8009ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f022 0201 	bic.w	r2, r2, #1
 8009d02:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d0a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2220      	movs	r2, #32
 8009d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3714      	adds	r7, #20
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d101      	bne.n	8009d50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	e02d      	b.n	8009dac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2224      	movs	r2, #36	; 0x24
 8009d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f022 0201 	bic.w	r2, r2, #1
 8009d76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	430a      	orrs	r2, r1
 8009d8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 f84f 	bl	8009e30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2220      	movs	r2, #32
 8009d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d101      	bne.n	8009dcc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009dc8:	2302      	movs	r3, #2
 8009dca:	e02d      	b.n	8009e28 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2224      	movs	r2, #36	; 0x24
 8009dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f022 0201 	bic.w	r2, r2, #1
 8009df2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	683a      	ldr	r2, [r7, #0]
 8009e04:	430a      	orrs	r2, r1
 8009e06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 f811 	bl	8009e30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2220      	movs	r2, #32
 8009e1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d108      	bne.n	8009e52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e50:	e031      	b.n	8009eb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e52:	2308      	movs	r3, #8
 8009e54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e56:	2308      	movs	r3, #8
 8009e58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	0e5b      	lsrs	r3, r3, #25
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	f003 0307 	and.w	r3, r3, #7
 8009e68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	0f5b      	lsrs	r3, r3, #29
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	f003 0307 	and.w	r3, r3, #7
 8009e78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e7a:	7bbb      	ldrb	r3, [r7, #14]
 8009e7c:	7b3a      	ldrb	r2, [r7, #12]
 8009e7e:	4911      	ldr	r1, [pc, #68]	; (8009ec4 <UARTEx_SetNbDataToProcess+0x94>)
 8009e80:	5c8a      	ldrb	r2, [r1, r2]
 8009e82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e86:	7b3a      	ldrb	r2, [r7, #12]
 8009e88:	490f      	ldr	r1, [pc, #60]	; (8009ec8 <UARTEx_SetNbDataToProcess+0x98>)
 8009e8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e98:	7bfb      	ldrb	r3, [r7, #15]
 8009e9a:	7b7a      	ldrb	r2, [r7, #13]
 8009e9c:	4909      	ldr	r1, [pc, #36]	; (8009ec4 <UARTEx_SetNbDataToProcess+0x94>)
 8009e9e:	5c8a      	ldrb	r2, [r1, r2]
 8009ea0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ea4:	7b7a      	ldrb	r2, [r7, #13]
 8009ea6:	4908      	ldr	r1, [pc, #32]	; (8009ec8 <UARTEx_SetNbDataToProcess+0x98>)
 8009ea8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009eaa:	fb93 f3f2 	sdiv	r3, r3, r2
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009eb6:	bf00      	nop
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	0800f880 	.word	0x0800f880
 8009ec8:	0800f888 	.word	0x0800f888

08009ecc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009ede:	2b84      	cmp	r3, #132	; 0x84
 8009ee0:	d005      	beq.n	8009eee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009ee2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	4413      	add	r3, r2
 8009eea:	3303      	adds	r3, #3
 8009eec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009eee:	68fb      	ldr	r3, [r7, #12]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3714      	adds	r7, #20
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f02:	f3ef 8305 	mrs	r3, IPSR
 8009f06:	607b      	str	r3, [r7, #4]
  return(result);
 8009f08:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	bf14      	ite	ne
 8009f0e:	2301      	movne	r3, #1
 8009f10:	2300      	moveq	r3, #0
 8009f12:	b2db      	uxtb	r3, r3
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009f24:	f001 f942 	bl	800b1ac <vTaskStartScheduler>
  
  return osOK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009f2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f30:	b089      	sub	sp, #36	; 0x24
 8009f32:	af04      	add	r7, sp, #16
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	695b      	ldr	r3, [r3, #20]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d020      	beq.n	8009f82 <osThreadCreate+0x54>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d01c      	beq.n	8009f82 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685c      	ldr	r4, [r3, #4]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	691e      	ldr	r6, [r3, #16]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7ff ffb6 	bl	8009ecc <makeFreeRtosPriority>
 8009f60:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	695b      	ldr	r3, [r3, #20]
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f6a:	9202      	str	r2, [sp, #8]
 8009f6c:	9301      	str	r3, [sp, #4]
 8009f6e:	9100      	str	r1, [sp, #0]
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	4632      	mov	r2, r6
 8009f74:	4629      	mov	r1, r5
 8009f76:	4620      	mov	r0, r4
 8009f78:	f000 ff50 	bl	800ae1c <xTaskCreateStatic>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	e01c      	b.n	8009fbc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	685c      	ldr	r4, [r3, #4]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f8e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7ff ff98 	bl	8009ecc <makeFreeRtosPriority>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	f107 030c 	add.w	r3, r7, #12
 8009fa2:	9301      	str	r3, [sp, #4]
 8009fa4:	9200      	str	r2, [sp, #0]
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	4632      	mov	r2, r6
 8009faa:	4629      	mov	r1, r5
 8009fac:	4620      	mov	r0, r4
 8009fae:	f000 ff92 	bl	800aed6 <xTaskCreate>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d001      	beq.n	8009fbc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	e000      	b.n	8009fbe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3714      	adds	r7, #20
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009fc6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b084      	sub	sp, #16
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d001      	beq.n	8009fdc <osDelay+0x16>
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	e000      	b.n	8009fde <osDelay+0x18>
 8009fdc:	2301      	movs	r3, #1
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f001 f8b0 	bl	800b144 <vTaskDelay>
  
  return osOK;
 8009fe4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b082      	sub	sp, #8
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d007      	beq.n	800a00e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	4619      	mov	r1, r3
 800a004:	2001      	movs	r0, #1
 800a006:	f000 faae 	bl	800a566 <xQueueCreateMutexStatic>
 800a00a:	4603      	mov	r3, r0
 800a00c:	e003      	b.n	800a016 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a00e:	2001      	movs	r0, #1
 800a010:	f000 fa91 	bl	800a536 <xQueueCreateMutex>
 800a014:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a016:	4618      	mov	r0, r3
 800a018:	3708      	adds	r7, #8
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
	...

0800a020 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a02a:	2300      	movs	r3, #0
 800a02c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d101      	bne.n	800a038 <osMutexWait+0x18>
    return osErrorParameter;
 800a034:	2380      	movs	r3, #128	; 0x80
 800a036:	e03a      	b.n	800a0ae <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800a038:	2300      	movs	r3, #0
 800a03a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a042:	d103      	bne.n	800a04c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a048:	60fb      	str	r3, [r7, #12]
 800a04a:	e009      	b.n	800a060 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d006      	beq.n	800a060 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d101      	bne.n	800a060 <osMutexWait+0x40>
      ticks = 1;
 800a05c:	2301      	movs	r3, #1
 800a05e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a060:	f7ff ff4c 	bl	8009efc <inHandlerMode>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d017      	beq.n	800a09a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a06a:	f107 0308 	add.w	r3, r7, #8
 800a06e:	461a      	mov	r2, r3
 800a070:	2100      	movs	r1, #0
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fd2a 	bl	800aacc <xQueueReceiveFromISR>
 800a078:	4603      	mov	r3, r0
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d001      	beq.n	800a082 <osMutexWait+0x62>
      return osErrorOS;
 800a07e:	23ff      	movs	r3, #255	; 0xff
 800a080:	e015      	b.n	800a0ae <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d011      	beq.n	800a0ac <osMutexWait+0x8c>
 800a088:	4b0b      	ldr	r3, [pc, #44]	; (800a0b8 <osMutexWait+0x98>)
 800a08a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a08e:	601a      	str	r2, [r3, #0]
 800a090:	f3bf 8f4f 	dsb	sy
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	e008      	b.n	800a0ac <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a09a:	68f9      	ldr	r1, [r7, #12]
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 fc09 	bl	800a8b4 <xQueueSemaphoreTake>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d001      	beq.n	800a0ac <osMutexWait+0x8c>
    return osErrorOS;
 800a0a8:	23ff      	movs	r3, #255	; 0xff
 800a0aa:	e000      	b.n	800a0ae <osMutexWait+0x8e>
  }
  
  return osOK;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	e000ed04 	.word	0xe000ed04

0800a0bc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a0cc:	f7ff ff16 	bl	8009efc <inHandlerMode>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d016      	beq.n	800a104 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a0d6:	f107 0308 	add.w	r3, r7, #8
 800a0da:	4619      	mov	r1, r3
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 fb5b 	bl	800a798 <xQueueGiveFromISR>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d001      	beq.n	800a0ec <osMutexRelease+0x30>
      return osErrorOS;
 800a0e8:	23ff      	movs	r3, #255	; 0xff
 800a0ea:	e017      	b.n	800a11c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d013      	beq.n	800a11a <osMutexRelease+0x5e>
 800a0f2:	4b0c      	ldr	r3, [pc, #48]	; (800a124 <osMutexRelease+0x68>)
 800a0f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0f8:	601a      	str	r2, [r3, #0]
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	e00a      	b.n	800a11a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a104:	2300      	movs	r3, #0
 800a106:	2200      	movs	r2, #0
 800a108:	2100      	movs	r1, #0
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 fa46 	bl	800a59c <xQueueGenericSend>
 800a110:	4603      	mov	r3, r0
 800a112:	2b01      	cmp	r3, #1
 800a114:	d001      	beq.n	800a11a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a116:	23ff      	movs	r3, #255	; 0xff
 800a118:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a11a:	68fb      	ldr	r3, [r7, #12]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	e000ed04 	.word	0xe000ed04

0800a128 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f103 0208 	add.w	r2, r3, #8
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a140:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f103 0208 	add.w	r2, r3, #8
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f103 0208 	add.w	r2, r3, #8
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a176:	bf00      	nop
 800a178:	370c      	adds	r7, #12
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr

0800a182 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a182:	b480      	push	{r7}
 800a184:	b085      	sub	sp, #20
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
 800a18a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	689a      	ldr	r2, [r3, #8]
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	683a      	ldr	r2, [r7, #0]
 800a1a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	683a      	ldr	r2, [r7, #0]
 800a1ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	1c5a      	adds	r2, r3, #1
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	601a      	str	r2, [r3, #0]
}
 800a1be:	bf00      	nop
 800a1c0:	3714      	adds	r7, #20
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr

0800a1ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1ca:	b480      	push	{r7}
 800a1cc:	b085      	sub	sp, #20
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
 800a1d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1e0:	d103      	bne.n	800a1ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	60fb      	str	r3, [r7, #12]
 800a1e8:	e00c      	b.n	800a204 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	3308      	adds	r3, #8
 800a1ee:	60fb      	str	r3, [r7, #12]
 800a1f0:	e002      	b.n	800a1f8 <vListInsert+0x2e>
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	60fb      	str	r3, [r7, #12]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	429a      	cmp	r2, r3
 800a202:	d2f6      	bcs.n	800a1f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	685a      	ldr	r2, [r3, #4]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	683a      	ldr	r2, [r7, #0]
 800a212:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	683a      	ldr	r2, [r7, #0]
 800a21e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	1c5a      	adds	r2, r3, #1
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	601a      	str	r2, [r3, #0]
}
 800a230:	bf00      	nop
 800a232:	3714      	adds	r7, #20
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr

0800a23c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a23c:	b480      	push	{r7}
 800a23e:	b085      	sub	sp, #20
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	6892      	ldr	r2, [r2, #8]
 800a252:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	6852      	ldr	r2, [r2, #4]
 800a25c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	429a      	cmp	r2, r3
 800a266:	d103      	bne.n	800a270 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	689a      	ldr	r2, [r3, #8]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	1e5a      	subs	r2, r3, #1
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3714      	adds	r7, #20
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d10a      	bne.n	800a2ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a8:	f383 8811 	msr	BASEPRI, r3
 800a2ac:	f3bf 8f6f 	isb	sy
 800a2b0:	f3bf 8f4f 	dsb	sy
 800a2b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a2b6:	bf00      	nop
 800a2b8:	e7fe      	b.n	800a2b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a2ba:	f001 fec3 	bl	800c044 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2c6:	68f9      	ldr	r1, [r7, #12]
 800a2c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2ca:	fb01 f303 	mul.w	r3, r1, r3
 800a2ce:	441a      	add	r2, r3
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	68f9      	ldr	r1, [r7, #12]
 800a2ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2f0:	fb01 f303 	mul.w	r3, r1, r3
 800a2f4:	441a      	add	r2, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	22ff      	movs	r2, #255	; 0xff
 800a2fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	22ff      	movs	r2, #255	; 0xff
 800a306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d114      	bne.n	800a33a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d01a      	beq.n	800a34e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	3310      	adds	r3, #16
 800a31c:	4618      	mov	r0, r3
 800a31e:	f001 f987 	bl	800b630 <xTaskRemoveFromEventList>
 800a322:	4603      	mov	r3, r0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d012      	beq.n	800a34e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a328:	4b0c      	ldr	r3, [pc, #48]	; (800a35c <xQueueGenericReset+0xcc>)
 800a32a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a32e:	601a      	str	r2, [r3, #0]
 800a330:	f3bf 8f4f 	dsb	sy
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	e009      	b.n	800a34e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3310      	adds	r3, #16
 800a33e:	4618      	mov	r0, r3
 800a340:	f7ff fef2 	bl	800a128 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	3324      	adds	r3, #36	; 0x24
 800a348:	4618      	mov	r0, r3
 800a34a:	f7ff feed 	bl	800a128 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a34e:	f001 fea9 	bl	800c0a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a352:	2301      	movs	r3, #1
}
 800a354:	4618      	mov	r0, r3
 800a356:	3710      	adds	r7, #16
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	e000ed04 	.word	0xe000ed04

0800a360 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a360:	b580      	push	{r7, lr}
 800a362:	b08e      	sub	sp, #56	; 0x38
 800a364:	af02      	add	r7, sp, #8
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
 800a36c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d10a      	bne.n	800a38a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a386:	bf00      	nop
 800a388:	e7fe      	b.n	800a388 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d10a      	bne.n	800a3a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a394:	f383 8811 	msr	BASEPRI, r3
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a3a2:	bf00      	nop
 800a3a4:	e7fe      	b.n	800a3a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <xQueueGenericCreateStatic+0x52>
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d001      	beq.n	800a3b6 <xQueueGenericCreateStatic+0x56>
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e000      	b.n	800a3b8 <xQueueGenericCreateStatic+0x58>
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d10a      	bne.n	800a3d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c0:	f383 8811 	msr	BASEPRI, r3
 800a3c4:	f3bf 8f6f 	isb	sy
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	623b      	str	r3, [r7, #32]
}
 800a3ce:	bf00      	nop
 800a3d0:	e7fe      	b.n	800a3d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d102      	bne.n	800a3de <xQueueGenericCreateStatic+0x7e>
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d101      	bne.n	800a3e2 <xQueueGenericCreateStatic+0x82>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e000      	b.n	800a3e4 <xQueueGenericCreateStatic+0x84>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10a      	bne.n	800a3fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ec:	f383 8811 	msr	BASEPRI, r3
 800a3f0:	f3bf 8f6f 	isb	sy
 800a3f4:	f3bf 8f4f 	dsb	sy
 800a3f8:	61fb      	str	r3, [r7, #28]
}
 800a3fa:	bf00      	nop
 800a3fc:	e7fe      	b.n	800a3fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a3fe:	2348      	movs	r3, #72	; 0x48
 800a400:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	2b48      	cmp	r3, #72	; 0x48
 800a406:	d00a      	beq.n	800a41e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	61bb      	str	r3, [r7, #24]
}
 800a41a:	bf00      	nop
 800a41c:	e7fe      	b.n	800a41c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a41e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a426:	2b00      	cmp	r3, #0
 800a428:	d00d      	beq.n	800a446 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42c:	2201      	movs	r2, #1
 800a42e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a432:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a438:	9300      	str	r3, [sp, #0]
 800a43a:	4613      	mov	r3, r2
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	68b9      	ldr	r1, [r7, #8]
 800a440:	68f8      	ldr	r0, [r7, #12]
 800a442:	f000 f83f 	bl	800a4c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a448:	4618      	mov	r0, r3
 800a44a:	3730      	adds	r7, #48	; 0x30
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a450:	b580      	push	{r7, lr}
 800a452:	b08a      	sub	sp, #40	; 0x28
 800a454:	af02      	add	r7, sp, #8
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	4613      	mov	r3, r2
 800a45c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10a      	bne.n	800a47a <xQueueGenericCreate+0x2a>
	__asm volatile
 800a464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a468:	f383 8811 	msr	BASEPRI, r3
 800a46c:	f3bf 8f6f 	isb	sy
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	613b      	str	r3, [r7, #16]
}
 800a476:	bf00      	nop
 800a478:	e7fe      	b.n	800a478 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	fb02 f303 	mul.w	r3, r2, r3
 800a482:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	3348      	adds	r3, #72	; 0x48
 800a488:	4618      	mov	r0, r3
 800a48a:	f001 fefd 	bl	800c288 <pvPortMalloc>
 800a48e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d011      	beq.n	800a4ba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	3348      	adds	r3, #72	; 0x48
 800a49e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4a8:	79fa      	ldrb	r2, [r7, #7]
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	9300      	str	r3, [sp, #0]
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	68b9      	ldr	r1, [r7, #8]
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f000 f805 	bl	800a4c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4ba:	69bb      	ldr	r3, [r7, #24]
	}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3720      	adds	r7, #32
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
 800a4d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d103      	bne.n	800a4e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	69ba      	ldr	r2, [r7, #24]
 800a4dc:	601a      	str	r2, [r3, #0]
 800a4de:	e002      	b.n	800a4e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a4f2:	2101      	movs	r1, #1
 800a4f4:	69b8      	ldr	r0, [r7, #24]
 800a4f6:	f7ff fecb 	bl	800a290 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a4fa:	bf00      	nop
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a502:	b580      	push	{r7, lr}
 800a504:	b082      	sub	sp, #8
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00e      	beq.n	800a52e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a522:	2300      	movs	r3, #0
 800a524:	2200      	movs	r2, #0
 800a526:	2100      	movs	r1, #0
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f837 	bl	800a59c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a52e:	bf00      	nop
 800a530:	3708      	adds	r7, #8
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a536:	b580      	push	{r7, lr}
 800a538:	b086      	sub	sp, #24
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	4603      	mov	r3, r0
 800a53e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a540:	2301      	movs	r3, #1
 800a542:	617b      	str	r3, [r7, #20]
 800a544:	2300      	movs	r3, #0
 800a546:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a548:	79fb      	ldrb	r3, [r7, #7]
 800a54a:	461a      	mov	r2, r3
 800a54c:	6939      	ldr	r1, [r7, #16]
 800a54e:	6978      	ldr	r0, [r7, #20]
 800a550:	f7ff ff7e 	bl	800a450 <xQueueGenericCreate>
 800a554:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f7ff ffd3 	bl	800a502 <prvInitialiseMutex>

		return xNewQueue;
 800a55c:	68fb      	ldr	r3, [r7, #12]
	}
 800a55e:	4618      	mov	r0, r3
 800a560:	3718      	adds	r7, #24
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a566:	b580      	push	{r7, lr}
 800a568:	b088      	sub	sp, #32
 800a56a:	af02      	add	r7, sp, #8
 800a56c:	4603      	mov	r3, r0
 800a56e:	6039      	str	r1, [r7, #0]
 800a570:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a572:	2301      	movs	r3, #1
 800a574:	617b      	str	r3, [r7, #20]
 800a576:	2300      	movs	r3, #0
 800a578:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a57a:	79fb      	ldrb	r3, [r7, #7]
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	2200      	movs	r2, #0
 800a582:	6939      	ldr	r1, [r7, #16]
 800a584:	6978      	ldr	r0, [r7, #20]
 800a586:	f7ff feeb 	bl	800a360 <xQueueGenericCreateStatic>
 800a58a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f7ff ffb8 	bl	800a502 <prvInitialiseMutex>

		return xNewQueue;
 800a592:	68fb      	ldr	r3, [r7, #12]
	}
 800a594:	4618      	mov	r0, r3
 800a596:	3718      	adds	r7, #24
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b08e      	sub	sp, #56	; 0x38
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
 800a5a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10a      	bne.n	800a5ce <xQueueGenericSend+0x32>
	__asm volatile
 800a5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a5ca:	bf00      	nop
 800a5cc:	e7fe      	b.n	800a5cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d103      	bne.n	800a5dc <xQueueGenericSend+0x40>
 800a5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d101      	bne.n	800a5e0 <xQueueGenericSend+0x44>
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e000      	b.n	800a5e2 <xQueueGenericSend+0x46>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d10a      	bne.n	800a5fc <xQueueGenericSend+0x60>
	__asm volatile
 800a5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ea:	f383 8811 	msr	BASEPRI, r3
 800a5ee:	f3bf 8f6f 	isb	sy
 800a5f2:	f3bf 8f4f 	dsb	sy
 800a5f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a5f8:	bf00      	nop
 800a5fa:	e7fe      	b.n	800a5fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d103      	bne.n	800a60a <xQueueGenericSend+0x6e>
 800a602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a606:	2b01      	cmp	r3, #1
 800a608:	d101      	bne.n	800a60e <xQueueGenericSend+0x72>
 800a60a:	2301      	movs	r3, #1
 800a60c:	e000      	b.n	800a610 <xQueueGenericSend+0x74>
 800a60e:	2300      	movs	r3, #0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10a      	bne.n	800a62a <xQueueGenericSend+0x8e>
	__asm volatile
 800a614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a618:	f383 8811 	msr	BASEPRI, r3
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	623b      	str	r3, [r7, #32]
}
 800a626:	bf00      	nop
 800a628:	e7fe      	b.n	800a628 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a62a:	f001 f9bd 	bl	800b9a8 <xTaskGetSchedulerState>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d102      	bne.n	800a63a <xQueueGenericSend+0x9e>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d101      	bne.n	800a63e <xQueueGenericSend+0xa2>
 800a63a:	2301      	movs	r3, #1
 800a63c:	e000      	b.n	800a640 <xQueueGenericSend+0xa4>
 800a63e:	2300      	movs	r3, #0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10a      	bne.n	800a65a <xQueueGenericSend+0xbe>
	__asm volatile
 800a644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	61fb      	str	r3, [r7, #28]
}
 800a656:	bf00      	nop
 800a658:	e7fe      	b.n	800a658 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a65a:	f001 fcf3 	bl	800c044 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a666:	429a      	cmp	r2, r3
 800a668:	d302      	bcc.n	800a670 <xQueueGenericSend+0xd4>
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d129      	bne.n	800a6c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a670:	683a      	ldr	r2, [r7, #0]
 800a672:	68b9      	ldr	r1, [r7, #8]
 800a674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a676:	f000 fac1 	bl	800abfc <prvCopyDataToQueue>
 800a67a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a680:	2b00      	cmp	r3, #0
 800a682:	d010      	beq.n	800a6a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	3324      	adds	r3, #36	; 0x24
 800a688:	4618      	mov	r0, r3
 800a68a:	f000 ffd1 	bl	800b630 <xTaskRemoveFromEventList>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d013      	beq.n	800a6bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a694:	4b3f      	ldr	r3, [pc, #252]	; (800a794 <xQueueGenericSend+0x1f8>)
 800a696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a69a:	601a      	str	r2, [r3, #0]
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	f3bf 8f6f 	isb	sy
 800a6a4:	e00a      	b.n	800a6bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d007      	beq.n	800a6bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a6ac:	4b39      	ldr	r3, [pc, #228]	; (800a794 <xQueueGenericSend+0x1f8>)
 800a6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6b2:	601a      	str	r2, [r3, #0]
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a6bc:	f001 fcf2 	bl	800c0a4 <vPortExitCritical>
				return pdPASS;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e063      	b.n	800a78c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d103      	bne.n	800a6d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6ca:	f001 fceb 	bl	800c0a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	e05c      	b.n	800a78c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d106      	bne.n	800a6e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6d8:	f107 0314 	add.w	r3, r7, #20
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f001 f809 	bl	800b6f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6e6:	f001 fcdd 	bl	800c0a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6ea:	f000 fdbf 	bl	800b26c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6ee:	f001 fca9 	bl	800c044 <vPortEnterCritical>
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6f8:	b25b      	sxtb	r3, r3
 800a6fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6fe:	d103      	bne.n	800a708 <xQueueGenericSend+0x16c>
 800a700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a702:	2200      	movs	r2, #0
 800a704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a70e:	b25b      	sxtb	r3, r3
 800a710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a714:	d103      	bne.n	800a71e <xQueueGenericSend+0x182>
 800a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a71e:	f001 fcc1 	bl	800c0a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a722:	1d3a      	adds	r2, r7, #4
 800a724:	f107 0314 	add.w	r3, r7, #20
 800a728:	4611      	mov	r1, r2
 800a72a:	4618      	mov	r0, r3
 800a72c:	f000 fff8 	bl	800b720 <xTaskCheckForTimeOut>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d124      	bne.n	800a780 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a736:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a738:	f000 fb58 	bl	800adec <prvIsQueueFull>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d018      	beq.n	800a774 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a744:	3310      	adds	r3, #16
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	4611      	mov	r1, r2
 800a74a:	4618      	mov	r0, r3
 800a74c:	f000 ff4c 	bl	800b5e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a752:	f000 fae3 	bl	800ad1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a756:	f000 fd97 	bl	800b288 <xTaskResumeAll>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f47f af7c 	bne.w	800a65a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a762:	4b0c      	ldr	r3, [pc, #48]	; (800a794 <xQueueGenericSend+0x1f8>)
 800a764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a768:	601a      	str	r2, [r3, #0]
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	f3bf 8f6f 	isb	sy
 800a772:	e772      	b.n	800a65a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a776:	f000 fad1 	bl	800ad1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a77a:	f000 fd85 	bl	800b288 <xTaskResumeAll>
 800a77e:	e76c      	b.n	800a65a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a782:	f000 facb 	bl	800ad1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a786:	f000 fd7f 	bl	800b288 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a78a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3738      	adds	r7, #56	; 0x38
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	e000ed04 	.word	0xe000ed04

0800a798 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b08e      	sub	sp, #56	; 0x38
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10a      	bne.n	800a7c2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b0:	f383 8811 	msr	BASEPRI, r3
 800a7b4:	f3bf 8f6f 	isb	sy
 800a7b8:	f3bf 8f4f 	dsb	sy
 800a7bc:	623b      	str	r3, [r7, #32]
}
 800a7be:	bf00      	nop
 800a7c0:	e7fe      	b.n	800a7c0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00a      	beq.n	800a7e0 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ce:	f383 8811 	msr	BASEPRI, r3
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	61fb      	str	r3, [r7, #28]
}
 800a7dc:	bf00      	nop
 800a7de:	e7fe      	b.n	800a7de <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d103      	bne.n	800a7f0 <xQueueGiveFromISR+0x58>
 800a7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <xQueueGiveFromISR+0x5c>
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e000      	b.n	800a7f6 <xQueueGiveFromISR+0x5e>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d10a      	bne.n	800a810 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fe:	f383 8811 	msr	BASEPRI, r3
 800a802:	f3bf 8f6f 	isb	sy
 800a806:	f3bf 8f4f 	dsb	sy
 800a80a:	61bb      	str	r3, [r7, #24]
}
 800a80c:	bf00      	nop
 800a80e:	e7fe      	b.n	800a80e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a810:	f001 fcfa 	bl	800c208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a814:	f3ef 8211 	mrs	r2, BASEPRI
 800a818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81c:	f383 8811 	msr	BASEPRI, r3
 800a820:	f3bf 8f6f 	isb	sy
 800a824:	f3bf 8f4f 	dsb	sy
 800a828:	617a      	str	r2, [r7, #20]
 800a82a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a82c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a82e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a834:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a83a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d22b      	bcs.n	800a898 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84c:	1c5a      	adds	r2, r3, #1
 800a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a850:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a852:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a85a:	d112      	bne.n	800a882 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a860:	2b00      	cmp	r3, #0
 800a862:	d016      	beq.n	800a892 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a866:	3324      	adds	r3, #36	; 0x24
 800a868:	4618      	mov	r0, r3
 800a86a:	f000 fee1 	bl	800b630 <xTaskRemoveFromEventList>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d00e      	beq.n	800a892 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00b      	beq.n	800a892 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	2201      	movs	r2, #1
 800a87e:	601a      	str	r2, [r3, #0]
 800a880:	e007      	b.n	800a892 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a886:	3301      	adds	r3, #1
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	b25a      	sxtb	r2, r3
 800a88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a892:	2301      	movs	r3, #1
 800a894:	637b      	str	r3, [r7, #52]	; 0x34
 800a896:	e001      	b.n	800a89c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a898:	2300      	movs	r3, #0
 800a89a:	637b      	str	r3, [r7, #52]	; 0x34
 800a89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a8a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3738      	adds	r7, #56	; 0x38
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
	...

0800a8b4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b08e      	sub	sp, #56	; 0x38
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10a      	bne.n	800a8e6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	623b      	str	r3, [r7, #32]
}
 800a8e2:	bf00      	nop
 800a8e4:	e7fe      	b.n	800a8e4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00a      	beq.n	800a904 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f2:	f383 8811 	msr	BASEPRI, r3
 800a8f6:	f3bf 8f6f 	isb	sy
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	61fb      	str	r3, [r7, #28]
}
 800a900:	bf00      	nop
 800a902:	e7fe      	b.n	800a902 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a904:	f001 f850 	bl	800b9a8 <xTaskGetSchedulerState>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d102      	bne.n	800a914 <xQueueSemaphoreTake+0x60>
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d101      	bne.n	800a918 <xQueueSemaphoreTake+0x64>
 800a914:	2301      	movs	r3, #1
 800a916:	e000      	b.n	800a91a <xQueueSemaphoreTake+0x66>
 800a918:	2300      	movs	r3, #0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d10a      	bne.n	800a934 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a922:	f383 8811 	msr	BASEPRI, r3
 800a926:	f3bf 8f6f 	isb	sy
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	61bb      	str	r3, [r7, #24]
}
 800a930:	bf00      	nop
 800a932:	e7fe      	b.n	800a932 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a934:	f001 fb86 	bl	800c044 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a940:	2b00      	cmp	r3, #0
 800a942:	d024      	beq.n	800a98e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a946:	1e5a      	subs	r2, r3, #1
 800a948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d104      	bne.n	800a95e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a954:	f001 f9d0 	bl	800bcf8 <pvTaskIncrementMutexHeldCount>
 800a958:	4602      	mov	r2, r0
 800a95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d00f      	beq.n	800a986 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a968:	3310      	adds	r3, #16
 800a96a:	4618      	mov	r0, r3
 800a96c:	f000 fe60 	bl	800b630 <xTaskRemoveFromEventList>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d007      	beq.n	800a986 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a976:	4b54      	ldr	r3, [pc, #336]	; (800aac8 <xQueueSemaphoreTake+0x214>)
 800a978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a97c:	601a      	str	r2, [r3, #0]
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a986:	f001 fb8d 	bl	800c0a4 <vPortExitCritical>
				return pdPASS;
 800a98a:	2301      	movs	r3, #1
 800a98c:	e097      	b.n	800aabe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d111      	bne.n	800a9b8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00a      	beq.n	800a9b0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99e:	f383 8811 	msr	BASEPRI, r3
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	617b      	str	r3, [r7, #20]
}
 800a9ac:	bf00      	nop
 800a9ae:	e7fe      	b.n	800a9ae <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a9b0:	f001 fb78 	bl	800c0a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	e082      	b.n	800aabe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d106      	bne.n	800a9cc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9be:	f107 030c 	add.w	r3, r7, #12
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f000 fe96 	bl	800b6f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9cc:	f001 fb6a 	bl	800c0a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9d0:	f000 fc4c 	bl	800b26c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9d4:	f001 fb36 	bl	800c044 <vPortEnterCritical>
 800a9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9de:	b25b      	sxtb	r3, r3
 800a9e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9e4:	d103      	bne.n	800a9ee <xQueueSemaphoreTake+0x13a>
 800a9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9f4:	b25b      	sxtb	r3, r3
 800a9f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9fa:	d103      	bne.n	800aa04 <xQueueSemaphoreTake+0x150>
 800a9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa04:	f001 fb4e 	bl	800c0a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa08:	463a      	mov	r2, r7
 800aa0a:	f107 030c 	add.w	r3, r7, #12
 800aa0e:	4611      	mov	r1, r2
 800aa10:	4618      	mov	r0, r3
 800aa12:	f000 fe85 	bl	800b720 <xTaskCheckForTimeOut>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d132      	bne.n	800aa82 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa1e:	f000 f9cf 	bl	800adc0 <prvIsQueueEmpty>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d026      	beq.n	800aa76 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d109      	bne.n	800aa44 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800aa30:	f001 fb08 	bl	800c044 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f000 ffd3 	bl	800b9e4 <xTaskPriorityInherit>
 800aa3e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800aa40:	f001 fb30 	bl	800c0a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa46:	3324      	adds	r3, #36	; 0x24
 800aa48:	683a      	ldr	r2, [r7, #0]
 800aa4a:	4611      	mov	r1, r2
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f000 fdcb 	bl	800b5e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa54:	f000 f962 	bl	800ad1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa58:	f000 fc16 	bl	800b288 <xTaskResumeAll>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	f47f af68 	bne.w	800a934 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800aa64:	4b18      	ldr	r3, [pc, #96]	; (800aac8 <xQueueSemaphoreTake+0x214>)
 800aa66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	f3bf 8f6f 	isb	sy
 800aa74:	e75e      	b.n	800a934 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aa76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa78:	f000 f950 	bl	800ad1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa7c:	f000 fc04 	bl	800b288 <xTaskResumeAll>
 800aa80:	e758      	b.n	800a934 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aa82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa84:	f000 f94a 	bl	800ad1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa88:	f000 fbfe 	bl	800b288 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa8e:	f000 f997 	bl	800adc0 <prvIsQueueEmpty>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f43f af4d 	beq.w	800a934 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d00d      	beq.n	800aabc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800aaa0:	f001 fad0 	bl	800c044 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aaa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aaa6:	f000 f891 	bl	800abcc <prvGetDisinheritPriorityAfterTimeout>
 800aaaa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aaac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aab2:	4618      	mov	r0, r3
 800aab4:	f001 f892 	bl	800bbdc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aab8:	f001 faf4 	bl	800c0a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aabc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3738      	adds	r7, #56	; 0x38
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	e000ed04 	.word	0xe000ed04

0800aacc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b08e      	sub	sp, #56	; 0x38
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d10a      	bne.n	800aaf8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800aae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae6:	f383 8811 	msr	BASEPRI, r3
 800aaea:	f3bf 8f6f 	isb	sy
 800aaee:	f3bf 8f4f 	dsb	sy
 800aaf2:	623b      	str	r3, [r7, #32]
}
 800aaf4:	bf00      	nop
 800aaf6:	e7fe      	b.n	800aaf6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d103      	bne.n	800ab06 <xQueueReceiveFromISR+0x3a>
 800aafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d101      	bne.n	800ab0a <xQueueReceiveFromISR+0x3e>
 800ab06:	2301      	movs	r3, #1
 800ab08:	e000      	b.n	800ab0c <xQueueReceiveFromISR+0x40>
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d10a      	bne.n	800ab26 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ab10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab14:	f383 8811 	msr	BASEPRI, r3
 800ab18:	f3bf 8f6f 	isb	sy
 800ab1c:	f3bf 8f4f 	dsb	sy
 800ab20:	61fb      	str	r3, [r7, #28]
}
 800ab22:	bf00      	nop
 800ab24:	e7fe      	b.n	800ab24 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab26:	f001 fb6f 	bl	800c208 <vPortValidateInterruptPriority>
	__asm volatile
 800ab2a:	f3ef 8211 	mrs	r2, BASEPRI
 800ab2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab32:	f383 8811 	msr	BASEPRI, r3
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	61ba      	str	r2, [r7, #24]
 800ab40:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ab42:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab4a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d02f      	beq.n	800abb2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ab52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab5c:	68b9      	ldr	r1, [r7, #8]
 800ab5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab60:	f000 f8b6 	bl	800acd0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab66:	1e5a      	subs	r2, r3, #1
 800ab68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ab6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab74:	d112      	bne.n	800ab9c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d016      	beq.n	800abac <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab80:	3310      	adds	r3, #16
 800ab82:	4618      	mov	r0, r3
 800ab84:	f000 fd54 	bl	800b630 <xTaskRemoveFromEventList>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00e      	beq.n	800abac <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00b      	beq.n	800abac <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	601a      	str	r2, [r3, #0]
 800ab9a:	e007      	b.n	800abac <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ab9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aba0:	3301      	adds	r3, #1
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	b25a      	sxtb	r2, r3
 800aba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800abac:	2301      	movs	r3, #1
 800abae:	637b      	str	r3, [r7, #52]	; 0x34
 800abb0:	e001      	b.n	800abb6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800abb2:	2300      	movs	r3, #0
 800abb4:	637b      	str	r3, [r7, #52]	; 0x34
 800abb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	f383 8811 	msr	BASEPRI, r3
}
 800abc0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3738      	adds	r7, #56	; 0x38
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d006      	beq.n	800abea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f1c3 0307 	rsb	r3, r3, #7
 800abe6:	60fb      	str	r3, [r7, #12]
 800abe8:	e001      	b.n	800abee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800abea:	2300      	movs	r3, #0
 800abec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800abee:	68fb      	ldr	r3, [r7, #12]
	}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3714      	adds	r7, #20
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d10d      	bne.n	800ac36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d14d      	bne.n	800acbe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	4618      	mov	r0, r3
 800ac28:	f000 ff52 	bl	800bad0 <xTaskPriorityDisinherit>
 800ac2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	609a      	str	r2, [r3, #8]
 800ac34:	e043      	b.n	800acbe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d119      	bne.n	800ac70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6858      	ldr	r0, [r3, #4]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac44:	461a      	mov	r2, r3
 800ac46:	68b9      	ldr	r1, [r7, #8]
 800ac48:	f002 fa76 	bl	800d138 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac54:	441a      	add	r2, r3
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	685a      	ldr	r2, [r3, #4]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	689b      	ldr	r3, [r3, #8]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d32b      	bcc.n	800acbe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	605a      	str	r2, [r3, #4]
 800ac6e:	e026      	b.n	800acbe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	68d8      	ldr	r0, [r3, #12]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac78:	461a      	mov	r2, r3
 800ac7a:	68b9      	ldr	r1, [r7, #8]
 800ac7c:	f002 fa5c 	bl	800d138 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	68da      	ldr	r2, [r3, #12]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac88:	425b      	negs	r3, r3
 800ac8a:	441a      	add	r2, r3
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	68da      	ldr	r2, [r3, #12]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d207      	bcs.n	800acac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	689a      	ldr	r2, [r3, #8]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca4:	425b      	negs	r3, r3
 800aca6:	441a      	add	r2, r3
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2b02      	cmp	r3, #2
 800acb0:	d105      	bne.n	800acbe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d002      	beq.n	800acbe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	3b01      	subs	r3, #1
 800acbc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	1c5a      	adds	r2, r3, #1
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800acc6:	697b      	ldr	r3, [r7, #20]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3718      	adds	r7, #24
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d018      	beq.n	800ad14 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	68da      	ldr	r2, [r3, #12]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acea:	441a      	add	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	68da      	ldr	r2, [r3, #12]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d303      	bcc.n	800ad04 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	68d9      	ldr	r1, [r3, #12]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	6838      	ldr	r0, [r7, #0]
 800ad10:	f002 fa12 	bl	800d138 <memcpy>
	}
}
 800ad14:	bf00      	nop
 800ad16:	3708      	adds	r7, #8
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad24:	f001 f98e 	bl	800c044 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad30:	e011      	b.n	800ad56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d012      	beq.n	800ad60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	3324      	adds	r3, #36	; 0x24
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f000 fc76 	bl	800b630 <xTaskRemoveFromEventList>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d001      	beq.n	800ad4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad4a:	f000 fd4b 	bl	800b7e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad4e:	7bfb      	ldrb	r3, [r7, #15]
 800ad50:	3b01      	subs	r3, #1
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	dce9      	bgt.n	800ad32 <prvUnlockQueue+0x16>
 800ad5e:	e000      	b.n	800ad62 <prvUnlockQueue+0x46>
					break;
 800ad60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	22ff      	movs	r2, #255	; 0xff
 800ad66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ad6a:	f001 f99b 	bl	800c0a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad6e:	f001 f969 	bl	800c044 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad7a:	e011      	b.n	800ada0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d012      	beq.n	800adaa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	3310      	adds	r3, #16
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 fc51 	bl	800b630 <xTaskRemoveFromEventList>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d001      	beq.n	800ad98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ad94:	f000 fd26 	bl	800b7e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad98:	7bbb      	ldrb	r3, [r7, #14]
 800ad9a:	3b01      	subs	r3, #1
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ada0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	dce9      	bgt.n	800ad7c <prvUnlockQueue+0x60>
 800ada8:	e000      	b.n	800adac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800adaa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	22ff      	movs	r2, #255	; 0xff
 800adb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800adb4:	f001 f976 	bl	800c0a4 <vPortExitCritical>
}
 800adb8:	bf00      	nop
 800adba:	3710      	adds	r7, #16
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adc8:	f001 f93c 	bl	800c044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add0:	2b00      	cmp	r3, #0
 800add2:	d102      	bne.n	800adda <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800add4:	2301      	movs	r3, #1
 800add6:	60fb      	str	r3, [r7, #12]
 800add8:	e001      	b.n	800adde <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800adda:	2300      	movs	r3, #0
 800addc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800adde:	f001 f961 	bl	800c0a4 <vPortExitCritical>

	return xReturn;
 800ade2:	68fb      	ldr	r3, [r7, #12]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adf4:	f001 f926 	bl	800c044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d102      	bne.n	800ae0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae04:	2301      	movs	r3, #1
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	e001      	b.n	800ae0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae0e:	f001 f949 	bl	800c0a4 <vPortExitCritical>

	return xReturn;
 800ae12:	68fb      	ldr	r3, [r7, #12]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b08e      	sub	sp, #56	; 0x38
 800ae20:	af04      	add	r7, sp, #16
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	607a      	str	r2, [r7, #4]
 800ae28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d10a      	bne.n	800ae46 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ae30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae34:	f383 8811 	msr	BASEPRI, r3
 800ae38:	f3bf 8f6f 	isb	sy
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	623b      	str	r3, [r7, #32]
}
 800ae42:	bf00      	nop
 800ae44:	e7fe      	b.n	800ae44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ae46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d10a      	bne.n	800ae62 <xTaskCreateStatic+0x46>
	__asm volatile
 800ae4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae50:	f383 8811 	msr	BASEPRI, r3
 800ae54:	f3bf 8f6f 	isb	sy
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	61fb      	str	r3, [r7, #28]
}
 800ae5e:	bf00      	nop
 800ae60:	e7fe      	b.n	800ae60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae62:	2354      	movs	r3, #84	; 0x54
 800ae64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	2b54      	cmp	r3, #84	; 0x54
 800ae6a:	d00a      	beq.n	800ae82 <xTaskCreateStatic+0x66>
	__asm volatile
 800ae6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae70:	f383 8811 	msr	BASEPRI, r3
 800ae74:	f3bf 8f6f 	isb	sy
 800ae78:	f3bf 8f4f 	dsb	sy
 800ae7c:	61bb      	str	r3, [r7, #24]
}
 800ae7e:	bf00      	nop
 800ae80:	e7fe      	b.n	800ae80 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d01e      	beq.n	800aec8 <xTaskCreateStatic+0xac>
 800ae8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d01b      	beq.n	800aec8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9c:	2202      	movs	r2, #2
 800ae9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aea2:	2300      	movs	r3, #0
 800aea4:	9303      	str	r3, [sp, #12]
 800aea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea8:	9302      	str	r3, [sp, #8]
 800aeaa:	f107 0314 	add.w	r3, r7, #20
 800aeae:	9301      	str	r3, [sp, #4]
 800aeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb2:	9300      	str	r3, [sp, #0]
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	68b9      	ldr	r1, [r7, #8]
 800aeba:	68f8      	ldr	r0, [r7, #12]
 800aebc:	f000 f850 	bl	800af60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aec0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aec2:	f000 f8d5 	bl	800b070 <prvAddNewTaskToReadyList>
 800aec6:	e001      	b.n	800aecc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aec8:	2300      	movs	r3, #0
 800aeca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aecc:	697b      	ldr	r3, [r7, #20]
	}
 800aece:	4618      	mov	r0, r3
 800aed0:	3728      	adds	r7, #40	; 0x28
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b08c      	sub	sp, #48	; 0x30
 800aeda:	af04      	add	r7, sp, #16
 800aedc:	60f8      	str	r0, [r7, #12]
 800aede:	60b9      	str	r1, [r7, #8]
 800aee0:	603b      	str	r3, [r7, #0]
 800aee2:	4613      	mov	r3, r2
 800aee4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aee6:	88fb      	ldrh	r3, [r7, #6]
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	4618      	mov	r0, r3
 800aeec:	f001 f9cc 	bl	800c288 <pvPortMalloc>
 800aef0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00e      	beq.n	800af16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aef8:	2054      	movs	r0, #84	; 0x54
 800aefa:	f001 f9c5 	bl	800c288 <pvPortMalloc>
 800aefe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d003      	beq.n	800af0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	697a      	ldr	r2, [r7, #20]
 800af0a:	631a      	str	r2, [r3, #48]	; 0x30
 800af0c:	e005      	b.n	800af1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800af0e:	6978      	ldr	r0, [r7, #20]
 800af10:	f001 fa86 	bl	800c420 <vPortFree>
 800af14:	e001      	b.n	800af1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af16:	2300      	movs	r3, #0
 800af18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d017      	beq.n	800af50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	2200      	movs	r2, #0
 800af24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af28:	88fa      	ldrh	r2, [r7, #6]
 800af2a:	2300      	movs	r3, #0
 800af2c:	9303      	str	r3, [sp, #12]
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	9302      	str	r3, [sp, #8]
 800af32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af34:	9301      	str	r3, [sp, #4]
 800af36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af38:	9300      	str	r3, [sp, #0]
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	68b9      	ldr	r1, [r7, #8]
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	f000 f80e 	bl	800af60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af44:	69f8      	ldr	r0, [r7, #28]
 800af46:	f000 f893 	bl	800b070 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af4a:	2301      	movs	r3, #1
 800af4c:	61bb      	str	r3, [r7, #24]
 800af4e:	e002      	b.n	800af56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af56:	69bb      	ldr	r3, [r7, #24]
	}
 800af58:	4618      	mov	r0, r3
 800af5a:	3720      	adds	r7, #32
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b088      	sub	sp, #32
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
 800af6c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800af78:	3b01      	subs	r3, #1
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4413      	add	r3, r2
 800af7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	f023 0307 	bic.w	r3, r3, #7
 800af86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	f003 0307 	and.w	r3, r3, #7
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00a      	beq.n	800afa8 <prvInitialiseNewTask+0x48>
	__asm volatile
 800af92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af96:	f383 8811 	msr	BASEPRI, r3
 800af9a:	f3bf 8f6f 	isb	sy
 800af9e:	f3bf 8f4f 	dsb	sy
 800afa2:	617b      	str	r3, [r7, #20]
}
 800afa4:	bf00      	nop
 800afa6:	e7fe      	b.n	800afa6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d01f      	beq.n	800afee <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afae:	2300      	movs	r3, #0
 800afb0:	61fb      	str	r3, [r7, #28]
 800afb2:	e012      	b.n	800afda <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800afb4:	68ba      	ldr	r2, [r7, #8]
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	4413      	add	r3, r2
 800afba:	7819      	ldrb	r1, [r3, #0]
 800afbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	4413      	add	r3, r2
 800afc2:	3334      	adds	r3, #52	; 0x34
 800afc4:	460a      	mov	r2, r1
 800afc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800afc8:	68ba      	ldr	r2, [r7, #8]
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	4413      	add	r3, r2
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d006      	beq.n	800afe2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afd4:	69fb      	ldr	r3, [r7, #28]
 800afd6:	3301      	adds	r3, #1
 800afd8:	61fb      	str	r3, [r7, #28]
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	2b0f      	cmp	r3, #15
 800afde:	d9e9      	bls.n	800afb4 <prvInitialiseNewTask+0x54>
 800afe0:	e000      	b.n	800afe4 <prvInitialiseNewTask+0x84>
			{
				break;
 800afe2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800afe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe6:	2200      	movs	r2, #0
 800afe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800afec:	e003      	b.n	800aff6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800afee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff0:	2200      	movs	r2, #0
 800aff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff8:	2b06      	cmp	r3, #6
 800affa:	d901      	bls.n	800b000 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800affc:	2306      	movs	r3, #6
 800affe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b004:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b00a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00e:	2200      	movs	r2, #0
 800b010:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b014:	3304      	adds	r3, #4
 800b016:	4618      	mov	r0, r3
 800b018:	f7ff f8a6 	bl	800a168 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01e:	3318      	adds	r3, #24
 800b020:	4618      	mov	r0, r3
 800b022:	f7ff f8a1 	bl	800a168 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b02a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02e:	f1c3 0207 	rsb	r2, r3, #7
 800b032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b034:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b03a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03e:	2200      	movs	r2, #0
 800b040:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b044:	2200      	movs	r2, #0
 800b046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b04a:	683a      	ldr	r2, [r7, #0]
 800b04c:	68f9      	ldr	r1, [r7, #12]
 800b04e:	69b8      	ldr	r0, [r7, #24]
 800b050:	f000 fecc 	bl	800bdec <pxPortInitialiseStack>
 800b054:	4602      	mov	r2, r0
 800b056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b058:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d002      	beq.n	800b066 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b066:	bf00      	nop
 800b068:	3720      	adds	r7, #32
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
	...

0800b070 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b078:	f000 ffe4 	bl	800c044 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b07c:	4b2a      	ldr	r3, [pc, #168]	; (800b128 <prvAddNewTaskToReadyList+0xb8>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	3301      	adds	r3, #1
 800b082:	4a29      	ldr	r2, [pc, #164]	; (800b128 <prvAddNewTaskToReadyList+0xb8>)
 800b084:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b086:	4b29      	ldr	r3, [pc, #164]	; (800b12c <prvAddNewTaskToReadyList+0xbc>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d109      	bne.n	800b0a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b08e:	4a27      	ldr	r2, [pc, #156]	; (800b12c <prvAddNewTaskToReadyList+0xbc>)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b094:	4b24      	ldr	r3, [pc, #144]	; (800b128 <prvAddNewTaskToReadyList+0xb8>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d110      	bne.n	800b0be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b09c:	f000 fbc6 	bl	800b82c <prvInitialiseTaskLists>
 800b0a0:	e00d      	b.n	800b0be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b0a2:	4b23      	ldr	r3, [pc, #140]	; (800b130 <prvAddNewTaskToReadyList+0xc0>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d109      	bne.n	800b0be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b0aa:	4b20      	ldr	r3, [pc, #128]	; (800b12c <prvAddNewTaskToReadyList+0xbc>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d802      	bhi.n	800b0be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b0b8:	4a1c      	ldr	r2, [pc, #112]	; (800b12c <prvAddNewTaskToReadyList+0xbc>)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b0be:	4b1d      	ldr	r3, [pc, #116]	; (800b134 <prvAddNewTaskToReadyList+0xc4>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	4a1b      	ldr	r2, [pc, #108]	; (800b134 <prvAddNewTaskToReadyList+0xc4>)
 800b0c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	409a      	lsls	r2, r3
 800b0d0:	4b19      	ldr	r3, [pc, #100]	; (800b138 <prvAddNewTaskToReadyList+0xc8>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	4a18      	ldr	r2, [pc, #96]	; (800b138 <prvAddNewTaskToReadyList+0xc8>)
 800b0d8:	6013      	str	r3, [r2, #0]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0de:	4613      	mov	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	4413      	add	r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4a15      	ldr	r2, [pc, #84]	; (800b13c <prvAddNewTaskToReadyList+0xcc>)
 800b0e8:	441a      	add	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	3304      	adds	r3, #4
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	f7ff f846 	bl	800a182 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b0f6:	f000 ffd5 	bl	800c0a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b0fa:	4b0d      	ldr	r3, [pc, #52]	; (800b130 <prvAddNewTaskToReadyList+0xc0>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d00e      	beq.n	800b120 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b102:	4b0a      	ldr	r3, [pc, #40]	; (800b12c <prvAddNewTaskToReadyList+0xbc>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d207      	bcs.n	800b120 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b110:	4b0b      	ldr	r3, [pc, #44]	; (800b140 <prvAddNewTaskToReadyList+0xd0>)
 800b112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b116:	601a      	str	r2, [r3, #0]
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b120:	bf00      	nop
 800b122:	3708      	adds	r7, #8
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	20000958 	.word	0x20000958
 800b12c:	20000858 	.word	0x20000858
 800b130:	20000964 	.word	0x20000964
 800b134:	20000974 	.word	0x20000974
 800b138:	20000960 	.word	0x20000960
 800b13c:	2000085c 	.word	0x2000085c
 800b140:	e000ed04 	.word	0xe000ed04

0800b144 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b144:	b580      	push	{r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b14c:	2300      	movs	r3, #0
 800b14e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d017      	beq.n	800b186 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b156:	4b13      	ldr	r3, [pc, #76]	; (800b1a4 <vTaskDelay+0x60>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d00a      	beq.n	800b174 <vTaskDelay+0x30>
	__asm volatile
 800b15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b162:	f383 8811 	msr	BASEPRI, r3
 800b166:	f3bf 8f6f 	isb	sy
 800b16a:	f3bf 8f4f 	dsb	sy
 800b16e:	60bb      	str	r3, [r7, #8]
}
 800b170:	bf00      	nop
 800b172:	e7fe      	b.n	800b172 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b174:	f000 f87a 	bl	800b26c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b178:	2100      	movs	r1, #0
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 fdd0 	bl	800bd20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b180:	f000 f882 	bl	800b288 <xTaskResumeAll>
 800b184:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d107      	bne.n	800b19c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b18c:	4b06      	ldr	r3, [pc, #24]	; (800b1a8 <vTaskDelay+0x64>)
 800b18e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b192:	601a      	str	r2, [r3, #0]
 800b194:	f3bf 8f4f 	dsb	sy
 800b198:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b19c:	bf00      	nop
 800b19e:	3710      	adds	r7, #16
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	20000980 	.word	0x20000980
 800b1a8:	e000ed04 	.word	0xe000ed04

0800b1ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b08a      	sub	sp, #40	; 0x28
 800b1b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b1ba:	463a      	mov	r2, r7
 800b1bc:	1d39      	adds	r1, r7, #4
 800b1be:	f107 0308 	add.w	r3, r7, #8
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7f5 fe86 	bl	8000ed4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b1c8:	6839      	ldr	r1, [r7, #0]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	68ba      	ldr	r2, [r7, #8]
 800b1ce:	9202      	str	r2, [sp, #8]
 800b1d0:	9301      	str	r3, [sp, #4]
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	9300      	str	r3, [sp, #0]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	460a      	mov	r2, r1
 800b1da:	491e      	ldr	r1, [pc, #120]	; (800b254 <vTaskStartScheduler+0xa8>)
 800b1dc:	481e      	ldr	r0, [pc, #120]	; (800b258 <vTaskStartScheduler+0xac>)
 800b1de:	f7ff fe1d 	bl	800ae1c <xTaskCreateStatic>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	4a1d      	ldr	r2, [pc, #116]	; (800b25c <vTaskStartScheduler+0xb0>)
 800b1e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b1e8:	4b1c      	ldr	r3, [pc, #112]	; (800b25c <vTaskStartScheduler+0xb0>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	617b      	str	r3, [r7, #20]
 800b1f4:	e001      	b.n	800b1fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d116      	bne.n	800b22e <vTaskStartScheduler+0x82>
	__asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	613b      	str	r3, [r7, #16]
}
 800b212:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b214:	4b12      	ldr	r3, [pc, #72]	; (800b260 <vTaskStartScheduler+0xb4>)
 800b216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b21a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b21c:	4b11      	ldr	r3, [pc, #68]	; (800b264 <vTaskStartScheduler+0xb8>)
 800b21e:	2201      	movs	r2, #1
 800b220:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b222:	4b11      	ldr	r3, [pc, #68]	; (800b268 <vTaskStartScheduler+0xbc>)
 800b224:	2200      	movs	r2, #0
 800b226:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b228:	f000 fe6a 	bl	800bf00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b22c:	e00e      	b.n	800b24c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b234:	d10a      	bne.n	800b24c <vTaskStartScheduler+0xa0>
	__asm volatile
 800b236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23a:	f383 8811 	msr	BASEPRI, r3
 800b23e:	f3bf 8f6f 	isb	sy
 800b242:	f3bf 8f4f 	dsb	sy
 800b246:	60fb      	str	r3, [r7, #12]
}
 800b248:	bf00      	nop
 800b24a:	e7fe      	b.n	800b24a <vTaskStartScheduler+0x9e>
}
 800b24c:	bf00      	nop
 800b24e:	3718      	adds	r7, #24
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	0800f818 	.word	0x0800f818
 800b258:	0800b7fd 	.word	0x0800b7fd
 800b25c:	2000097c 	.word	0x2000097c
 800b260:	20000978 	.word	0x20000978
 800b264:	20000964 	.word	0x20000964
 800b268:	2000095c 	.word	0x2000095c

0800b26c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b26c:	b480      	push	{r7}
 800b26e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b270:	4b04      	ldr	r3, [pc, #16]	; (800b284 <vTaskSuspendAll+0x18>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	3301      	adds	r3, #1
 800b276:	4a03      	ldr	r2, [pc, #12]	; (800b284 <vTaskSuspendAll+0x18>)
 800b278:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b27a:	bf00      	nop
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr
 800b284:	20000980 	.word	0x20000980

0800b288 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b28e:	2300      	movs	r3, #0
 800b290:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b292:	2300      	movs	r3, #0
 800b294:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b296:	4b41      	ldr	r3, [pc, #260]	; (800b39c <xTaskResumeAll+0x114>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d10a      	bne.n	800b2b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800b29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a2:	f383 8811 	msr	BASEPRI, r3
 800b2a6:	f3bf 8f6f 	isb	sy
 800b2aa:	f3bf 8f4f 	dsb	sy
 800b2ae:	603b      	str	r3, [r7, #0]
}
 800b2b0:	bf00      	nop
 800b2b2:	e7fe      	b.n	800b2b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b2b4:	f000 fec6 	bl	800c044 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b2b8:	4b38      	ldr	r3, [pc, #224]	; (800b39c <xTaskResumeAll+0x114>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	4a37      	ldr	r2, [pc, #220]	; (800b39c <xTaskResumeAll+0x114>)
 800b2c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2c2:	4b36      	ldr	r3, [pc, #216]	; (800b39c <xTaskResumeAll+0x114>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d161      	bne.n	800b38e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b2ca:	4b35      	ldr	r3, [pc, #212]	; (800b3a0 <xTaskResumeAll+0x118>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d05d      	beq.n	800b38e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2d2:	e02e      	b.n	800b332 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2d4:	4b33      	ldr	r3, [pc, #204]	; (800b3a4 <xTaskResumeAll+0x11c>)
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	3318      	adds	r3, #24
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7fe ffab 	bl	800a23c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7fe ffa6 	bl	800a23c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	409a      	lsls	r2, r3
 800b2f8:	4b2b      	ldr	r3, [pc, #172]	; (800b3a8 <xTaskResumeAll+0x120>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	4a2a      	ldr	r2, [pc, #168]	; (800b3a8 <xTaskResumeAll+0x120>)
 800b300:	6013      	str	r3, [r2, #0]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b306:	4613      	mov	r3, r2
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	4413      	add	r3, r2
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	4a27      	ldr	r2, [pc, #156]	; (800b3ac <xTaskResumeAll+0x124>)
 800b310:	441a      	add	r2, r3
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	3304      	adds	r3, #4
 800b316:	4619      	mov	r1, r3
 800b318:	4610      	mov	r0, r2
 800b31a:	f7fe ff32 	bl	800a182 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b322:	4b23      	ldr	r3, [pc, #140]	; (800b3b0 <xTaskResumeAll+0x128>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b328:	429a      	cmp	r2, r3
 800b32a:	d302      	bcc.n	800b332 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b32c:	4b21      	ldr	r3, [pc, #132]	; (800b3b4 <xTaskResumeAll+0x12c>)
 800b32e:	2201      	movs	r2, #1
 800b330:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b332:	4b1c      	ldr	r3, [pc, #112]	; (800b3a4 <xTaskResumeAll+0x11c>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1cc      	bne.n	800b2d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d001      	beq.n	800b344 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b340:	f000 fb12 	bl	800b968 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b344:	4b1c      	ldr	r3, [pc, #112]	; (800b3b8 <xTaskResumeAll+0x130>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d010      	beq.n	800b372 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b350:	f000 f836 	bl	800b3c0 <xTaskIncrementTick>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d002      	beq.n	800b360 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b35a:	4b16      	ldr	r3, [pc, #88]	; (800b3b4 <xTaskResumeAll+0x12c>)
 800b35c:	2201      	movs	r2, #1
 800b35e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	3b01      	subs	r3, #1
 800b364:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d1f1      	bne.n	800b350 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b36c:	4b12      	ldr	r3, [pc, #72]	; (800b3b8 <xTaskResumeAll+0x130>)
 800b36e:	2200      	movs	r2, #0
 800b370:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b372:	4b10      	ldr	r3, [pc, #64]	; (800b3b4 <xTaskResumeAll+0x12c>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d009      	beq.n	800b38e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b37a:	2301      	movs	r3, #1
 800b37c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b37e:	4b0f      	ldr	r3, [pc, #60]	; (800b3bc <xTaskResumeAll+0x134>)
 800b380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b384:	601a      	str	r2, [r3, #0]
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b38e:	f000 fe89 	bl	800c0a4 <vPortExitCritical>

	return xAlreadyYielded;
 800b392:	68bb      	ldr	r3, [r7, #8]
}
 800b394:	4618      	mov	r0, r3
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	20000980 	.word	0x20000980
 800b3a0:	20000958 	.word	0x20000958
 800b3a4:	20000918 	.word	0x20000918
 800b3a8:	20000960 	.word	0x20000960
 800b3ac:	2000085c 	.word	0x2000085c
 800b3b0:	20000858 	.word	0x20000858
 800b3b4:	2000096c 	.word	0x2000096c
 800b3b8:	20000968 	.word	0x20000968
 800b3bc:	e000ed04 	.word	0xe000ed04

0800b3c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b086      	sub	sp, #24
 800b3c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3ca:	4b4e      	ldr	r3, [pc, #312]	; (800b504 <xTaskIncrementTick+0x144>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	f040 808e 	bne.w	800b4f0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b3d4:	4b4c      	ldr	r3, [pc, #304]	; (800b508 <xTaskIncrementTick+0x148>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b3dc:	4a4a      	ldr	r2, [pc, #296]	; (800b508 <xTaskIncrementTick+0x148>)
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d120      	bne.n	800b42a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b3e8:	4b48      	ldr	r3, [pc, #288]	; (800b50c <xTaskIncrementTick+0x14c>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00a      	beq.n	800b408 <xTaskIncrementTick+0x48>
	__asm volatile
 800b3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f6:	f383 8811 	msr	BASEPRI, r3
 800b3fa:	f3bf 8f6f 	isb	sy
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	603b      	str	r3, [r7, #0]
}
 800b404:	bf00      	nop
 800b406:	e7fe      	b.n	800b406 <xTaskIncrementTick+0x46>
 800b408:	4b40      	ldr	r3, [pc, #256]	; (800b50c <xTaskIncrementTick+0x14c>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	60fb      	str	r3, [r7, #12]
 800b40e:	4b40      	ldr	r3, [pc, #256]	; (800b510 <xTaskIncrementTick+0x150>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4a3e      	ldr	r2, [pc, #248]	; (800b50c <xTaskIncrementTick+0x14c>)
 800b414:	6013      	str	r3, [r2, #0]
 800b416:	4a3e      	ldr	r2, [pc, #248]	; (800b510 <xTaskIncrementTick+0x150>)
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	6013      	str	r3, [r2, #0]
 800b41c:	4b3d      	ldr	r3, [pc, #244]	; (800b514 <xTaskIncrementTick+0x154>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	3301      	adds	r3, #1
 800b422:	4a3c      	ldr	r2, [pc, #240]	; (800b514 <xTaskIncrementTick+0x154>)
 800b424:	6013      	str	r3, [r2, #0]
 800b426:	f000 fa9f 	bl	800b968 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b42a:	4b3b      	ldr	r3, [pc, #236]	; (800b518 <xTaskIncrementTick+0x158>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	693a      	ldr	r2, [r7, #16]
 800b430:	429a      	cmp	r2, r3
 800b432:	d348      	bcc.n	800b4c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b434:	4b35      	ldr	r3, [pc, #212]	; (800b50c <xTaskIncrementTick+0x14c>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d104      	bne.n	800b448 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b43e:	4b36      	ldr	r3, [pc, #216]	; (800b518 <xTaskIncrementTick+0x158>)
 800b440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b444:	601a      	str	r2, [r3, #0]
					break;
 800b446:	e03e      	b.n	800b4c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b448:	4b30      	ldr	r3, [pc, #192]	; (800b50c <xTaskIncrementTick+0x14c>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b458:	693a      	ldr	r2, [r7, #16]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d203      	bcs.n	800b468 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b460:	4a2d      	ldr	r2, [pc, #180]	; (800b518 <xTaskIncrementTick+0x158>)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b466:	e02e      	b.n	800b4c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	3304      	adds	r3, #4
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7fe fee5 	bl	800a23c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b476:	2b00      	cmp	r3, #0
 800b478:	d004      	beq.n	800b484 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	3318      	adds	r3, #24
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fe fedc 	bl	800a23c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b488:	2201      	movs	r2, #1
 800b48a:	409a      	lsls	r2, r3
 800b48c:	4b23      	ldr	r3, [pc, #140]	; (800b51c <xTaskIncrementTick+0x15c>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4313      	orrs	r3, r2
 800b492:	4a22      	ldr	r2, [pc, #136]	; (800b51c <xTaskIncrementTick+0x15c>)
 800b494:	6013      	str	r3, [r2, #0]
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b49a:	4613      	mov	r3, r2
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	4413      	add	r3, r2
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	4a1f      	ldr	r2, [pc, #124]	; (800b520 <xTaskIncrementTick+0x160>)
 800b4a4:	441a      	add	r2, r3
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	3304      	adds	r3, #4
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	4610      	mov	r0, r2
 800b4ae:	f7fe fe68 	bl	800a182 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4b6:	4b1b      	ldr	r3, [pc, #108]	; (800b524 <xTaskIncrementTick+0x164>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d3b9      	bcc.n	800b434 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4c4:	e7b6      	b.n	800b434 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b4c6:	4b17      	ldr	r3, [pc, #92]	; (800b524 <xTaskIncrementTick+0x164>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4cc:	4914      	ldr	r1, [pc, #80]	; (800b520 <xTaskIncrementTick+0x160>)
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	009b      	lsls	r3, r3, #2
 800b4d2:	4413      	add	r3, r2
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	440b      	add	r3, r1
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d901      	bls.n	800b4e2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b4e2:	4b11      	ldr	r3, [pc, #68]	; (800b528 <xTaskIncrementTick+0x168>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d007      	beq.n	800b4fa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	617b      	str	r3, [r7, #20]
 800b4ee:	e004      	b.n	800b4fa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b4f0:	4b0e      	ldr	r3, [pc, #56]	; (800b52c <xTaskIncrementTick+0x16c>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	4a0d      	ldr	r2, [pc, #52]	; (800b52c <xTaskIncrementTick+0x16c>)
 800b4f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b4fa:	697b      	ldr	r3, [r7, #20]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3718      	adds	r7, #24
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	20000980 	.word	0x20000980
 800b508:	2000095c 	.word	0x2000095c
 800b50c:	20000910 	.word	0x20000910
 800b510:	20000914 	.word	0x20000914
 800b514:	20000970 	.word	0x20000970
 800b518:	20000978 	.word	0x20000978
 800b51c:	20000960 	.word	0x20000960
 800b520:	2000085c 	.word	0x2000085c
 800b524:	20000858 	.word	0x20000858
 800b528:	2000096c 	.word	0x2000096c
 800b52c:	20000968 	.word	0x20000968

0800b530 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b530:	b480      	push	{r7}
 800b532:	b087      	sub	sp, #28
 800b534:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b536:	4b27      	ldr	r3, [pc, #156]	; (800b5d4 <vTaskSwitchContext+0xa4>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d003      	beq.n	800b546 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b53e:	4b26      	ldr	r3, [pc, #152]	; (800b5d8 <vTaskSwitchContext+0xa8>)
 800b540:	2201      	movs	r2, #1
 800b542:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b544:	e03f      	b.n	800b5c6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b546:	4b24      	ldr	r3, [pc, #144]	; (800b5d8 <vTaskSwitchContext+0xa8>)
 800b548:	2200      	movs	r2, #0
 800b54a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b54c:	4b23      	ldr	r3, [pc, #140]	; (800b5dc <vTaskSwitchContext+0xac>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	fab3 f383 	clz	r3, r3
 800b558:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b55a:	7afb      	ldrb	r3, [r7, #11]
 800b55c:	f1c3 031f 	rsb	r3, r3, #31
 800b560:	617b      	str	r3, [r7, #20]
 800b562:	491f      	ldr	r1, [pc, #124]	; (800b5e0 <vTaskSwitchContext+0xb0>)
 800b564:	697a      	ldr	r2, [r7, #20]
 800b566:	4613      	mov	r3, r2
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	4413      	add	r3, r2
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	440b      	add	r3, r1
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d10a      	bne.n	800b58c <vTaskSwitchContext+0x5c>
	__asm volatile
 800b576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57a:	f383 8811 	msr	BASEPRI, r3
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	f3bf 8f4f 	dsb	sy
 800b586:	607b      	str	r3, [r7, #4]
}
 800b588:	bf00      	nop
 800b58a:	e7fe      	b.n	800b58a <vTaskSwitchContext+0x5a>
 800b58c:	697a      	ldr	r2, [r7, #20]
 800b58e:	4613      	mov	r3, r2
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	4413      	add	r3, r2
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	4a12      	ldr	r2, [pc, #72]	; (800b5e0 <vTaskSwitchContext+0xb0>)
 800b598:	4413      	add	r3, r2
 800b59a:	613b      	str	r3, [r7, #16]
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	685a      	ldr	r2, [r3, #4]
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	605a      	str	r2, [r3, #4]
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	685a      	ldr	r2, [r3, #4]
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	3308      	adds	r3, #8
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d104      	bne.n	800b5bc <vTaskSwitchContext+0x8c>
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	685a      	ldr	r2, [r3, #4]
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	605a      	str	r2, [r3, #4]
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	4a08      	ldr	r2, [pc, #32]	; (800b5e4 <vTaskSwitchContext+0xb4>)
 800b5c4:	6013      	str	r3, [r2, #0]
}
 800b5c6:	bf00      	nop
 800b5c8:	371c      	adds	r7, #28
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	20000980 	.word	0x20000980
 800b5d8:	2000096c 	.word	0x2000096c
 800b5dc:	20000960 	.word	0x20000960
 800b5e0:	2000085c 	.word	0x2000085c
 800b5e4:	20000858 	.word	0x20000858

0800b5e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d10a      	bne.n	800b60e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fc:	f383 8811 	msr	BASEPRI, r3
 800b600:	f3bf 8f6f 	isb	sy
 800b604:	f3bf 8f4f 	dsb	sy
 800b608:	60fb      	str	r3, [r7, #12]
}
 800b60a:	bf00      	nop
 800b60c:	e7fe      	b.n	800b60c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b60e:	4b07      	ldr	r3, [pc, #28]	; (800b62c <vTaskPlaceOnEventList+0x44>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	3318      	adds	r3, #24
 800b614:	4619      	mov	r1, r3
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f7fe fdd7 	bl	800a1ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b61c:	2101      	movs	r1, #1
 800b61e:	6838      	ldr	r0, [r7, #0]
 800b620:	f000 fb7e 	bl	800bd20 <prvAddCurrentTaskToDelayedList>
}
 800b624:	bf00      	nop
 800b626:	3710      	adds	r7, #16
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}
 800b62c:	20000858 	.word	0x20000858

0800b630 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d10a      	bne.n	800b65c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64a:	f383 8811 	msr	BASEPRI, r3
 800b64e:	f3bf 8f6f 	isb	sy
 800b652:	f3bf 8f4f 	dsb	sy
 800b656:	60fb      	str	r3, [r7, #12]
}
 800b658:	bf00      	nop
 800b65a:	e7fe      	b.n	800b65a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	3318      	adds	r3, #24
 800b660:	4618      	mov	r0, r3
 800b662:	f7fe fdeb 	bl	800a23c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b666:	4b1d      	ldr	r3, [pc, #116]	; (800b6dc <xTaskRemoveFromEventList+0xac>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d11c      	bne.n	800b6a8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	3304      	adds	r3, #4
 800b672:	4618      	mov	r0, r3
 800b674:	f7fe fde2 	bl	800a23c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b67c:	2201      	movs	r2, #1
 800b67e:	409a      	lsls	r2, r3
 800b680:	4b17      	ldr	r3, [pc, #92]	; (800b6e0 <xTaskRemoveFromEventList+0xb0>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4313      	orrs	r3, r2
 800b686:	4a16      	ldr	r2, [pc, #88]	; (800b6e0 <xTaskRemoveFromEventList+0xb0>)
 800b688:	6013      	str	r3, [r2, #0]
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b68e:	4613      	mov	r3, r2
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	4413      	add	r3, r2
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	4a13      	ldr	r2, [pc, #76]	; (800b6e4 <xTaskRemoveFromEventList+0xb4>)
 800b698:	441a      	add	r2, r3
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	3304      	adds	r3, #4
 800b69e:	4619      	mov	r1, r3
 800b6a0:	4610      	mov	r0, r2
 800b6a2:	f7fe fd6e 	bl	800a182 <vListInsertEnd>
 800b6a6:	e005      	b.n	800b6b4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	3318      	adds	r3, #24
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	480e      	ldr	r0, [pc, #56]	; (800b6e8 <xTaskRemoveFromEventList+0xb8>)
 800b6b0:	f7fe fd67 	bl	800a182 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6b8:	4b0c      	ldr	r3, [pc, #48]	; (800b6ec <xTaskRemoveFromEventList+0xbc>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d905      	bls.n	800b6ce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b6c6:	4b0a      	ldr	r3, [pc, #40]	; (800b6f0 <xTaskRemoveFromEventList+0xc0>)
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	601a      	str	r2, [r3, #0]
 800b6cc:	e001      	b.n	800b6d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b6d2:	697b      	ldr	r3, [r7, #20]
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3718      	adds	r7, #24
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	20000980 	.word	0x20000980
 800b6e0:	20000960 	.word	0x20000960
 800b6e4:	2000085c 	.word	0x2000085c
 800b6e8:	20000918 	.word	0x20000918
 800b6ec:	20000858 	.word	0x20000858
 800b6f0:	2000096c 	.word	0x2000096c

0800b6f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b6fc:	4b06      	ldr	r3, [pc, #24]	; (800b718 <vTaskInternalSetTimeOutState+0x24>)
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b704:	4b05      	ldr	r3, [pc, #20]	; (800b71c <vTaskInternalSetTimeOutState+0x28>)
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	605a      	str	r2, [r3, #4]
}
 800b70c:	bf00      	nop
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr
 800b718:	20000970 	.word	0x20000970
 800b71c:	2000095c 	.word	0x2000095c

0800b720 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b088      	sub	sp, #32
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d10a      	bne.n	800b746 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b734:	f383 8811 	msr	BASEPRI, r3
 800b738:	f3bf 8f6f 	isb	sy
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	613b      	str	r3, [r7, #16]
}
 800b742:	bf00      	nop
 800b744:	e7fe      	b.n	800b744 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d10a      	bne.n	800b762 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b750:	f383 8811 	msr	BASEPRI, r3
 800b754:	f3bf 8f6f 	isb	sy
 800b758:	f3bf 8f4f 	dsb	sy
 800b75c:	60fb      	str	r3, [r7, #12]
}
 800b75e:	bf00      	nop
 800b760:	e7fe      	b.n	800b760 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b762:	f000 fc6f 	bl	800c044 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b766:	4b1d      	ldr	r3, [pc, #116]	; (800b7dc <xTaskCheckForTimeOut+0xbc>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	69ba      	ldr	r2, [r7, #24]
 800b772:	1ad3      	subs	r3, r2, r3
 800b774:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b77e:	d102      	bne.n	800b786 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b780:	2300      	movs	r3, #0
 800b782:	61fb      	str	r3, [r7, #28]
 800b784:	e023      	b.n	800b7ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	4b15      	ldr	r3, [pc, #84]	; (800b7e0 <xTaskCheckForTimeOut+0xc0>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d007      	beq.n	800b7a2 <xTaskCheckForTimeOut+0x82>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	69ba      	ldr	r2, [r7, #24]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d302      	bcc.n	800b7a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b79c:	2301      	movs	r3, #1
 800b79e:	61fb      	str	r3, [r7, #28]
 800b7a0:	e015      	b.n	800b7ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	697a      	ldr	r2, [r7, #20]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d20b      	bcs.n	800b7c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	1ad2      	subs	r2, r2, r3
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f7ff ff9b 	bl	800b6f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	61fb      	str	r3, [r7, #28]
 800b7c2:	e004      	b.n	800b7ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b7ce:	f000 fc69 	bl	800c0a4 <vPortExitCritical>

	return xReturn;
 800b7d2:	69fb      	ldr	r3, [r7, #28]
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3720      	adds	r7, #32
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	2000095c 	.word	0x2000095c
 800b7e0:	20000970 	.word	0x20000970

0800b7e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b7e8:	4b03      	ldr	r3, [pc, #12]	; (800b7f8 <vTaskMissedYield+0x14>)
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	601a      	str	r2, [r3, #0]
}
 800b7ee:	bf00      	nop
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr
 800b7f8:	2000096c 	.word	0x2000096c

0800b7fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b804:	f000 f852 	bl	800b8ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b808:	4b06      	ldr	r3, [pc, #24]	; (800b824 <prvIdleTask+0x28>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d9f9      	bls.n	800b804 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b810:	4b05      	ldr	r3, [pc, #20]	; (800b828 <prvIdleTask+0x2c>)
 800b812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b816:	601a      	str	r2, [r3, #0]
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b820:	e7f0      	b.n	800b804 <prvIdleTask+0x8>
 800b822:	bf00      	nop
 800b824:	2000085c 	.word	0x2000085c
 800b828:	e000ed04 	.word	0xe000ed04

0800b82c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b832:	2300      	movs	r3, #0
 800b834:	607b      	str	r3, [r7, #4]
 800b836:	e00c      	b.n	800b852 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	4613      	mov	r3, r2
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	4413      	add	r3, r2
 800b840:	009b      	lsls	r3, r3, #2
 800b842:	4a12      	ldr	r2, [pc, #72]	; (800b88c <prvInitialiseTaskLists+0x60>)
 800b844:	4413      	add	r3, r2
 800b846:	4618      	mov	r0, r3
 800b848:	f7fe fc6e 	bl	800a128 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	3301      	adds	r3, #1
 800b850:	607b      	str	r3, [r7, #4]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2b06      	cmp	r3, #6
 800b856:	d9ef      	bls.n	800b838 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b858:	480d      	ldr	r0, [pc, #52]	; (800b890 <prvInitialiseTaskLists+0x64>)
 800b85a:	f7fe fc65 	bl	800a128 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b85e:	480d      	ldr	r0, [pc, #52]	; (800b894 <prvInitialiseTaskLists+0x68>)
 800b860:	f7fe fc62 	bl	800a128 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b864:	480c      	ldr	r0, [pc, #48]	; (800b898 <prvInitialiseTaskLists+0x6c>)
 800b866:	f7fe fc5f 	bl	800a128 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b86a:	480c      	ldr	r0, [pc, #48]	; (800b89c <prvInitialiseTaskLists+0x70>)
 800b86c:	f7fe fc5c 	bl	800a128 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b870:	480b      	ldr	r0, [pc, #44]	; (800b8a0 <prvInitialiseTaskLists+0x74>)
 800b872:	f7fe fc59 	bl	800a128 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b876:	4b0b      	ldr	r3, [pc, #44]	; (800b8a4 <prvInitialiseTaskLists+0x78>)
 800b878:	4a05      	ldr	r2, [pc, #20]	; (800b890 <prvInitialiseTaskLists+0x64>)
 800b87a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b87c:	4b0a      	ldr	r3, [pc, #40]	; (800b8a8 <prvInitialiseTaskLists+0x7c>)
 800b87e:	4a05      	ldr	r2, [pc, #20]	; (800b894 <prvInitialiseTaskLists+0x68>)
 800b880:	601a      	str	r2, [r3, #0]
}
 800b882:	bf00      	nop
 800b884:	3708      	adds	r7, #8
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	2000085c 	.word	0x2000085c
 800b890:	200008e8 	.word	0x200008e8
 800b894:	200008fc 	.word	0x200008fc
 800b898:	20000918 	.word	0x20000918
 800b89c:	2000092c 	.word	0x2000092c
 800b8a0:	20000944 	.word	0x20000944
 800b8a4:	20000910 	.word	0x20000910
 800b8a8:	20000914 	.word	0x20000914

0800b8ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8b2:	e019      	b.n	800b8e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b8b4:	f000 fbc6 	bl	800c044 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8b8:	4b10      	ldr	r3, [pc, #64]	; (800b8fc <prvCheckTasksWaitingTermination+0x50>)
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	3304      	adds	r3, #4
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7fe fcb9 	bl	800a23c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b8ca:	4b0d      	ldr	r3, [pc, #52]	; (800b900 <prvCheckTasksWaitingTermination+0x54>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	3b01      	subs	r3, #1
 800b8d0:	4a0b      	ldr	r2, [pc, #44]	; (800b900 <prvCheckTasksWaitingTermination+0x54>)
 800b8d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b8d4:	4b0b      	ldr	r3, [pc, #44]	; (800b904 <prvCheckTasksWaitingTermination+0x58>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	4a0a      	ldr	r2, [pc, #40]	; (800b904 <prvCheckTasksWaitingTermination+0x58>)
 800b8dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b8de:	f000 fbe1 	bl	800c0a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 f810 	bl	800b908 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8e8:	4b06      	ldr	r3, [pc, #24]	; (800b904 <prvCheckTasksWaitingTermination+0x58>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d1e1      	bne.n	800b8b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b8f0:	bf00      	nop
 800b8f2:	bf00      	nop
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	2000092c 	.word	0x2000092c
 800b900:	20000958 	.word	0x20000958
 800b904:	20000940 	.word	0x20000940

0800b908 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b916:	2b00      	cmp	r3, #0
 800b918:	d108      	bne.n	800b92c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b91e:	4618      	mov	r0, r3
 800b920:	f000 fd7e 	bl	800c420 <vPortFree>
				vPortFree( pxTCB );
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 fd7b 	bl	800c420 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b92a:	e018      	b.n	800b95e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b932:	2b01      	cmp	r3, #1
 800b934:	d103      	bne.n	800b93e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 fd72 	bl	800c420 <vPortFree>
	}
 800b93c:	e00f      	b.n	800b95e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b944:	2b02      	cmp	r3, #2
 800b946:	d00a      	beq.n	800b95e <prvDeleteTCB+0x56>
	__asm volatile
 800b948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94c:	f383 8811 	msr	BASEPRI, r3
 800b950:	f3bf 8f6f 	isb	sy
 800b954:	f3bf 8f4f 	dsb	sy
 800b958:	60fb      	str	r3, [r7, #12]
}
 800b95a:	bf00      	nop
 800b95c:	e7fe      	b.n	800b95c <prvDeleteTCB+0x54>
	}
 800b95e:	bf00      	nop
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
	...

0800b968 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b96e:	4b0c      	ldr	r3, [pc, #48]	; (800b9a0 <prvResetNextTaskUnblockTime+0x38>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d104      	bne.n	800b982 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b978:	4b0a      	ldr	r3, [pc, #40]	; (800b9a4 <prvResetNextTaskUnblockTime+0x3c>)
 800b97a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b97e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b980:	e008      	b.n	800b994 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b982:	4b07      	ldr	r3, [pc, #28]	; (800b9a0 <prvResetNextTaskUnblockTime+0x38>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	4a04      	ldr	r2, [pc, #16]	; (800b9a4 <prvResetNextTaskUnblockTime+0x3c>)
 800b992:	6013      	str	r3, [r2, #0]
}
 800b994:	bf00      	nop
 800b996:	370c      	adds	r7, #12
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr
 800b9a0:	20000910 	.word	0x20000910
 800b9a4:	20000978 	.word	0x20000978

0800b9a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b083      	sub	sp, #12
 800b9ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b9ae:	4b0b      	ldr	r3, [pc, #44]	; (800b9dc <xTaskGetSchedulerState+0x34>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d102      	bne.n	800b9bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	607b      	str	r3, [r7, #4]
 800b9ba:	e008      	b.n	800b9ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9bc:	4b08      	ldr	r3, [pc, #32]	; (800b9e0 <xTaskGetSchedulerState+0x38>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d102      	bne.n	800b9ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b9c4:	2302      	movs	r3, #2
 800b9c6:	607b      	str	r3, [r7, #4]
 800b9c8:	e001      	b.n	800b9ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b9ce:	687b      	ldr	r3, [r7, #4]
	}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr
 800b9dc:	20000964 	.word	0x20000964
 800b9e0:	20000980 	.word	0x20000980

0800b9e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d05e      	beq.n	800bab8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9fe:	4b31      	ldr	r3, [pc, #196]	; (800bac4 <xTaskPriorityInherit+0xe0>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d24e      	bcs.n	800baa6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	699b      	ldr	r3, [r3, #24]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	db06      	blt.n	800ba1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba10:	4b2c      	ldr	r3, [pc, #176]	; (800bac4 <xTaskPriorityInherit+0xe0>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba16:	f1c3 0207 	rsb	r2, r3, #7
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	6959      	ldr	r1, [r3, #20]
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba26:	4613      	mov	r3, r2
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	4413      	add	r3, r2
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	4a26      	ldr	r2, [pc, #152]	; (800bac8 <xTaskPriorityInherit+0xe4>)
 800ba30:	4413      	add	r3, r2
 800ba32:	4299      	cmp	r1, r3
 800ba34:	d12f      	bne.n	800ba96 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	3304      	adds	r3, #4
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7fe fbfe 	bl	800a23c <uxListRemove>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d10a      	bne.n	800ba5c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba50:	43da      	mvns	r2, r3
 800ba52:	4b1e      	ldr	r3, [pc, #120]	; (800bacc <xTaskPriorityInherit+0xe8>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4013      	ands	r3, r2
 800ba58:	4a1c      	ldr	r2, [pc, #112]	; (800bacc <xTaskPriorityInherit+0xe8>)
 800ba5a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ba5c:	4b19      	ldr	r3, [pc, #100]	; (800bac4 <xTaskPriorityInherit+0xe0>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	409a      	lsls	r2, r3
 800ba6e:	4b17      	ldr	r3, [pc, #92]	; (800bacc <xTaskPriorityInherit+0xe8>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4313      	orrs	r3, r2
 800ba74:	4a15      	ldr	r2, [pc, #84]	; (800bacc <xTaskPriorityInherit+0xe8>)
 800ba76:	6013      	str	r3, [r2, #0]
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba7c:	4613      	mov	r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	4413      	add	r3, r2
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	4a10      	ldr	r2, [pc, #64]	; (800bac8 <xTaskPriorityInherit+0xe4>)
 800ba86:	441a      	add	r2, r3
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	3304      	adds	r3, #4
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	4610      	mov	r0, r2
 800ba90:	f7fe fb77 	bl	800a182 <vListInsertEnd>
 800ba94:	e004      	b.n	800baa0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ba96:	4b0b      	ldr	r3, [pc, #44]	; (800bac4 <xTaskPriorityInherit+0xe0>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800baa0:	2301      	movs	r3, #1
 800baa2:	60fb      	str	r3, [r7, #12]
 800baa4:	e008      	b.n	800bab8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800baaa:	4b06      	ldr	r3, [pc, #24]	; (800bac4 <xTaskPriorityInherit+0xe0>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d201      	bcs.n	800bab8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bab4:	2301      	movs	r3, #1
 800bab6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bab8:	68fb      	ldr	r3, [r7, #12]
	}
 800baba:	4618      	mov	r0, r3
 800babc:	3710      	adds	r7, #16
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	20000858 	.word	0x20000858
 800bac8:	2000085c 	.word	0x2000085c
 800bacc:	20000960 	.word	0x20000960

0800bad0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800badc:	2300      	movs	r3, #0
 800bade:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d06e      	beq.n	800bbc4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bae6:	4b3a      	ldr	r3, [pc, #232]	; (800bbd0 <xTaskPriorityDisinherit+0x100>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	693a      	ldr	r2, [r7, #16]
 800baec:	429a      	cmp	r2, r3
 800baee:	d00a      	beq.n	800bb06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800baf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf4:	f383 8811 	msr	BASEPRI, r3
 800baf8:	f3bf 8f6f 	isb	sy
 800bafc:	f3bf 8f4f 	dsb	sy
 800bb00:	60fb      	str	r3, [r7, #12]
}
 800bb02:	bf00      	nop
 800bb04:	e7fe      	b.n	800bb04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d10a      	bne.n	800bb24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb12:	f383 8811 	msr	BASEPRI, r3
 800bb16:	f3bf 8f6f 	isb	sy
 800bb1a:	f3bf 8f4f 	dsb	sy
 800bb1e:	60bb      	str	r3, [r7, #8]
}
 800bb20:	bf00      	nop
 800bb22:	e7fe      	b.n	800bb22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb28:	1e5a      	subs	r2, r3, #1
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d044      	beq.n	800bbc4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d140      	bne.n	800bbc4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	3304      	adds	r3, #4
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7fe fb78 	bl	800a23c <uxListRemove>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d115      	bne.n	800bb7e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb56:	491f      	ldr	r1, [pc, #124]	; (800bbd4 <xTaskPriorityDisinherit+0x104>)
 800bb58:	4613      	mov	r3, r2
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	4413      	add	r3, r2
 800bb5e:	009b      	lsls	r3, r3, #2
 800bb60:	440b      	add	r3, r1
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d10a      	bne.n	800bb7e <xTaskPriorityDisinherit+0xae>
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	fa02 f303 	lsl.w	r3, r2, r3
 800bb72:	43da      	mvns	r2, r3
 800bb74:	4b18      	ldr	r3, [pc, #96]	; (800bbd8 <xTaskPriorityDisinherit+0x108>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4013      	ands	r3, r2
 800bb7a:	4a17      	ldr	r2, [pc, #92]	; (800bbd8 <xTaskPriorityDisinherit+0x108>)
 800bb7c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8a:	f1c3 0207 	rsb	r2, r3, #7
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb96:	2201      	movs	r2, #1
 800bb98:	409a      	lsls	r2, r3
 800bb9a:	4b0f      	ldr	r3, [pc, #60]	; (800bbd8 <xTaskPriorityDisinherit+0x108>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	4a0d      	ldr	r2, [pc, #52]	; (800bbd8 <xTaskPriorityDisinherit+0x108>)
 800bba2:	6013      	str	r3, [r2, #0]
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba8:	4613      	mov	r3, r2
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	4413      	add	r3, r2
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	4a08      	ldr	r2, [pc, #32]	; (800bbd4 <xTaskPriorityDisinherit+0x104>)
 800bbb2:	441a      	add	r2, r3
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	3304      	adds	r3, #4
 800bbb8:	4619      	mov	r1, r3
 800bbba:	4610      	mov	r0, r2
 800bbbc:	f7fe fae1 	bl	800a182 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bbc4:	697b      	ldr	r3, [r7, #20]
	}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3718      	adds	r7, #24
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	20000858 	.word	0x20000858
 800bbd4:	2000085c 	.word	0x2000085c
 800bbd8:	20000960 	.word	0x20000960

0800bbdc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b088      	sub	sp, #32
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bbea:	2301      	movs	r3, #1
 800bbec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d077      	beq.n	800bce4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bbf4:	69bb      	ldr	r3, [r7, #24]
 800bbf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d10a      	bne.n	800bc12 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	60fb      	str	r3, [r7, #12]
}
 800bc0e:	bf00      	nop
 800bc10:	e7fe      	b.n	800bc10 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bc12:	69bb      	ldr	r3, [r7, #24]
 800bc14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc16:	683a      	ldr	r2, [r7, #0]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d902      	bls.n	800bc22 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	61fb      	str	r3, [r7, #28]
 800bc20:	e002      	b.n	800bc28 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bc22:	69bb      	ldr	r3, [r7, #24]
 800bc24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc26:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc2c:	69fa      	ldr	r2, [r7, #28]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d058      	beq.n	800bce4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bc32:	69bb      	ldr	r3, [r7, #24]
 800bc34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc36:	697a      	ldr	r2, [r7, #20]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d153      	bne.n	800bce4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bc3c:	4b2b      	ldr	r3, [pc, #172]	; (800bcec <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	69ba      	ldr	r2, [r7, #24]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d10a      	bne.n	800bc5c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4a:	f383 8811 	msr	BASEPRI, r3
 800bc4e:	f3bf 8f6f 	isb	sy
 800bc52:	f3bf 8f4f 	dsb	sy
 800bc56:	60bb      	str	r3, [r7, #8]
}
 800bc58:	bf00      	nop
 800bc5a:	e7fe      	b.n	800bc5a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bc5c:	69bb      	ldr	r3, [r7, #24]
 800bc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc60:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	69fa      	ldr	r2, [r7, #28]
 800bc66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	699b      	ldr	r3, [r3, #24]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	db04      	blt.n	800bc7a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc70:	69fb      	ldr	r3, [r7, #28]
 800bc72:	f1c3 0207 	rsb	r2, r3, #7
 800bc76:	69bb      	ldr	r3, [r7, #24]
 800bc78:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	6959      	ldr	r1, [r3, #20]
 800bc7e:	693a      	ldr	r2, [r7, #16]
 800bc80:	4613      	mov	r3, r2
 800bc82:	009b      	lsls	r3, r3, #2
 800bc84:	4413      	add	r3, r2
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	4a19      	ldr	r2, [pc, #100]	; (800bcf0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bc8a:	4413      	add	r3, r2
 800bc8c:	4299      	cmp	r1, r3
 800bc8e:	d129      	bne.n	800bce4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc90:	69bb      	ldr	r3, [r7, #24]
 800bc92:	3304      	adds	r3, #4
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7fe fad1 	bl	800a23c <uxListRemove>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d10a      	bne.n	800bcb6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800bca0:	69bb      	ldr	r3, [r7, #24]
 800bca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca4:	2201      	movs	r2, #1
 800bca6:	fa02 f303 	lsl.w	r3, r2, r3
 800bcaa:	43da      	mvns	r2, r3
 800bcac:	4b11      	ldr	r3, [pc, #68]	; (800bcf4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4013      	ands	r3, r2
 800bcb2:	4a10      	ldr	r2, [pc, #64]	; (800bcf4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bcb4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcba:	2201      	movs	r2, #1
 800bcbc:	409a      	lsls	r2, r3
 800bcbe:	4b0d      	ldr	r3, [pc, #52]	; (800bcf4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	4a0b      	ldr	r2, [pc, #44]	; (800bcf4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bcc6:	6013      	str	r3, [r2, #0]
 800bcc8:	69bb      	ldr	r3, [r7, #24]
 800bcca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bccc:	4613      	mov	r3, r2
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	4413      	add	r3, r2
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	4a06      	ldr	r2, [pc, #24]	; (800bcf0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bcd6:	441a      	add	r2, r3
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	3304      	adds	r3, #4
 800bcdc:	4619      	mov	r1, r3
 800bcde:	4610      	mov	r0, r2
 800bce0:	f7fe fa4f 	bl	800a182 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bce4:	bf00      	nop
 800bce6:	3720      	adds	r7, #32
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	20000858 	.word	0x20000858
 800bcf0:	2000085c 	.word	0x2000085c
 800bcf4:	20000960 	.word	0x20000960

0800bcf8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bcf8:	b480      	push	{r7}
 800bcfa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bcfc:	4b07      	ldr	r3, [pc, #28]	; (800bd1c <pvTaskIncrementMutexHeldCount+0x24>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d004      	beq.n	800bd0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bd04:	4b05      	ldr	r3, [pc, #20]	; (800bd1c <pvTaskIncrementMutexHeldCount+0x24>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bd0a:	3201      	adds	r2, #1
 800bd0c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800bd0e:	4b03      	ldr	r3, [pc, #12]	; (800bd1c <pvTaskIncrementMutexHeldCount+0x24>)
 800bd10:	681b      	ldr	r3, [r3, #0]
	}
 800bd12:	4618      	mov	r0, r3
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr
 800bd1c:	20000858 	.word	0x20000858

0800bd20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd2a:	4b29      	ldr	r3, [pc, #164]	; (800bdd0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd30:	4b28      	ldr	r3, [pc, #160]	; (800bdd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3304      	adds	r3, #4
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fe fa80 	bl	800a23c <uxListRemove>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10b      	bne.n	800bd5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bd42:	4b24      	ldr	r3, [pc, #144]	; (800bdd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd48:	2201      	movs	r2, #1
 800bd4a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd4e:	43da      	mvns	r2, r3
 800bd50:	4b21      	ldr	r3, [pc, #132]	; (800bdd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4013      	ands	r3, r2
 800bd56:	4a20      	ldr	r2, [pc, #128]	; (800bdd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bd58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd60:	d10a      	bne.n	800bd78 <prvAddCurrentTaskToDelayedList+0x58>
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d007      	beq.n	800bd78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd68:	4b1a      	ldr	r3, [pc, #104]	; (800bdd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	3304      	adds	r3, #4
 800bd6e:	4619      	mov	r1, r3
 800bd70:	481a      	ldr	r0, [pc, #104]	; (800bddc <prvAddCurrentTaskToDelayedList+0xbc>)
 800bd72:	f7fe fa06 	bl	800a182 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bd76:	e026      	b.n	800bdc6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bd78:	68fa      	ldr	r2, [r7, #12]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bd80:	4b14      	ldr	r3, [pc, #80]	; (800bdd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	68ba      	ldr	r2, [r7, #8]
 800bd86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bd88:	68ba      	ldr	r2, [r7, #8]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d209      	bcs.n	800bda4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd90:	4b13      	ldr	r3, [pc, #76]	; (800bde0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	4b0f      	ldr	r3, [pc, #60]	; (800bdd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	3304      	adds	r3, #4
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	4610      	mov	r0, r2
 800bd9e:	f7fe fa14 	bl	800a1ca <vListInsert>
}
 800bda2:	e010      	b.n	800bdc6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bda4:	4b0f      	ldr	r3, [pc, #60]	; (800bde4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bda6:	681a      	ldr	r2, [r3, #0]
 800bda8:	4b0a      	ldr	r3, [pc, #40]	; (800bdd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	3304      	adds	r3, #4
 800bdae:	4619      	mov	r1, r3
 800bdb0:	4610      	mov	r0, r2
 800bdb2:	f7fe fa0a 	bl	800a1ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bdb6:	4b0c      	ldr	r3, [pc, #48]	; (800bde8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68ba      	ldr	r2, [r7, #8]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d202      	bcs.n	800bdc6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bdc0:	4a09      	ldr	r2, [pc, #36]	; (800bde8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	6013      	str	r3, [r2, #0]
}
 800bdc6:	bf00      	nop
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	2000095c 	.word	0x2000095c
 800bdd4:	20000858 	.word	0x20000858
 800bdd8:	20000960 	.word	0x20000960
 800bddc:	20000944 	.word	0x20000944
 800bde0:	20000914 	.word	0x20000914
 800bde4:	20000910 	.word	0x20000910
 800bde8:	20000978 	.word	0x20000978

0800bdec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bdec:	b480      	push	{r7}
 800bdee:	b085      	sub	sp, #20
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	60b9      	str	r1, [r7, #8]
 800bdf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	3b04      	subs	r3, #4
 800bdfc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800be04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	3b04      	subs	r3, #4
 800be0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	f023 0201 	bic.w	r2, r3, #1
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	3b04      	subs	r3, #4
 800be1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800be1c:	4a0c      	ldr	r2, [pc, #48]	; (800be50 <pxPortInitialiseStack+0x64>)
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	3b14      	subs	r3, #20
 800be26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	3b04      	subs	r3, #4
 800be32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f06f 0202 	mvn.w	r2, #2
 800be3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	3b20      	subs	r3, #32
 800be40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800be42:	68fb      	ldr	r3, [r7, #12]
}
 800be44:	4618      	mov	r0, r3
 800be46:	3714      	adds	r7, #20
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr
 800be50:	0800be55 	.word	0x0800be55

0800be54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800be5a:	2300      	movs	r3, #0
 800be5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800be5e:	4b12      	ldr	r3, [pc, #72]	; (800bea8 <prvTaskExitError+0x54>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be66:	d00a      	beq.n	800be7e <prvTaskExitError+0x2a>
	__asm volatile
 800be68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6c:	f383 8811 	msr	BASEPRI, r3
 800be70:	f3bf 8f6f 	isb	sy
 800be74:	f3bf 8f4f 	dsb	sy
 800be78:	60fb      	str	r3, [r7, #12]
}
 800be7a:	bf00      	nop
 800be7c:	e7fe      	b.n	800be7c <prvTaskExitError+0x28>
	__asm volatile
 800be7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be82:	f383 8811 	msr	BASEPRI, r3
 800be86:	f3bf 8f6f 	isb	sy
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	60bb      	str	r3, [r7, #8]
}
 800be90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800be92:	bf00      	nop
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d0fc      	beq.n	800be94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800be9a:	bf00      	nop
 800be9c:	bf00      	nop
 800be9e:	3714      	adds	r7, #20
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr
 800bea8:	200000d0 	.word	0x200000d0
 800beac:	00000000 	.word	0x00000000

0800beb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800beb0:	4b07      	ldr	r3, [pc, #28]	; (800bed0 <pxCurrentTCBConst2>)
 800beb2:	6819      	ldr	r1, [r3, #0]
 800beb4:	6808      	ldr	r0, [r1, #0]
 800beb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beba:	f380 8809 	msr	PSP, r0
 800bebe:	f3bf 8f6f 	isb	sy
 800bec2:	f04f 0000 	mov.w	r0, #0
 800bec6:	f380 8811 	msr	BASEPRI, r0
 800beca:	4770      	bx	lr
 800becc:	f3af 8000 	nop.w

0800bed0 <pxCurrentTCBConst2>:
 800bed0:	20000858 	.word	0x20000858
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bed4:	bf00      	nop
 800bed6:	bf00      	nop

0800bed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bed8:	4808      	ldr	r0, [pc, #32]	; (800befc <prvPortStartFirstTask+0x24>)
 800beda:	6800      	ldr	r0, [r0, #0]
 800bedc:	6800      	ldr	r0, [r0, #0]
 800bede:	f380 8808 	msr	MSP, r0
 800bee2:	f04f 0000 	mov.w	r0, #0
 800bee6:	f380 8814 	msr	CONTROL, r0
 800beea:	b662      	cpsie	i
 800beec:	b661      	cpsie	f
 800beee:	f3bf 8f4f 	dsb	sy
 800bef2:	f3bf 8f6f 	isb	sy
 800bef6:	df00      	svc	0
 800bef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800befa:	bf00      	nop
 800befc:	e000ed08 	.word	0xe000ed08

0800bf00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b086      	sub	sp, #24
 800bf04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bf06:	4b46      	ldr	r3, [pc, #280]	; (800c020 <xPortStartScheduler+0x120>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4a46      	ldr	r2, [pc, #280]	; (800c024 <xPortStartScheduler+0x124>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d10a      	bne.n	800bf26 <xPortStartScheduler+0x26>
	__asm volatile
 800bf10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf14:	f383 8811 	msr	BASEPRI, r3
 800bf18:	f3bf 8f6f 	isb	sy
 800bf1c:	f3bf 8f4f 	dsb	sy
 800bf20:	613b      	str	r3, [r7, #16]
}
 800bf22:	bf00      	nop
 800bf24:	e7fe      	b.n	800bf24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bf26:	4b3e      	ldr	r3, [pc, #248]	; (800c020 <xPortStartScheduler+0x120>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a3f      	ldr	r2, [pc, #252]	; (800c028 <xPortStartScheduler+0x128>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d10a      	bne.n	800bf46 <xPortStartScheduler+0x46>
	__asm volatile
 800bf30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf34:	f383 8811 	msr	BASEPRI, r3
 800bf38:	f3bf 8f6f 	isb	sy
 800bf3c:	f3bf 8f4f 	dsb	sy
 800bf40:	60fb      	str	r3, [r7, #12]
}
 800bf42:	bf00      	nop
 800bf44:	e7fe      	b.n	800bf44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bf46:	4b39      	ldr	r3, [pc, #228]	; (800c02c <xPortStartScheduler+0x12c>)
 800bf48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	22ff      	movs	r2, #255	; 0xff
 800bf56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bf60:	78fb      	ldrb	r3, [r7, #3]
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bf68:	b2da      	uxtb	r2, r3
 800bf6a:	4b31      	ldr	r3, [pc, #196]	; (800c030 <xPortStartScheduler+0x130>)
 800bf6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bf6e:	4b31      	ldr	r3, [pc, #196]	; (800c034 <xPortStartScheduler+0x134>)
 800bf70:	2207      	movs	r2, #7
 800bf72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf74:	e009      	b.n	800bf8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bf76:	4b2f      	ldr	r3, [pc, #188]	; (800c034 <xPortStartScheduler+0x134>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	3b01      	subs	r3, #1
 800bf7c:	4a2d      	ldr	r2, [pc, #180]	; (800c034 <xPortStartScheduler+0x134>)
 800bf7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf80:	78fb      	ldrb	r3, [r7, #3]
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	005b      	lsls	r3, r3, #1
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf8a:	78fb      	ldrb	r3, [r7, #3]
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf92:	2b80      	cmp	r3, #128	; 0x80
 800bf94:	d0ef      	beq.n	800bf76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bf96:	4b27      	ldr	r3, [pc, #156]	; (800c034 <xPortStartScheduler+0x134>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f1c3 0307 	rsb	r3, r3, #7
 800bf9e:	2b04      	cmp	r3, #4
 800bfa0:	d00a      	beq.n	800bfb8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bfa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa6:	f383 8811 	msr	BASEPRI, r3
 800bfaa:	f3bf 8f6f 	isb	sy
 800bfae:	f3bf 8f4f 	dsb	sy
 800bfb2:	60bb      	str	r3, [r7, #8]
}
 800bfb4:	bf00      	nop
 800bfb6:	e7fe      	b.n	800bfb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bfb8:	4b1e      	ldr	r3, [pc, #120]	; (800c034 <xPortStartScheduler+0x134>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	021b      	lsls	r3, r3, #8
 800bfbe:	4a1d      	ldr	r2, [pc, #116]	; (800c034 <xPortStartScheduler+0x134>)
 800bfc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bfc2:	4b1c      	ldr	r3, [pc, #112]	; (800c034 <xPortStartScheduler+0x134>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bfca:	4a1a      	ldr	r2, [pc, #104]	; (800c034 <xPortStartScheduler+0x134>)
 800bfcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	b2da      	uxtb	r2, r3
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bfd6:	4b18      	ldr	r3, [pc, #96]	; (800c038 <xPortStartScheduler+0x138>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4a17      	ldr	r2, [pc, #92]	; (800c038 <xPortStartScheduler+0x138>)
 800bfdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bfe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bfe2:	4b15      	ldr	r3, [pc, #84]	; (800c038 <xPortStartScheduler+0x138>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a14      	ldr	r2, [pc, #80]	; (800c038 <xPortStartScheduler+0x138>)
 800bfe8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bfec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bfee:	f000 f8dd 	bl	800c1ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bff2:	4b12      	ldr	r3, [pc, #72]	; (800c03c <xPortStartScheduler+0x13c>)
 800bff4:	2200      	movs	r2, #0
 800bff6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bff8:	f000 f8fc 	bl	800c1f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bffc:	4b10      	ldr	r3, [pc, #64]	; (800c040 <xPortStartScheduler+0x140>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4a0f      	ldr	r2, [pc, #60]	; (800c040 <xPortStartScheduler+0x140>)
 800c002:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c006:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c008:	f7ff ff66 	bl	800bed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c00c:	f7ff fa90 	bl	800b530 <vTaskSwitchContext>
	prvTaskExitError();
 800c010:	f7ff ff20 	bl	800be54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c014:	2300      	movs	r3, #0
}
 800c016:	4618      	mov	r0, r3
 800c018:	3718      	adds	r7, #24
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	e000ed00 	.word	0xe000ed00
 800c024:	410fc271 	.word	0x410fc271
 800c028:	410fc270 	.word	0x410fc270
 800c02c:	e000e400 	.word	0xe000e400
 800c030:	20000984 	.word	0x20000984
 800c034:	20000988 	.word	0x20000988
 800c038:	e000ed20 	.word	0xe000ed20
 800c03c:	200000d0 	.word	0x200000d0
 800c040:	e000ef34 	.word	0xe000ef34

0800c044 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c044:	b480      	push	{r7}
 800c046:	b083      	sub	sp, #12
 800c048:	af00      	add	r7, sp, #0
	__asm volatile
 800c04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04e:	f383 8811 	msr	BASEPRI, r3
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	607b      	str	r3, [r7, #4]
}
 800c05c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c05e:	4b0f      	ldr	r3, [pc, #60]	; (800c09c <vPortEnterCritical+0x58>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	3301      	adds	r3, #1
 800c064:	4a0d      	ldr	r2, [pc, #52]	; (800c09c <vPortEnterCritical+0x58>)
 800c066:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c068:	4b0c      	ldr	r3, [pc, #48]	; (800c09c <vPortEnterCritical+0x58>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d10f      	bne.n	800c090 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c070:	4b0b      	ldr	r3, [pc, #44]	; (800c0a0 <vPortEnterCritical+0x5c>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	b2db      	uxtb	r3, r3
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00a      	beq.n	800c090 <vPortEnterCritical+0x4c>
	__asm volatile
 800c07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07e:	f383 8811 	msr	BASEPRI, r3
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	603b      	str	r3, [r7, #0]
}
 800c08c:	bf00      	nop
 800c08e:	e7fe      	b.n	800c08e <vPortEnterCritical+0x4a>
	}
}
 800c090:	bf00      	nop
 800c092:	370c      	adds	r7, #12
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr
 800c09c:	200000d0 	.word	0x200000d0
 800c0a0:	e000ed04 	.word	0xe000ed04

0800c0a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c0aa:	4b12      	ldr	r3, [pc, #72]	; (800c0f4 <vPortExitCritical+0x50>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d10a      	bne.n	800c0c8 <vPortExitCritical+0x24>
	__asm volatile
 800c0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b6:	f383 8811 	msr	BASEPRI, r3
 800c0ba:	f3bf 8f6f 	isb	sy
 800c0be:	f3bf 8f4f 	dsb	sy
 800c0c2:	607b      	str	r3, [r7, #4]
}
 800c0c4:	bf00      	nop
 800c0c6:	e7fe      	b.n	800c0c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c0c8:	4b0a      	ldr	r3, [pc, #40]	; (800c0f4 <vPortExitCritical+0x50>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	3b01      	subs	r3, #1
 800c0ce:	4a09      	ldr	r2, [pc, #36]	; (800c0f4 <vPortExitCritical+0x50>)
 800c0d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c0d2:	4b08      	ldr	r3, [pc, #32]	; (800c0f4 <vPortExitCritical+0x50>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d105      	bne.n	800c0e6 <vPortExitCritical+0x42>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	f383 8811 	msr	BASEPRI, r3
}
 800c0e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c0e6:	bf00      	nop
 800c0e8:	370c      	adds	r7, #12
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr
 800c0f2:	bf00      	nop
 800c0f4:	200000d0 	.word	0x200000d0
	...

0800c100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c100:	f3ef 8009 	mrs	r0, PSP
 800c104:	f3bf 8f6f 	isb	sy
 800c108:	4b15      	ldr	r3, [pc, #84]	; (800c160 <pxCurrentTCBConst>)
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	f01e 0f10 	tst.w	lr, #16
 800c110:	bf08      	it	eq
 800c112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c11a:	6010      	str	r0, [r2, #0]
 800c11c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c120:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c124:	f380 8811 	msr	BASEPRI, r0
 800c128:	f3bf 8f4f 	dsb	sy
 800c12c:	f3bf 8f6f 	isb	sy
 800c130:	f7ff f9fe 	bl	800b530 <vTaskSwitchContext>
 800c134:	f04f 0000 	mov.w	r0, #0
 800c138:	f380 8811 	msr	BASEPRI, r0
 800c13c:	bc09      	pop	{r0, r3}
 800c13e:	6819      	ldr	r1, [r3, #0]
 800c140:	6808      	ldr	r0, [r1, #0]
 800c142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c146:	f01e 0f10 	tst.w	lr, #16
 800c14a:	bf08      	it	eq
 800c14c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c150:	f380 8809 	msr	PSP, r0
 800c154:	f3bf 8f6f 	isb	sy
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop
 800c15c:	f3af 8000 	nop.w

0800c160 <pxCurrentTCBConst>:
 800c160:	20000858 	.word	0x20000858
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c164:	bf00      	nop
 800c166:	bf00      	nop

0800c168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
	__asm volatile
 800c16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c172:	f383 8811 	msr	BASEPRI, r3
 800c176:	f3bf 8f6f 	isb	sy
 800c17a:	f3bf 8f4f 	dsb	sy
 800c17e:	607b      	str	r3, [r7, #4]
}
 800c180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c182:	f7ff f91d 	bl	800b3c0 <xTaskIncrementTick>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d003      	beq.n	800c194 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c18c:	4b06      	ldr	r3, [pc, #24]	; (800c1a8 <SysTick_Handler+0x40>)
 800c18e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c192:	601a      	str	r2, [r3, #0]
 800c194:	2300      	movs	r3, #0
 800c196:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	f383 8811 	msr	BASEPRI, r3
}
 800c19e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c1a0:	bf00      	nop
 800c1a2:	3708      	adds	r7, #8
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	e000ed04 	.word	0xe000ed04

0800c1ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c1b0:	4b0b      	ldr	r3, [pc, #44]	; (800c1e0 <vPortSetupTimerInterrupt+0x34>)
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c1b6:	4b0b      	ldr	r3, [pc, #44]	; (800c1e4 <vPortSetupTimerInterrupt+0x38>)
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c1bc:	4b0a      	ldr	r3, [pc, #40]	; (800c1e8 <vPortSetupTimerInterrupt+0x3c>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4a0a      	ldr	r2, [pc, #40]	; (800c1ec <vPortSetupTimerInterrupt+0x40>)
 800c1c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1c6:	099b      	lsrs	r3, r3, #6
 800c1c8:	4a09      	ldr	r2, [pc, #36]	; (800c1f0 <vPortSetupTimerInterrupt+0x44>)
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c1ce:	4b04      	ldr	r3, [pc, #16]	; (800c1e0 <vPortSetupTimerInterrupt+0x34>)
 800c1d0:	2207      	movs	r2, #7
 800c1d2:	601a      	str	r2, [r3, #0]
}
 800c1d4:	bf00      	nop
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr
 800c1de:	bf00      	nop
 800c1e0:	e000e010 	.word	0xe000e010
 800c1e4:	e000e018 	.word	0xe000e018
 800c1e8:	20000000 	.word	0x20000000
 800c1ec:	10624dd3 	.word	0x10624dd3
 800c1f0:	e000e014 	.word	0xe000e014

0800c1f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c1f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c204 <vPortEnableVFP+0x10>
 800c1f8:	6801      	ldr	r1, [r0, #0]
 800c1fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c1fe:	6001      	str	r1, [r0, #0]
 800c200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c202:	bf00      	nop
 800c204:	e000ed88 	.word	0xe000ed88

0800c208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c208:	b480      	push	{r7}
 800c20a:	b085      	sub	sp, #20
 800c20c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c20e:	f3ef 8305 	mrs	r3, IPSR
 800c212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2b0f      	cmp	r3, #15
 800c218:	d914      	bls.n	800c244 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c21a:	4a17      	ldr	r2, [pc, #92]	; (800c278 <vPortValidateInterruptPriority+0x70>)
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	4413      	add	r3, r2
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c224:	4b15      	ldr	r3, [pc, #84]	; (800c27c <vPortValidateInterruptPriority+0x74>)
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	7afa      	ldrb	r2, [r7, #11]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d20a      	bcs.n	800c244 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c232:	f383 8811 	msr	BASEPRI, r3
 800c236:	f3bf 8f6f 	isb	sy
 800c23a:	f3bf 8f4f 	dsb	sy
 800c23e:	607b      	str	r3, [r7, #4]
}
 800c240:	bf00      	nop
 800c242:	e7fe      	b.n	800c242 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c244:	4b0e      	ldr	r3, [pc, #56]	; (800c280 <vPortValidateInterruptPriority+0x78>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c24c:	4b0d      	ldr	r3, [pc, #52]	; (800c284 <vPortValidateInterruptPriority+0x7c>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	429a      	cmp	r2, r3
 800c252:	d90a      	bls.n	800c26a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c258:	f383 8811 	msr	BASEPRI, r3
 800c25c:	f3bf 8f6f 	isb	sy
 800c260:	f3bf 8f4f 	dsb	sy
 800c264:	603b      	str	r3, [r7, #0]
}
 800c266:	bf00      	nop
 800c268:	e7fe      	b.n	800c268 <vPortValidateInterruptPriority+0x60>
	}
 800c26a:	bf00      	nop
 800c26c:	3714      	adds	r7, #20
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr
 800c276:	bf00      	nop
 800c278:	e000e3f0 	.word	0xe000e3f0
 800c27c:	20000984 	.word	0x20000984
 800c280:	e000ed0c 	.word	0xe000ed0c
 800c284:	20000988 	.word	0x20000988

0800c288 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b08a      	sub	sp, #40	; 0x28
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c290:	2300      	movs	r3, #0
 800c292:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c294:	f7fe ffea 	bl	800b26c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c298:	4b5b      	ldr	r3, [pc, #364]	; (800c408 <pvPortMalloc+0x180>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d101      	bne.n	800c2a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c2a0:	f000 f920 	bl	800c4e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c2a4:	4b59      	ldr	r3, [pc, #356]	; (800c40c <pvPortMalloc+0x184>)
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	4013      	ands	r3, r2
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	f040 8093 	bne.w	800c3d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d01d      	beq.n	800c2f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c2b8:	2208      	movs	r2, #8
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	4413      	add	r3, r2
 800c2be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f003 0307 	and.w	r3, r3, #7
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d014      	beq.n	800c2f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f023 0307 	bic.w	r3, r3, #7
 800c2d0:	3308      	adds	r3, #8
 800c2d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f003 0307 	and.w	r3, r3, #7
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d00a      	beq.n	800c2f4 <pvPortMalloc+0x6c>
	__asm volatile
 800c2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e2:	f383 8811 	msr	BASEPRI, r3
 800c2e6:	f3bf 8f6f 	isb	sy
 800c2ea:	f3bf 8f4f 	dsb	sy
 800c2ee:	617b      	str	r3, [r7, #20]
}
 800c2f0:	bf00      	nop
 800c2f2:	e7fe      	b.n	800c2f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d06e      	beq.n	800c3d8 <pvPortMalloc+0x150>
 800c2fa:	4b45      	ldr	r3, [pc, #276]	; (800c410 <pvPortMalloc+0x188>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	429a      	cmp	r2, r3
 800c302:	d869      	bhi.n	800c3d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c304:	4b43      	ldr	r3, [pc, #268]	; (800c414 <pvPortMalloc+0x18c>)
 800c306:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c308:	4b42      	ldr	r3, [pc, #264]	; (800c414 <pvPortMalloc+0x18c>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c30e:	e004      	b.n	800c31a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c312:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	429a      	cmp	r2, r3
 800c322:	d903      	bls.n	800c32c <pvPortMalloc+0xa4>
 800c324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d1f1      	bne.n	800c310 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c32c:	4b36      	ldr	r3, [pc, #216]	; (800c408 <pvPortMalloc+0x180>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c332:	429a      	cmp	r2, r3
 800c334:	d050      	beq.n	800c3d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c336:	6a3b      	ldr	r3, [r7, #32]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2208      	movs	r2, #8
 800c33c:	4413      	add	r3, r2
 800c33e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	6a3b      	ldr	r3, [r7, #32]
 800c346:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34a:	685a      	ldr	r2, [r3, #4]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	1ad2      	subs	r2, r2, r3
 800c350:	2308      	movs	r3, #8
 800c352:	005b      	lsls	r3, r3, #1
 800c354:	429a      	cmp	r2, r3
 800c356:	d91f      	bls.n	800c398 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	4413      	add	r3, r2
 800c35e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	f003 0307 	and.w	r3, r3, #7
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00a      	beq.n	800c380 <pvPortMalloc+0xf8>
	__asm volatile
 800c36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36e:	f383 8811 	msr	BASEPRI, r3
 800c372:	f3bf 8f6f 	isb	sy
 800c376:	f3bf 8f4f 	dsb	sy
 800c37a:	613b      	str	r3, [r7, #16]
}
 800c37c:	bf00      	nop
 800c37e:	e7fe      	b.n	800c37e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c382:	685a      	ldr	r2, [r3, #4]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	1ad2      	subs	r2, r2, r3
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c392:	69b8      	ldr	r0, [r7, #24]
 800c394:	f000 f908 	bl	800c5a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c398:	4b1d      	ldr	r3, [pc, #116]	; (800c410 <pvPortMalloc+0x188>)
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	1ad3      	subs	r3, r2, r3
 800c3a2:	4a1b      	ldr	r2, [pc, #108]	; (800c410 <pvPortMalloc+0x188>)
 800c3a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c3a6:	4b1a      	ldr	r3, [pc, #104]	; (800c410 <pvPortMalloc+0x188>)
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	4b1b      	ldr	r3, [pc, #108]	; (800c418 <pvPortMalloc+0x190>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d203      	bcs.n	800c3ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c3b2:	4b17      	ldr	r3, [pc, #92]	; (800c410 <pvPortMalloc+0x188>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a18      	ldr	r2, [pc, #96]	; (800c418 <pvPortMalloc+0x190>)
 800c3b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3bc:	685a      	ldr	r2, [r3, #4]
 800c3be:	4b13      	ldr	r3, [pc, #76]	; (800c40c <pvPortMalloc+0x184>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	431a      	orrs	r2, r3
 800c3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c3ce:	4b13      	ldr	r3, [pc, #76]	; (800c41c <pvPortMalloc+0x194>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	4a11      	ldr	r2, [pc, #68]	; (800c41c <pvPortMalloc+0x194>)
 800c3d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c3d8:	f7fe ff56 	bl	800b288 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3dc:	69fb      	ldr	r3, [r7, #28]
 800c3de:	f003 0307 	and.w	r3, r3, #7
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00a      	beq.n	800c3fc <pvPortMalloc+0x174>
	__asm volatile
 800c3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ea:	f383 8811 	msr	BASEPRI, r3
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	f3bf 8f4f 	dsb	sy
 800c3f6:	60fb      	str	r3, [r7, #12]
}
 800c3f8:	bf00      	nop
 800c3fa:	e7fe      	b.n	800c3fa <pvPortMalloc+0x172>
	return pvReturn;
 800c3fc:	69fb      	ldr	r3, [r7, #28]
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3728      	adds	r7, #40	; 0x28
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	2000154c 	.word	0x2000154c
 800c40c:	20001560 	.word	0x20001560
 800c410:	20001550 	.word	0x20001550
 800c414:	20001544 	.word	0x20001544
 800c418:	20001554 	.word	0x20001554
 800c41c:	20001558 	.word	0x20001558

0800c420 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b086      	sub	sp, #24
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d04d      	beq.n	800c4ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c432:	2308      	movs	r3, #8
 800c434:	425b      	negs	r3, r3
 800c436:	697a      	ldr	r2, [r7, #20]
 800c438:	4413      	add	r3, r2
 800c43a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	685a      	ldr	r2, [r3, #4]
 800c444:	4b24      	ldr	r3, [pc, #144]	; (800c4d8 <vPortFree+0xb8>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4013      	ands	r3, r2
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d10a      	bne.n	800c464 <vPortFree+0x44>
	__asm volatile
 800c44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c452:	f383 8811 	msr	BASEPRI, r3
 800c456:	f3bf 8f6f 	isb	sy
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	60fb      	str	r3, [r7, #12]
}
 800c460:	bf00      	nop
 800c462:	e7fe      	b.n	800c462 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d00a      	beq.n	800c482 <vPortFree+0x62>
	__asm volatile
 800c46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c470:	f383 8811 	msr	BASEPRI, r3
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	60bb      	str	r3, [r7, #8]
}
 800c47e:	bf00      	nop
 800c480:	e7fe      	b.n	800c480 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	685a      	ldr	r2, [r3, #4]
 800c486:	4b14      	ldr	r3, [pc, #80]	; (800c4d8 <vPortFree+0xb8>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4013      	ands	r3, r2
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d01e      	beq.n	800c4ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d11a      	bne.n	800c4ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	685a      	ldr	r2, [r3, #4]
 800c49c:	4b0e      	ldr	r3, [pc, #56]	; (800c4d8 <vPortFree+0xb8>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	43db      	mvns	r3, r3
 800c4a2:	401a      	ands	r2, r3
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c4a8:	f7fe fee0 	bl	800b26c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	685a      	ldr	r2, [r3, #4]
 800c4b0:	4b0a      	ldr	r3, [pc, #40]	; (800c4dc <vPortFree+0xbc>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	4a09      	ldr	r2, [pc, #36]	; (800c4dc <vPortFree+0xbc>)
 800c4b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c4ba:	6938      	ldr	r0, [r7, #16]
 800c4bc:	f000 f874 	bl	800c5a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c4c0:	4b07      	ldr	r3, [pc, #28]	; (800c4e0 <vPortFree+0xc0>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	4a06      	ldr	r2, [pc, #24]	; (800c4e0 <vPortFree+0xc0>)
 800c4c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c4ca:	f7fe fedd 	bl	800b288 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c4ce:	bf00      	nop
 800c4d0:	3718      	adds	r7, #24
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	20001560 	.word	0x20001560
 800c4dc:	20001550 	.word	0x20001550
 800c4e0:	2000155c 	.word	0x2000155c

0800c4e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b085      	sub	sp, #20
 800c4e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c4ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c4ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c4f0:	4b27      	ldr	r3, [pc, #156]	; (800c590 <prvHeapInit+0xac>)
 800c4f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f003 0307 	and.w	r3, r3, #7
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00c      	beq.n	800c518 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	3307      	adds	r3, #7
 800c502:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f023 0307 	bic.w	r3, r3, #7
 800c50a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c50c:	68ba      	ldr	r2, [r7, #8]
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	1ad3      	subs	r3, r2, r3
 800c512:	4a1f      	ldr	r2, [pc, #124]	; (800c590 <prvHeapInit+0xac>)
 800c514:	4413      	add	r3, r2
 800c516:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c51c:	4a1d      	ldr	r2, [pc, #116]	; (800c594 <prvHeapInit+0xb0>)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c522:	4b1c      	ldr	r3, [pc, #112]	; (800c594 <prvHeapInit+0xb0>)
 800c524:	2200      	movs	r2, #0
 800c526:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	68ba      	ldr	r2, [r7, #8]
 800c52c:	4413      	add	r3, r2
 800c52e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c530:	2208      	movs	r2, #8
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	1a9b      	subs	r3, r3, r2
 800c536:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	f023 0307 	bic.w	r3, r3, #7
 800c53e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	4a15      	ldr	r2, [pc, #84]	; (800c598 <prvHeapInit+0xb4>)
 800c544:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c546:	4b14      	ldr	r3, [pc, #80]	; (800c598 <prvHeapInit+0xb4>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2200      	movs	r2, #0
 800c54c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c54e:	4b12      	ldr	r3, [pc, #72]	; (800c598 <prvHeapInit+0xb4>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	2200      	movs	r2, #0
 800c554:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	68fa      	ldr	r2, [r7, #12]
 800c55e:	1ad2      	subs	r2, r2, r3
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c564:	4b0c      	ldr	r3, [pc, #48]	; (800c598 <prvHeapInit+0xb4>)
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	4a0a      	ldr	r2, [pc, #40]	; (800c59c <prvHeapInit+0xb8>)
 800c572:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	4a09      	ldr	r2, [pc, #36]	; (800c5a0 <prvHeapInit+0xbc>)
 800c57a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c57c:	4b09      	ldr	r3, [pc, #36]	; (800c5a4 <prvHeapInit+0xc0>)
 800c57e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c582:	601a      	str	r2, [r3, #0]
}
 800c584:	bf00      	nop
 800c586:	3714      	adds	r7, #20
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr
 800c590:	2000098c 	.word	0x2000098c
 800c594:	20001544 	.word	0x20001544
 800c598:	2000154c 	.word	0x2000154c
 800c59c:	20001554 	.word	0x20001554
 800c5a0:	20001550 	.word	0x20001550
 800c5a4:	20001560 	.word	0x20001560

0800c5a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b085      	sub	sp, #20
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c5b0:	4b28      	ldr	r3, [pc, #160]	; (800c654 <prvInsertBlockIntoFreeList+0xac>)
 800c5b2:	60fb      	str	r3, [r7, #12]
 800c5b4:	e002      	b.n	800c5bc <prvInsertBlockIntoFreeList+0x14>
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	60fb      	str	r3, [r7, #12]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d8f7      	bhi.n	800c5b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	68ba      	ldr	r2, [r7, #8]
 800c5d0:	4413      	add	r3, r2
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d108      	bne.n	800c5ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	685a      	ldr	r2, [r3, #4]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	441a      	add	r2, r3
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	685b      	ldr	r3, [r3, #4]
 800c5f2:	68ba      	ldr	r2, [r7, #8]
 800c5f4:	441a      	add	r2, r3
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d118      	bne.n	800c630 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	4b15      	ldr	r3, [pc, #84]	; (800c658 <prvInsertBlockIntoFreeList+0xb0>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	429a      	cmp	r2, r3
 800c608:	d00d      	beq.n	800c626 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	685a      	ldr	r2, [r3, #4]
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	441a      	add	r2, r3
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	601a      	str	r2, [r3, #0]
 800c624:	e008      	b.n	800c638 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c626:	4b0c      	ldr	r3, [pc, #48]	; (800c658 <prvInsertBlockIntoFreeList+0xb0>)
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	601a      	str	r2, [r3, #0]
 800c62e:	e003      	b.n	800c638 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681a      	ldr	r2, [r3, #0]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d002      	beq.n	800c646 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c646:	bf00      	nop
 800c648:	3714      	adds	r7, #20
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr
 800c652:	bf00      	nop
 800c654:	20001544 	.word	0x20001544
 800c658:	2000154c 	.word	0x2000154c

0800c65c <__cvt>:
 800c65c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c660:	ec55 4b10 	vmov	r4, r5, d0
 800c664:	2d00      	cmp	r5, #0
 800c666:	460e      	mov	r6, r1
 800c668:	4619      	mov	r1, r3
 800c66a:	462b      	mov	r3, r5
 800c66c:	bfbb      	ittet	lt
 800c66e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c672:	461d      	movlt	r5, r3
 800c674:	2300      	movge	r3, #0
 800c676:	232d      	movlt	r3, #45	; 0x2d
 800c678:	700b      	strb	r3, [r1, #0]
 800c67a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c67c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c680:	4691      	mov	r9, r2
 800c682:	f023 0820 	bic.w	r8, r3, #32
 800c686:	bfbc      	itt	lt
 800c688:	4622      	movlt	r2, r4
 800c68a:	4614      	movlt	r4, r2
 800c68c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c690:	d005      	beq.n	800c69e <__cvt+0x42>
 800c692:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c696:	d100      	bne.n	800c69a <__cvt+0x3e>
 800c698:	3601      	adds	r6, #1
 800c69a:	2102      	movs	r1, #2
 800c69c:	e000      	b.n	800c6a0 <__cvt+0x44>
 800c69e:	2103      	movs	r1, #3
 800c6a0:	ab03      	add	r3, sp, #12
 800c6a2:	9301      	str	r3, [sp, #4]
 800c6a4:	ab02      	add	r3, sp, #8
 800c6a6:	9300      	str	r3, [sp, #0]
 800c6a8:	ec45 4b10 	vmov	d0, r4, r5
 800c6ac:	4653      	mov	r3, sl
 800c6ae:	4632      	mov	r2, r6
 800c6b0:	f000 fdda 	bl	800d268 <_dtoa_r>
 800c6b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c6b8:	4607      	mov	r7, r0
 800c6ba:	d102      	bne.n	800c6c2 <__cvt+0x66>
 800c6bc:	f019 0f01 	tst.w	r9, #1
 800c6c0:	d022      	beq.n	800c708 <__cvt+0xac>
 800c6c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c6c6:	eb07 0906 	add.w	r9, r7, r6
 800c6ca:	d110      	bne.n	800c6ee <__cvt+0x92>
 800c6cc:	783b      	ldrb	r3, [r7, #0]
 800c6ce:	2b30      	cmp	r3, #48	; 0x30
 800c6d0:	d10a      	bne.n	800c6e8 <__cvt+0x8c>
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	4629      	mov	r1, r5
 800c6da:	f7f4 fa0d 	bl	8000af8 <__aeabi_dcmpeq>
 800c6de:	b918      	cbnz	r0, 800c6e8 <__cvt+0x8c>
 800c6e0:	f1c6 0601 	rsb	r6, r6, #1
 800c6e4:	f8ca 6000 	str.w	r6, [sl]
 800c6e8:	f8da 3000 	ldr.w	r3, [sl]
 800c6ec:	4499      	add	r9, r3
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	4629      	mov	r1, r5
 800c6f6:	f7f4 f9ff 	bl	8000af8 <__aeabi_dcmpeq>
 800c6fa:	b108      	cbz	r0, 800c700 <__cvt+0xa4>
 800c6fc:	f8cd 900c 	str.w	r9, [sp, #12]
 800c700:	2230      	movs	r2, #48	; 0x30
 800c702:	9b03      	ldr	r3, [sp, #12]
 800c704:	454b      	cmp	r3, r9
 800c706:	d307      	bcc.n	800c718 <__cvt+0xbc>
 800c708:	9b03      	ldr	r3, [sp, #12]
 800c70a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c70c:	1bdb      	subs	r3, r3, r7
 800c70e:	4638      	mov	r0, r7
 800c710:	6013      	str	r3, [r2, #0]
 800c712:	b004      	add	sp, #16
 800c714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c718:	1c59      	adds	r1, r3, #1
 800c71a:	9103      	str	r1, [sp, #12]
 800c71c:	701a      	strb	r2, [r3, #0]
 800c71e:	e7f0      	b.n	800c702 <__cvt+0xa6>

0800c720 <__exponent>:
 800c720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c722:	4603      	mov	r3, r0
 800c724:	2900      	cmp	r1, #0
 800c726:	bfb8      	it	lt
 800c728:	4249      	neglt	r1, r1
 800c72a:	f803 2b02 	strb.w	r2, [r3], #2
 800c72e:	bfb4      	ite	lt
 800c730:	222d      	movlt	r2, #45	; 0x2d
 800c732:	222b      	movge	r2, #43	; 0x2b
 800c734:	2909      	cmp	r1, #9
 800c736:	7042      	strb	r2, [r0, #1]
 800c738:	dd2a      	ble.n	800c790 <__exponent+0x70>
 800c73a:	f10d 0207 	add.w	r2, sp, #7
 800c73e:	4617      	mov	r7, r2
 800c740:	260a      	movs	r6, #10
 800c742:	4694      	mov	ip, r2
 800c744:	fb91 f5f6 	sdiv	r5, r1, r6
 800c748:	fb06 1415 	mls	r4, r6, r5, r1
 800c74c:	3430      	adds	r4, #48	; 0x30
 800c74e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c752:	460c      	mov	r4, r1
 800c754:	2c63      	cmp	r4, #99	; 0x63
 800c756:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800c75a:	4629      	mov	r1, r5
 800c75c:	dcf1      	bgt.n	800c742 <__exponent+0x22>
 800c75e:	3130      	adds	r1, #48	; 0x30
 800c760:	f1ac 0402 	sub.w	r4, ip, #2
 800c764:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c768:	1c41      	adds	r1, r0, #1
 800c76a:	4622      	mov	r2, r4
 800c76c:	42ba      	cmp	r2, r7
 800c76e:	d30a      	bcc.n	800c786 <__exponent+0x66>
 800c770:	f10d 0209 	add.w	r2, sp, #9
 800c774:	eba2 020c 	sub.w	r2, r2, ip
 800c778:	42bc      	cmp	r4, r7
 800c77a:	bf88      	it	hi
 800c77c:	2200      	movhi	r2, #0
 800c77e:	4413      	add	r3, r2
 800c780:	1a18      	subs	r0, r3, r0
 800c782:	b003      	add	sp, #12
 800c784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c786:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c78a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c78e:	e7ed      	b.n	800c76c <__exponent+0x4c>
 800c790:	2330      	movs	r3, #48	; 0x30
 800c792:	3130      	adds	r1, #48	; 0x30
 800c794:	7083      	strb	r3, [r0, #2]
 800c796:	70c1      	strb	r1, [r0, #3]
 800c798:	1d03      	adds	r3, r0, #4
 800c79a:	e7f1      	b.n	800c780 <__exponent+0x60>

0800c79c <_printf_float>:
 800c79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a0:	ed2d 8b02 	vpush	{d8}
 800c7a4:	b08d      	sub	sp, #52	; 0x34
 800c7a6:	460c      	mov	r4, r1
 800c7a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c7ac:	4616      	mov	r6, r2
 800c7ae:	461f      	mov	r7, r3
 800c7b0:	4605      	mov	r5, r0
 800c7b2:	f000 fc91 	bl	800d0d8 <_localeconv_r>
 800c7b6:	f8d0 a000 	ldr.w	sl, [r0]
 800c7ba:	4650      	mov	r0, sl
 800c7bc:	f7f3 fd70 	bl	80002a0 <strlen>
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	930a      	str	r3, [sp, #40]	; 0x28
 800c7c4:	6823      	ldr	r3, [r4, #0]
 800c7c6:	9305      	str	r3, [sp, #20]
 800c7c8:	f8d8 3000 	ldr.w	r3, [r8]
 800c7cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c7d0:	3307      	adds	r3, #7
 800c7d2:	f023 0307 	bic.w	r3, r3, #7
 800c7d6:	f103 0208 	add.w	r2, r3, #8
 800c7da:	f8c8 2000 	str.w	r2, [r8]
 800c7de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c7e6:	9307      	str	r3, [sp, #28]
 800c7e8:	f8cd 8018 	str.w	r8, [sp, #24]
 800c7ec:	ee08 0a10 	vmov	s16, r0
 800c7f0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c7f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7f8:	4b9e      	ldr	r3, [pc, #632]	; (800ca74 <_printf_float+0x2d8>)
 800c7fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7fe:	f7f4 f9ad 	bl	8000b5c <__aeabi_dcmpun>
 800c802:	bb88      	cbnz	r0, 800c868 <_printf_float+0xcc>
 800c804:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c808:	4b9a      	ldr	r3, [pc, #616]	; (800ca74 <_printf_float+0x2d8>)
 800c80a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c80e:	f7f4 f987 	bl	8000b20 <__aeabi_dcmple>
 800c812:	bb48      	cbnz	r0, 800c868 <_printf_float+0xcc>
 800c814:	2200      	movs	r2, #0
 800c816:	2300      	movs	r3, #0
 800c818:	4640      	mov	r0, r8
 800c81a:	4649      	mov	r1, r9
 800c81c:	f7f4 f976 	bl	8000b0c <__aeabi_dcmplt>
 800c820:	b110      	cbz	r0, 800c828 <_printf_float+0x8c>
 800c822:	232d      	movs	r3, #45	; 0x2d
 800c824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c828:	4a93      	ldr	r2, [pc, #588]	; (800ca78 <_printf_float+0x2dc>)
 800c82a:	4b94      	ldr	r3, [pc, #592]	; (800ca7c <_printf_float+0x2e0>)
 800c82c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c830:	bf94      	ite	ls
 800c832:	4690      	movls	r8, r2
 800c834:	4698      	movhi	r8, r3
 800c836:	2303      	movs	r3, #3
 800c838:	6123      	str	r3, [r4, #16]
 800c83a:	9b05      	ldr	r3, [sp, #20]
 800c83c:	f023 0304 	bic.w	r3, r3, #4
 800c840:	6023      	str	r3, [r4, #0]
 800c842:	f04f 0900 	mov.w	r9, #0
 800c846:	9700      	str	r7, [sp, #0]
 800c848:	4633      	mov	r3, r6
 800c84a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c84c:	4621      	mov	r1, r4
 800c84e:	4628      	mov	r0, r5
 800c850:	f000 f9da 	bl	800cc08 <_printf_common>
 800c854:	3001      	adds	r0, #1
 800c856:	f040 8090 	bne.w	800c97a <_printf_float+0x1de>
 800c85a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c85e:	b00d      	add	sp, #52	; 0x34
 800c860:	ecbd 8b02 	vpop	{d8}
 800c864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c868:	4642      	mov	r2, r8
 800c86a:	464b      	mov	r3, r9
 800c86c:	4640      	mov	r0, r8
 800c86e:	4649      	mov	r1, r9
 800c870:	f7f4 f974 	bl	8000b5c <__aeabi_dcmpun>
 800c874:	b140      	cbz	r0, 800c888 <_printf_float+0xec>
 800c876:	464b      	mov	r3, r9
 800c878:	2b00      	cmp	r3, #0
 800c87a:	bfbc      	itt	lt
 800c87c:	232d      	movlt	r3, #45	; 0x2d
 800c87e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c882:	4a7f      	ldr	r2, [pc, #508]	; (800ca80 <_printf_float+0x2e4>)
 800c884:	4b7f      	ldr	r3, [pc, #508]	; (800ca84 <_printf_float+0x2e8>)
 800c886:	e7d1      	b.n	800c82c <_printf_float+0x90>
 800c888:	6863      	ldr	r3, [r4, #4]
 800c88a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c88e:	9206      	str	r2, [sp, #24]
 800c890:	1c5a      	adds	r2, r3, #1
 800c892:	d13f      	bne.n	800c914 <_printf_float+0x178>
 800c894:	2306      	movs	r3, #6
 800c896:	6063      	str	r3, [r4, #4]
 800c898:	9b05      	ldr	r3, [sp, #20]
 800c89a:	6861      	ldr	r1, [r4, #4]
 800c89c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	9303      	str	r3, [sp, #12]
 800c8a4:	ab0a      	add	r3, sp, #40	; 0x28
 800c8a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c8aa:	ab09      	add	r3, sp, #36	; 0x24
 800c8ac:	ec49 8b10 	vmov	d0, r8, r9
 800c8b0:	9300      	str	r3, [sp, #0]
 800c8b2:	6022      	str	r2, [r4, #0]
 800c8b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	f7ff fecf 	bl	800c65c <__cvt>
 800c8be:	9b06      	ldr	r3, [sp, #24]
 800c8c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8c2:	2b47      	cmp	r3, #71	; 0x47
 800c8c4:	4680      	mov	r8, r0
 800c8c6:	d108      	bne.n	800c8da <_printf_float+0x13e>
 800c8c8:	1cc8      	adds	r0, r1, #3
 800c8ca:	db02      	blt.n	800c8d2 <_printf_float+0x136>
 800c8cc:	6863      	ldr	r3, [r4, #4]
 800c8ce:	4299      	cmp	r1, r3
 800c8d0:	dd41      	ble.n	800c956 <_printf_float+0x1ba>
 800c8d2:	f1ab 0302 	sub.w	r3, fp, #2
 800c8d6:	fa5f fb83 	uxtb.w	fp, r3
 800c8da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c8de:	d820      	bhi.n	800c922 <_printf_float+0x186>
 800c8e0:	3901      	subs	r1, #1
 800c8e2:	465a      	mov	r2, fp
 800c8e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c8e8:	9109      	str	r1, [sp, #36]	; 0x24
 800c8ea:	f7ff ff19 	bl	800c720 <__exponent>
 800c8ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8f0:	1813      	adds	r3, r2, r0
 800c8f2:	2a01      	cmp	r2, #1
 800c8f4:	4681      	mov	r9, r0
 800c8f6:	6123      	str	r3, [r4, #16]
 800c8f8:	dc02      	bgt.n	800c900 <_printf_float+0x164>
 800c8fa:	6822      	ldr	r2, [r4, #0]
 800c8fc:	07d2      	lsls	r2, r2, #31
 800c8fe:	d501      	bpl.n	800c904 <_printf_float+0x168>
 800c900:	3301      	adds	r3, #1
 800c902:	6123      	str	r3, [r4, #16]
 800c904:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d09c      	beq.n	800c846 <_printf_float+0xaa>
 800c90c:	232d      	movs	r3, #45	; 0x2d
 800c90e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c912:	e798      	b.n	800c846 <_printf_float+0xaa>
 800c914:	9a06      	ldr	r2, [sp, #24]
 800c916:	2a47      	cmp	r2, #71	; 0x47
 800c918:	d1be      	bne.n	800c898 <_printf_float+0xfc>
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d1bc      	bne.n	800c898 <_printf_float+0xfc>
 800c91e:	2301      	movs	r3, #1
 800c920:	e7b9      	b.n	800c896 <_printf_float+0xfa>
 800c922:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c926:	d118      	bne.n	800c95a <_printf_float+0x1be>
 800c928:	2900      	cmp	r1, #0
 800c92a:	6863      	ldr	r3, [r4, #4]
 800c92c:	dd0b      	ble.n	800c946 <_printf_float+0x1aa>
 800c92e:	6121      	str	r1, [r4, #16]
 800c930:	b913      	cbnz	r3, 800c938 <_printf_float+0x19c>
 800c932:	6822      	ldr	r2, [r4, #0]
 800c934:	07d0      	lsls	r0, r2, #31
 800c936:	d502      	bpl.n	800c93e <_printf_float+0x1a2>
 800c938:	3301      	adds	r3, #1
 800c93a:	440b      	add	r3, r1
 800c93c:	6123      	str	r3, [r4, #16]
 800c93e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c940:	f04f 0900 	mov.w	r9, #0
 800c944:	e7de      	b.n	800c904 <_printf_float+0x168>
 800c946:	b913      	cbnz	r3, 800c94e <_printf_float+0x1b2>
 800c948:	6822      	ldr	r2, [r4, #0]
 800c94a:	07d2      	lsls	r2, r2, #31
 800c94c:	d501      	bpl.n	800c952 <_printf_float+0x1b6>
 800c94e:	3302      	adds	r3, #2
 800c950:	e7f4      	b.n	800c93c <_printf_float+0x1a0>
 800c952:	2301      	movs	r3, #1
 800c954:	e7f2      	b.n	800c93c <_printf_float+0x1a0>
 800c956:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c95a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c95c:	4299      	cmp	r1, r3
 800c95e:	db05      	blt.n	800c96c <_printf_float+0x1d0>
 800c960:	6823      	ldr	r3, [r4, #0]
 800c962:	6121      	str	r1, [r4, #16]
 800c964:	07d8      	lsls	r0, r3, #31
 800c966:	d5ea      	bpl.n	800c93e <_printf_float+0x1a2>
 800c968:	1c4b      	adds	r3, r1, #1
 800c96a:	e7e7      	b.n	800c93c <_printf_float+0x1a0>
 800c96c:	2900      	cmp	r1, #0
 800c96e:	bfd4      	ite	le
 800c970:	f1c1 0202 	rsble	r2, r1, #2
 800c974:	2201      	movgt	r2, #1
 800c976:	4413      	add	r3, r2
 800c978:	e7e0      	b.n	800c93c <_printf_float+0x1a0>
 800c97a:	6823      	ldr	r3, [r4, #0]
 800c97c:	055a      	lsls	r2, r3, #21
 800c97e:	d407      	bmi.n	800c990 <_printf_float+0x1f4>
 800c980:	6923      	ldr	r3, [r4, #16]
 800c982:	4642      	mov	r2, r8
 800c984:	4631      	mov	r1, r6
 800c986:	4628      	mov	r0, r5
 800c988:	47b8      	blx	r7
 800c98a:	3001      	adds	r0, #1
 800c98c:	d12c      	bne.n	800c9e8 <_printf_float+0x24c>
 800c98e:	e764      	b.n	800c85a <_printf_float+0xbe>
 800c990:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c994:	f240 80e0 	bls.w	800cb58 <_printf_float+0x3bc>
 800c998:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c99c:	2200      	movs	r2, #0
 800c99e:	2300      	movs	r3, #0
 800c9a0:	f7f4 f8aa 	bl	8000af8 <__aeabi_dcmpeq>
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	d034      	beq.n	800ca12 <_printf_float+0x276>
 800c9a8:	4a37      	ldr	r2, [pc, #220]	; (800ca88 <_printf_float+0x2ec>)
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	4631      	mov	r1, r6
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	47b8      	blx	r7
 800c9b2:	3001      	adds	r0, #1
 800c9b4:	f43f af51 	beq.w	800c85a <_printf_float+0xbe>
 800c9b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	db02      	blt.n	800c9c6 <_printf_float+0x22a>
 800c9c0:	6823      	ldr	r3, [r4, #0]
 800c9c2:	07d8      	lsls	r0, r3, #31
 800c9c4:	d510      	bpl.n	800c9e8 <_printf_float+0x24c>
 800c9c6:	ee18 3a10 	vmov	r3, s16
 800c9ca:	4652      	mov	r2, sl
 800c9cc:	4631      	mov	r1, r6
 800c9ce:	4628      	mov	r0, r5
 800c9d0:	47b8      	blx	r7
 800c9d2:	3001      	adds	r0, #1
 800c9d4:	f43f af41 	beq.w	800c85a <_printf_float+0xbe>
 800c9d8:	f04f 0800 	mov.w	r8, #0
 800c9dc:	f104 091a 	add.w	r9, r4, #26
 800c9e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9e2:	3b01      	subs	r3, #1
 800c9e4:	4543      	cmp	r3, r8
 800c9e6:	dc09      	bgt.n	800c9fc <_printf_float+0x260>
 800c9e8:	6823      	ldr	r3, [r4, #0]
 800c9ea:	079b      	lsls	r3, r3, #30
 800c9ec:	f100 8107 	bmi.w	800cbfe <_printf_float+0x462>
 800c9f0:	68e0      	ldr	r0, [r4, #12]
 800c9f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9f4:	4298      	cmp	r0, r3
 800c9f6:	bfb8      	it	lt
 800c9f8:	4618      	movlt	r0, r3
 800c9fa:	e730      	b.n	800c85e <_printf_float+0xc2>
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	464a      	mov	r2, r9
 800ca00:	4631      	mov	r1, r6
 800ca02:	4628      	mov	r0, r5
 800ca04:	47b8      	blx	r7
 800ca06:	3001      	adds	r0, #1
 800ca08:	f43f af27 	beq.w	800c85a <_printf_float+0xbe>
 800ca0c:	f108 0801 	add.w	r8, r8, #1
 800ca10:	e7e6      	b.n	800c9e0 <_printf_float+0x244>
 800ca12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	dc39      	bgt.n	800ca8c <_printf_float+0x2f0>
 800ca18:	4a1b      	ldr	r2, [pc, #108]	; (800ca88 <_printf_float+0x2ec>)
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	4631      	mov	r1, r6
 800ca1e:	4628      	mov	r0, r5
 800ca20:	47b8      	blx	r7
 800ca22:	3001      	adds	r0, #1
 800ca24:	f43f af19 	beq.w	800c85a <_printf_float+0xbe>
 800ca28:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	d102      	bne.n	800ca36 <_printf_float+0x29a>
 800ca30:	6823      	ldr	r3, [r4, #0]
 800ca32:	07d9      	lsls	r1, r3, #31
 800ca34:	d5d8      	bpl.n	800c9e8 <_printf_float+0x24c>
 800ca36:	ee18 3a10 	vmov	r3, s16
 800ca3a:	4652      	mov	r2, sl
 800ca3c:	4631      	mov	r1, r6
 800ca3e:	4628      	mov	r0, r5
 800ca40:	47b8      	blx	r7
 800ca42:	3001      	adds	r0, #1
 800ca44:	f43f af09 	beq.w	800c85a <_printf_float+0xbe>
 800ca48:	f04f 0900 	mov.w	r9, #0
 800ca4c:	f104 0a1a 	add.w	sl, r4, #26
 800ca50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca52:	425b      	negs	r3, r3
 800ca54:	454b      	cmp	r3, r9
 800ca56:	dc01      	bgt.n	800ca5c <_printf_float+0x2c0>
 800ca58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca5a:	e792      	b.n	800c982 <_printf_float+0x1e6>
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	4652      	mov	r2, sl
 800ca60:	4631      	mov	r1, r6
 800ca62:	4628      	mov	r0, r5
 800ca64:	47b8      	blx	r7
 800ca66:	3001      	adds	r0, #1
 800ca68:	f43f aef7 	beq.w	800c85a <_printf_float+0xbe>
 800ca6c:	f109 0901 	add.w	r9, r9, #1
 800ca70:	e7ee      	b.n	800ca50 <_printf_float+0x2b4>
 800ca72:	bf00      	nop
 800ca74:	7fefffff 	.word	0x7fefffff
 800ca78:	0800f890 	.word	0x0800f890
 800ca7c:	0800f894 	.word	0x0800f894
 800ca80:	0800f898 	.word	0x0800f898
 800ca84:	0800f89c 	.word	0x0800f89c
 800ca88:	0800f8a0 	.word	0x0800f8a0
 800ca8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca90:	429a      	cmp	r2, r3
 800ca92:	bfa8      	it	ge
 800ca94:	461a      	movge	r2, r3
 800ca96:	2a00      	cmp	r2, #0
 800ca98:	4691      	mov	r9, r2
 800ca9a:	dc37      	bgt.n	800cb0c <_printf_float+0x370>
 800ca9c:	f04f 0b00 	mov.w	fp, #0
 800caa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800caa4:	f104 021a 	add.w	r2, r4, #26
 800caa8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800caaa:	9305      	str	r3, [sp, #20]
 800caac:	eba3 0309 	sub.w	r3, r3, r9
 800cab0:	455b      	cmp	r3, fp
 800cab2:	dc33      	bgt.n	800cb1c <_printf_float+0x380>
 800cab4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cab8:	429a      	cmp	r2, r3
 800caba:	db3b      	blt.n	800cb34 <_printf_float+0x398>
 800cabc:	6823      	ldr	r3, [r4, #0]
 800cabe:	07da      	lsls	r2, r3, #31
 800cac0:	d438      	bmi.n	800cb34 <_printf_float+0x398>
 800cac2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cac6:	eba2 0903 	sub.w	r9, r2, r3
 800caca:	9b05      	ldr	r3, [sp, #20]
 800cacc:	1ad2      	subs	r2, r2, r3
 800cace:	4591      	cmp	r9, r2
 800cad0:	bfa8      	it	ge
 800cad2:	4691      	movge	r9, r2
 800cad4:	f1b9 0f00 	cmp.w	r9, #0
 800cad8:	dc35      	bgt.n	800cb46 <_printf_float+0x3aa>
 800cada:	f04f 0800 	mov.w	r8, #0
 800cade:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cae2:	f104 0a1a 	add.w	sl, r4, #26
 800cae6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800caea:	1a9b      	subs	r3, r3, r2
 800caec:	eba3 0309 	sub.w	r3, r3, r9
 800caf0:	4543      	cmp	r3, r8
 800caf2:	f77f af79 	ble.w	800c9e8 <_printf_float+0x24c>
 800caf6:	2301      	movs	r3, #1
 800caf8:	4652      	mov	r2, sl
 800cafa:	4631      	mov	r1, r6
 800cafc:	4628      	mov	r0, r5
 800cafe:	47b8      	blx	r7
 800cb00:	3001      	adds	r0, #1
 800cb02:	f43f aeaa 	beq.w	800c85a <_printf_float+0xbe>
 800cb06:	f108 0801 	add.w	r8, r8, #1
 800cb0a:	e7ec      	b.n	800cae6 <_printf_float+0x34a>
 800cb0c:	4613      	mov	r3, r2
 800cb0e:	4631      	mov	r1, r6
 800cb10:	4642      	mov	r2, r8
 800cb12:	4628      	mov	r0, r5
 800cb14:	47b8      	blx	r7
 800cb16:	3001      	adds	r0, #1
 800cb18:	d1c0      	bne.n	800ca9c <_printf_float+0x300>
 800cb1a:	e69e      	b.n	800c85a <_printf_float+0xbe>
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	4631      	mov	r1, r6
 800cb20:	4628      	mov	r0, r5
 800cb22:	9205      	str	r2, [sp, #20]
 800cb24:	47b8      	blx	r7
 800cb26:	3001      	adds	r0, #1
 800cb28:	f43f ae97 	beq.w	800c85a <_printf_float+0xbe>
 800cb2c:	9a05      	ldr	r2, [sp, #20]
 800cb2e:	f10b 0b01 	add.w	fp, fp, #1
 800cb32:	e7b9      	b.n	800caa8 <_printf_float+0x30c>
 800cb34:	ee18 3a10 	vmov	r3, s16
 800cb38:	4652      	mov	r2, sl
 800cb3a:	4631      	mov	r1, r6
 800cb3c:	4628      	mov	r0, r5
 800cb3e:	47b8      	blx	r7
 800cb40:	3001      	adds	r0, #1
 800cb42:	d1be      	bne.n	800cac2 <_printf_float+0x326>
 800cb44:	e689      	b.n	800c85a <_printf_float+0xbe>
 800cb46:	9a05      	ldr	r2, [sp, #20]
 800cb48:	464b      	mov	r3, r9
 800cb4a:	4442      	add	r2, r8
 800cb4c:	4631      	mov	r1, r6
 800cb4e:	4628      	mov	r0, r5
 800cb50:	47b8      	blx	r7
 800cb52:	3001      	adds	r0, #1
 800cb54:	d1c1      	bne.n	800cada <_printf_float+0x33e>
 800cb56:	e680      	b.n	800c85a <_printf_float+0xbe>
 800cb58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb5a:	2a01      	cmp	r2, #1
 800cb5c:	dc01      	bgt.n	800cb62 <_printf_float+0x3c6>
 800cb5e:	07db      	lsls	r3, r3, #31
 800cb60:	d53a      	bpl.n	800cbd8 <_printf_float+0x43c>
 800cb62:	2301      	movs	r3, #1
 800cb64:	4642      	mov	r2, r8
 800cb66:	4631      	mov	r1, r6
 800cb68:	4628      	mov	r0, r5
 800cb6a:	47b8      	blx	r7
 800cb6c:	3001      	adds	r0, #1
 800cb6e:	f43f ae74 	beq.w	800c85a <_printf_float+0xbe>
 800cb72:	ee18 3a10 	vmov	r3, s16
 800cb76:	4652      	mov	r2, sl
 800cb78:	4631      	mov	r1, r6
 800cb7a:	4628      	mov	r0, r5
 800cb7c:	47b8      	blx	r7
 800cb7e:	3001      	adds	r0, #1
 800cb80:	f43f ae6b 	beq.w	800c85a <_printf_float+0xbe>
 800cb84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb88:	2200      	movs	r2, #0
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800cb90:	f7f3 ffb2 	bl	8000af8 <__aeabi_dcmpeq>
 800cb94:	b9d8      	cbnz	r0, 800cbce <_printf_float+0x432>
 800cb96:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800cb9a:	f108 0201 	add.w	r2, r8, #1
 800cb9e:	4631      	mov	r1, r6
 800cba0:	4628      	mov	r0, r5
 800cba2:	47b8      	blx	r7
 800cba4:	3001      	adds	r0, #1
 800cba6:	d10e      	bne.n	800cbc6 <_printf_float+0x42a>
 800cba8:	e657      	b.n	800c85a <_printf_float+0xbe>
 800cbaa:	2301      	movs	r3, #1
 800cbac:	4652      	mov	r2, sl
 800cbae:	4631      	mov	r1, r6
 800cbb0:	4628      	mov	r0, r5
 800cbb2:	47b8      	blx	r7
 800cbb4:	3001      	adds	r0, #1
 800cbb6:	f43f ae50 	beq.w	800c85a <_printf_float+0xbe>
 800cbba:	f108 0801 	add.w	r8, r8, #1
 800cbbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbc0:	3b01      	subs	r3, #1
 800cbc2:	4543      	cmp	r3, r8
 800cbc4:	dcf1      	bgt.n	800cbaa <_printf_float+0x40e>
 800cbc6:	464b      	mov	r3, r9
 800cbc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cbcc:	e6da      	b.n	800c984 <_printf_float+0x1e8>
 800cbce:	f04f 0800 	mov.w	r8, #0
 800cbd2:	f104 0a1a 	add.w	sl, r4, #26
 800cbd6:	e7f2      	b.n	800cbbe <_printf_float+0x422>
 800cbd8:	2301      	movs	r3, #1
 800cbda:	4642      	mov	r2, r8
 800cbdc:	e7df      	b.n	800cb9e <_printf_float+0x402>
 800cbde:	2301      	movs	r3, #1
 800cbe0:	464a      	mov	r2, r9
 800cbe2:	4631      	mov	r1, r6
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	47b8      	blx	r7
 800cbe8:	3001      	adds	r0, #1
 800cbea:	f43f ae36 	beq.w	800c85a <_printf_float+0xbe>
 800cbee:	f108 0801 	add.w	r8, r8, #1
 800cbf2:	68e3      	ldr	r3, [r4, #12]
 800cbf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cbf6:	1a5b      	subs	r3, r3, r1
 800cbf8:	4543      	cmp	r3, r8
 800cbfa:	dcf0      	bgt.n	800cbde <_printf_float+0x442>
 800cbfc:	e6f8      	b.n	800c9f0 <_printf_float+0x254>
 800cbfe:	f04f 0800 	mov.w	r8, #0
 800cc02:	f104 0919 	add.w	r9, r4, #25
 800cc06:	e7f4      	b.n	800cbf2 <_printf_float+0x456>

0800cc08 <_printf_common>:
 800cc08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc0c:	4616      	mov	r6, r2
 800cc0e:	4699      	mov	r9, r3
 800cc10:	688a      	ldr	r2, [r1, #8]
 800cc12:	690b      	ldr	r3, [r1, #16]
 800cc14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	bfb8      	it	lt
 800cc1c:	4613      	movlt	r3, r2
 800cc1e:	6033      	str	r3, [r6, #0]
 800cc20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc24:	4607      	mov	r7, r0
 800cc26:	460c      	mov	r4, r1
 800cc28:	b10a      	cbz	r2, 800cc2e <_printf_common+0x26>
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	6033      	str	r3, [r6, #0]
 800cc2e:	6823      	ldr	r3, [r4, #0]
 800cc30:	0699      	lsls	r1, r3, #26
 800cc32:	bf42      	ittt	mi
 800cc34:	6833      	ldrmi	r3, [r6, #0]
 800cc36:	3302      	addmi	r3, #2
 800cc38:	6033      	strmi	r3, [r6, #0]
 800cc3a:	6825      	ldr	r5, [r4, #0]
 800cc3c:	f015 0506 	ands.w	r5, r5, #6
 800cc40:	d106      	bne.n	800cc50 <_printf_common+0x48>
 800cc42:	f104 0a19 	add.w	sl, r4, #25
 800cc46:	68e3      	ldr	r3, [r4, #12]
 800cc48:	6832      	ldr	r2, [r6, #0]
 800cc4a:	1a9b      	subs	r3, r3, r2
 800cc4c:	42ab      	cmp	r3, r5
 800cc4e:	dc26      	bgt.n	800cc9e <_printf_common+0x96>
 800cc50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc54:	1e13      	subs	r3, r2, #0
 800cc56:	6822      	ldr	r2, [r4, #0]
 800cc58:	bf18      	it	ne
 800cc5a:	2301      	movne	r3, #1
 800cc5c:	0692      	lsls	r2, r2, #26
 800cc5e:	d42b      	bmi.n	800ccb8 <_printf_common+0xb0>
 800cc60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc64:	4649      	mov	r1, r9
 800cc66:	4638      	mov	r0, r7
 800cc68:	47c0      	blx	r8
 800cc6a:	3001      	adds	r0, #1
 800cc6c:	d01e      	beq.n	800ccac <_printf_common+0xa4>
 800cc6e:	6823      	ldr	r3, [r4, #0]
 800cc70:	6922      	ldr	r2, [r4, #16]
 800cc72:	f003 0306 	and.w	r3, r3, #6
 800cc76:	2b04      	cmp	r3, #4
 800cc78:	bf02      	ittt	eq
 800cc7a:	68e5      	ldreq	r5, [r4, #12]
 800cc7c:	6833      	ldreq	r3, [r6, #0]
 800cc7e:	1aed      	subeq	r5, r5, r3
 800cc80:	68a3      	ldr	r3, [r4, #8]
 800cc82:	bf0c      	ite	eq
 800cc84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc88:	2500      	movne	r5, #0
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	bfc4      	itt	gt
 800cc8e:	1a9b      	subgt	r3, r3, r2
 800cc90:	18ed      	addgt	r5, r5, r3
 800cc92:	2600      	movs	r6, #0
 800cc94:	341a      	adds	r4, #26
 800cc96:	42b5      	cmp	r5, r6
 800cc98:	d11a      	bne.n	800ccd0 <_printf_common+0xc8>
 800cc9a:	2000      	movs	r0, #0
 800cc9c:	e008      	b.n	800ccb0 <_printf_common+0xa8>
 800cc9e:	2301      	movs	r3, #1
 800cca0:	4652      	mov	r2, sl
 800cca2:	4649      	mov	r1, r9
 800cca4:	4638      	mov	r0, r7
 800cca6:	47c0      	blx	r8
 800cca8:	3001      	adds	r0, #1
 800ccaa:	d103      	bne.n	800ccb4 <_printf_common+0xac>
 800ccac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ccb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccb4:	3501      	adds	r5, #1
 800ccb6:	e7c6      	b.n	800cc46 <_printf_common+0x3e>
 800ccb8:	18e1      	adds	r1, r4, r3
 800ccba:	1c5a      	adds	r2, r3, #1
 800ccbc:	2030      	movs	r0, #48	; 0x30
 800ccbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ccc2:	4422      	add	r2, r4
 800ccc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ccc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cccc:	3302      	adds	r3, #2
 800ccce:	e7c7      	b.n	800cc60 <_printf_common+0x58>
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	4622      	mov	r2, r4
 800ccd4:	4649      	mov	r1, r9
 800ccd6:	4638      	mov	r0, r7
 800ccd8:	47c0      	blx	r8
 800ccda:	3001      	adds	r0, #1
 800ccdc:	d0e6      	beq.n	800ccac <_printf_common+0xa4>
 800ccde:	3601      	adds	r6, #1
 800cce0:	e7d9      	b.n	800cc96 <_printf_common+0x8e>
	...

0800cce4 <_printf_i>:
 800cce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cce8:	7e0f      	ldrb	r7, [r1, #24]
 800ccea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ccec:	2f78      	cmp	r7, #120	; 0x78
 800ccee:	4691      	mov	r9, r2
 800ccf0:	4680      	mov	r8, r0
 800ccf2:	460c      	mov	r4, r1
 800ccf4:	469a      	mov	sl, r3
 800ccf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ccfa:	d807      	bhi.n	800cd0c <_printf_i+0x28>
 800ccfc:	2f62      	cmp	r7, #98	; 0x62
 800ccfe:	d80a      	bhi.n	800cd16 <_printf_i+0x32>
 800cd00:	2f00      	cmp	r7, #0
 800cd02:	f000 80d4 	beq.w	800ceae <_printf_i+0x1ca>
 800cd06:	2f58      	cmp	r7, #88	; 0x58
 800cd08:	f000 80c0 	beq.w	800ce8c <_printf_i+0x1a8>
 800cd0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd14:	e03a      	b.n	800cd8c <_printf_i+0xa8>
 800cd16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd1a:	2b15      	cmp	r3, #21
 800cd1c:	d8f6      	bhi.n	800cd0c <_printf_i+0x28>
 800cd1e:	a101      	add	r1, pc, #4	; (adr r1, 800cd24 <_printf_i+0x40>)
 800cd20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd24:	0800cd7d 	.word	0x0800cd7d
 800cd28:	0800cd91 	.word	0x0800cd91
 800cd2c:	0800cd0d 	.word	0x0800cd0d
 800cd30:	0800cd0d 	.word	0x0800cd0d
 800cd34:	0800cd0d 	.word	0x0800cd0d
 800cd38:	0800cd0d 	.word	0x0800cd0d
 800cd3c:	0800cd91 	.word	0x0800cd91
 800cd40:	0800cd0d 	.word	0x0800cd0d
 800cd44:	0800cd0d 	.word	0x0800cd0d
 800cd48:	0800cd0d 	.word	0x0800cd0d
 800cd4c:	0800cd0d 	.word	0x0800cd0d
 800cd50:	0800ce95 	.word	0x0800ce95
 800cd54:	0800cdbd 	.word	0x0800cdbd
 800cd58:	0800ce4f 	.word	0x0800ce4f
 800cd5c:	0800cd0d 	.word	0x0800cd0d
 800cd60:	0800cd0d 	.word	0x0800cd0d
 800cd64:	0800ceb7 	.word	0x0800ceb7
 800cd68:	0800cd0d 	.word	0x0800cd0d
 800cd6c:	0800cdbd 	.word	0x0800cdbd
 800cd70:	0800cd0d 	.word	0x0800cd0d
 800cd74:	0800cd0d 	.word	0x0800cd0d
 800cd78:	0800ce57 	.word	0x0800ce57
 800cd7c:	682b      	ldr	r3, [r5, #0]
 800cd7e:	1d1a      	adds	r2, r3, #4
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	602a      	str	r2, [r5, #0]
 800cd84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	e09f      	b.n	800ced0 <_printf_i+0x1ec>
 800cd90:	6820      	ldr	r0, [r4, #0]
 800cd92:	682b      	ldr	r3, [r5, #0]
 800cd94:	0607      	lsls	r7, r0, #24
 800cd96:	f103 0104 	add.w	r1, r3, #4
 800cd9a:	6029      	str	r1, [r5, #0]
 800cd9c:	d501      	bpl.n	800cda2 <_printf_i+0xbe>
 800cd9e:	681e      	ldr	r6, [r3, #0]
 800cda0:	e003      	b.n	800cdaa <_printf_i+0xc6>
 800cda2:	0646      	lsls	r6, r0, #25
 800cda4:	d5fb      	bpl.n	800cd9e <_printf_i+0xba>
 800cda6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cdaa:	2e00      	cmp	r6, #0
 800cdac:	da03      	bge.n	800cdb6 <_printf_i+0xd2>
 800cdae:	232d      	movs	r3, #45	; 0x2d
 800cdb0:	4276      	negs	r6, r6
 800cdb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdb6:	485a      	ldr	r0, [pc, #360]	; (800cf20 <_printf_i+0x23c>)
 800cdb8:	230a      	movs	r3, #10
 800cdba:	e012      	b.n	800cde2 <_printf_i+0xfe>
 800cdbc:	682b      	ldr	r3, [r5, #0]
 800cdbe:	6820      	ldr	r0, [r4, #0]
 800cdc0:	1d19      	adds	r1, r3, #4
 800cdc2:	6029      	str	r1, [r5, #0]
 800cdc4:	0605      	lsls	r5, r0, #24
 800cdc6:	d501      	bpl.n	800cdcc <_printf_i+0xe8>
 800cdc8:	681e      	ldr	r6, [r3, #0]
 800cdca:	e002      	b.n	800cdd2 <_printf_i+0xee>
 800cdcc:	0641      	lsls	r1, r0, #25
 800cdce:	d5fb      	bpl.n	800cdc8 <_printf_i+0xe4>
 800cdd0:	881e      	ldrh	r6, [r3, #0]
 800cdd2:	4853      	ldr	r0, [pc, #332]	; (800cf20 <_printf_i+0x23c>)
 800cdd4:	2f6f      	cmp	r7, #111	; 0x6f
 800cdd6:	bf0c      	ite	eq
 800cdd8:	2308      	moveq	r3, #8
 800cdda:	230a      	movne	r3, #10
 800cddc:	2100      	movs	r1, #0
 800cdde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cde2:	6865      	ldr	r5, [r4, #4]
 800cde4:	60a5      	str	r5, [r4, #8]
 800cde6:	2d00      	cmp	r5, #0
 800cde8:	bfa2      	ittt	ge
 800cdea:	6821      	ldrge	r1, [r4, #0]
 800cdec:	f021 0104 	bicge.w	r1, r1, #4
 800cdf0:	6021      	strge	r1, [r4, #0]
 800cdf2:	b90e      	cbnz	r6, 800cdf8 <_printf_i+0x114>
 800cdf4:	2d00      	cmp	r5, #0
 800cdf6:	d04b      	beq.n	800ce90 <_printf_i+0x1ac>
 800cdf8:	4615      	mov	r5, r2
 800cdfa:	fbb6 f1f3 	udiv	r1, r6, r3
 800cdfe:	fb03 6711 	mls	r7, r3, r1, r6
 800ce02:	5dc7      	ldrb	r7, [r0, r7]
 800ce04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ce08:	4637      	mov	r7, r6
 800ce0a:	42bb      	cmp	r3, r7
 800ce0c:	460e      	mov	r6, r1
 800ce0e:	d9f4      	bls.n	800cdfa <_printf_i+0x116>
 800ce10:	2b08      	cmp	r3, #8
 800ce12:	d10b      	bne.n	800ce2c <_printf_i+0x148>
 800ce14:	6823      	ldr	r3, [r4, #0]
 800ce16:	07de      	lsls	r6, r3, #31
 800ce18:	d508      	bpl.n	800ce2c <_printf_i+0x148>
 800ce1a:	6923      	ldr	r3, [r4, #16]
 800ce1c:	6861      	ldr	r1, [r4, #4]
 800ce1e:	4299      	cmp	r1, r3
 800ce20:	bfde      	ittt	le
 800ce22:	2330      	movle	r3, #48	; 0x30
 800ce24:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ce28:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ce2c:	1b52      	subs	r2, r2, r5
 800ce2e:	6122      	str	r2, [r4, #16]
 800ce30:	f8cd a000 	str.w	sl, [sp]
 800ce34:	464b      	mov	r3, r9
 800ce36:	aa03      	add	r2, sp, #12
 800ce38:	4621      	mov	r1, r4
 800ce3a:	4640      	mov	r0, r8
 800ce3c:	f7ff fee4 	bl	800cc08 <_printf_common>
 800ce40:	3001      	adds	r0, #1
 800ce42:	d14a      	bne.n	800ceda <_printf_i+0x1f6>
 800ce44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce48:	b004      	add	sp, #16
 800ce4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce4e:	6823      	ldr	r3, [r4, #0]
 800ce50:	f043 0320 	orr.w	r3, r3, #32
 800ce54:	6023      	str	r3, [r4, #0]
 800ce56:	4833      	ldr	r0, [pc, #204]	; (800cf24 <_printf_i+0x240>)
 800ce58:	2778      	movs	r7, #120	; 0x78
 800ce5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ce5e:	6823      	ldr	r3, [r4, #0]
 800ce60:	6829      	ldr	r1, [r5, #0]
 800ce62:	061f      	lsls	r7, r3, #24
 800ce64:	f851 6b04 	ldr.w	r6, [r1], #4
 800ce68:	d402      	bmi.n	800ce70 <_printf_i+0x18c>
 800ce6a:	065f      	lsls	r7, r3, #25
 800ce6c:	bf48      	it	mi
 800ce6e:	b2b6      	uxthmi	r6, r6
 800ce70:	07df      	lsls	r7, r3, #31
 800ce72:	bf48      	it	mi
 800ce74:	f043 0320 	orrmi.w	r3, r3, #32
 800ce78:	6029      	str	r1, [r5, #0]
 800ce7a:	bf48      	it	mi
 800ce7c:	6023      	strmi	r3, [r4, #0]
 800ce7e:	b91e      	cbnz	r6, 800ce88 <_printf_i+0x1a4>
 800ce80:	6823      	ldr	r3, [r4, #0]
 800ce82:	f023 0320 	bic.w	r3, r3, #32
 800ce86:	6023      	str	r3, [r4, #0]
 800ce88:	2310      	movs	r3, #16
 800ce8a:	e7a7      	b.n	800cddc <_printf_i+0xf8>
 800ce8c:	4824      	ldr	r0, [pc, #144]	; (800cf20 <_printf_i+0x23c>)
 800ce8e:	e7e4      	b.n	800ce5a <_printf_i+0x176>
 800ce90:	4615      	mov	r5, r2
 800ce92:	e7bd      	b.n	800ce10 <_printf_i+0x12c>
 800ce94:	682b      	ldr	r3, [r5, #0]
 800ce96:	6826      	ldr	r6, [r4, #0]
 800ce98:	6961      	ldr	r1, [r4, #20]
 800ce9a:	1d18      	adds	r0, r3, #4
 800ce9c:	6028      	str	r0, [r5, #0]
 800ce9e:	0635      	lsls	r5, r6, #24
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	d501      	bpl.n	800cea8 <_printf_i+0x1c4>
 800cea4:	6019      	str	r1, [r3, #0]
 800cea6:	e002      	b.n	800ceae <_printf_i+0x1ca>
 800cea8:	0670      	lsls	r0, r6, #25
 800ceaa:	d5fb      	bpl.n	800cea4 <_printf_i+0x1c0>
 800ceac:	8019      	strh	r1, [r3, #0]
 800ceae:	2300      	movs	r3, #0
 800ceb0:	6123      	str	r3, [r4, #16]
 800ceb2:	4615      	mov	r5, r2
 800ceb4:	e7bc      	b.n	800ce30 <_printf_i+0x14c>
 800ceb6:	682b      	ldr	r3, [r5, #0]
 800ceb8:	1d1a      	adds	r2, r3, #4
 800ceba:	602a      	str	r2, [r5, #0]
 800cebc:	681d      	ldr	r5, [r3, #0]
 800cebe:	6862      	ldr	r2, [r4, #4]
 800cec0:	2100      	movs	r1, #0
 800cec2:	4628      	mov	r0, r5
 800cec4:	f7f3 f99c 	bl	8000200 <memchr>
 800cec8:	b108      	cbz	r0, 800cece <_printf_i+0x1ea>
 800ceca:	1b40      	subs	r0, r0, r5
 800cecc:	6060      	str	r0, [r4, #4]
 800cece:	6863      	ldr	r3, [r4, #4]
 800ced0:	6123      	str	r3, [r4, #16]
 800ced2:	2300      	movs	r3, #0
 800ced4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ced8:	e7aa      	b.n	800ce30 <_printf_i+0x14c>
 800ceda:	6923      	ldr	r3, [r4, #16]
 800cedc:	462a      	mov	r2, r5
 800cede:	4649      	mov	r1, r9
 800cee0:	4640      	mov	r0, r8
 800cee2:	47d0      	blx	sl
 800cee4:	3001      	adds	r0, #1
 800cee6:	d0ad      	beq.n	800ce44 <_printf_i+0x160>
 800cee8:	6823      	ldr	r3, [r4, #0]
 800ceea:	079b      	lsls	r3, r3, #30
 800ceec:	d413      	bmi.n	800cf16 <_printf_i+0x232>
 800ceee:	68e0      	ldr	r0, [r4, #12]
 800cef0:	9b03      	ldr	r3, [sp, #12]
 800cef2:	4298      	cmp	r0, r3
 800cef4:	bfb8      	it	lt
 800cef6:	4618      	movlt	r0, r3
 800cef8:	e7a6      	b.n	800ce48 <_printf_i+0x164>
 800cefa:	2301      	movs	r3, #1
 800cefc:	4632      	mov	r2, r6
 800cefe:	4649      	mov	r1, r9
 800cf00:	4640      	mov	r0, r8
 800cf02:	47d0      	blx	sl
 800cf04:	3001      	adds	r0, #1
 800cf06:	d09d      	beq.n	800ce44 <_printf_i+0x160>
 800cf08:	3501      	adds	r5, #1
 800cf0a:	68e3      	ldr	r3, [r4, #12]
 800cf0c:	9903      	ldr	r1, [sp, #12]
 800cf0e:	1a5b      	subs	r3, r3, r1
 800cf10:	42ab      	cmp	r3, r5
 800cf12:	dcf2      	bgt.n	800cefa <_printf_i+0x216>
 800cf14:	e7eb      	b.n	800ceee <_printf_i+0x20a>
 800cf16:	2500      	movs	r5, #0
 800cf18:	f104 0619 	add.w	r6, r4, #25
 800cf1c:	e7f5      	b.n	800cf0a <_printf_i+0x226>
 800cf1e:	bf00      	nop
 800cf20:	0800f8a2 	.word	0x0800f8a2
 800cf24:	0800f8b3 	.word	0x0800f8b3

0800cf28 <siprintf>:
 800cf28:	b40e      	push	{r1, r2, r3}
 800cf2a:	b500      	push	{lr}
 800cf2c:	b09c      	sub	sp, #112	; 0x70
 800cf2e:	ab1d      	add	r3, sp, #116	; 0x74
 800cf30:	9002      	str	r0, [sp, #8]
 800cf32:	9006      	str	r0, [sp, #24]
 800cf34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cf38:	4809      	ldr	r0, [pc, #36]	; (800cf60 <siprintf+0x38>)
 800cf3a:	9107      	str	r1, [sp, #28]
 800cf3c:	9104      	str	r1, [sp, #16]
 800cf3e:	4909      	ldr	r1, [pc, #36]	; (800cf64 <siprintf+0x3c>)
 800cf40:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf44:	9105      	str	r1, [sp, #20]
 800cf46:	6800      	ldr	r0, [r0, #0]
 800cf48:	9301      	str	r3, [sp, #4]
 800cf4a:	a902      	add	r1, sp, #8
 800cf4c:	f000 ffd8 	bl	800df00 <_svfiprintf_r>
 800cf50:	9b02      	ldr	r3, [sp, #8]
 800cf52:	2200      	movs	r2, #0
 800cf54:	701a      	strb	r2, [r3, #0]
 800cf56:	b01c      	add	sp, #112	; 0x70
 800cf58:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf5c:	b003      	add	sp, #12
 800cf5e:	4770      	bx	lr
 800cf60:	2000012c 	.word	0x2000012c
 800cf64:	ffff0208 	.word	0xffff0208

0800cf68 <std>:
 800cf68:	2300      	movs	r3, #0
 800cf6a:	b510      	push	{r4, lr}
 800cf6c:	4604      	mov	r4, r0
 800cf6e:	e9c0 3300 	strd	r3, r3, [r0]
 800cf72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf76:	6083      	str	r3, [r0, #8]
 800cf78:	8181      	strh	r1, [r0, #12]
 800cf7a:	6643      	str	r3, [r0, #100]	; 0x64
 800cf7c:	81c2      	strh	r2, [r0, #14]
 800cf7e:	6183      	str	r3, [r0, #24]
 800cf80:	4619      	mov	r1, r3
 800cf82:	2208      	movs	r2, #8
 800cf84:	305c      	adds	r0, #92	; 0x5c
 800cf86:	f000 f89f 	bl	800d0c8 <memset>
 800cf8a:	4b05      	ldr	r3, [pc, #20]	; (800cfa0 <std+0x38>)
 800cf8c:	6263      	str	r3, [r4, #36]	; 0x24
 800cf8e:	4b05      	ldr	r3, [pc, #20]	; (800cfa4 <std+0x3c>)
 800cf90:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf92:	4b05      	ldr	r3, [pc, #20]	; (800cfa8 <std+0x40>)
 800cf94:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf96:	4b05      	ldr	r3, [pc, #20]	; (800cfac <std+0x44>)
 800cf98:	6224      	str	r4, [r4, #32]
 800cf9a:	6323      	str	r3, [r4, #48]	; 0x30
 800cf9c:	bd10      	pop	{r4, pc}
 800cf9e:	bf00      	nop
 800cfa0:	0800eab9 	.word	0x0800eab9
 800cfa4:	0800eadb 	.word	0x0800eadb
 800cfa8:	0800eb13 	.word	0x0800eb13
 800cfac:	0800eb37 	.word	0x0800eb37

0800cfb0 <stdio_exit_handler>:
 800cfb0:	4a02      	ldr	r2, [pc, #8]	; (800cfbc <stdio_exit_handler+0xc>)
 800cfb2:	4903      	ldr	r1, [pc, #12]	; (800cfc0 <stdio_exit_handler+0x10>)
 800cfb4:	4803      	ldr	r0, [pc, #12]	; (800cfc4 <stdio_exit_handler+0x14>)
 800cfb6:	f000 b869 	b.w	800d08c <_fwalk_sglue>
 800cfba:	bf00      	nop
 800cfbc:	200000d4 	.word	0x200000d4
 800cfc0:	0800e359 	.word	0x0800e359
 800cfc4:	200000e0 	.word	0x200000e0

0800cfc8 <cleanup_stdio>:
 800cfc8:	6841      	ldr	r1, [r0, #4]
 800cfca:	4b0c      	ldr	r3, [pc, #48]	; (800cffc <cleanup_stdio+0x34>)
 800cfcc:	4299      	cmp	r1, r3
 800cfce:	b510      	push	{r4, lr}
 800cfd0:	4604      	mov	r4, r0
 800cfd2:	d001      	beq.n	800cfd8 <cleanup_stdio+0x10>
 800cfd4:	f001 f9c0 	bl	800e358 <_fflush_r>
 800cfd8:	68a1      	ldr	r1, [r4, #8]
 800cfda:	4b09      	ldr	r3, [pc, #36]	; (800d000 <cleanup_stdio+0x38>)
 800cfdc:	4299      	cmp	r1, r3
 800cfde:	d002      	beq.n	800cfe6 <cleanup_stdio+0x1e>
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f001 f9b9 	bl	800e358 <_fflush_r>
 800cfe6:	68e1      	ldr	r1, [r4, #12]
 800cfe8:	4b06      	ldr	r3, [pc, #24]	; (800d004 <cleanup_stdio+0x3c>)
 800cfea:	4299      	cmp	r1, r3
 800cfec:	d004      	beq.n	800cff8 <cleanup_stdio+0x30>
 800cfee:	4620      	mov	r0, r4
 800cff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cff4:	f001 b9b0 	b.w	800e358 <_fflush_r>
 800cff8:	bd10      	pop	{r4, pc}
 800cffa:	bf00      	nop
 800cffc:	20001564 	.word	0x20001564
 800d000:	200015cc 	.word	0x200015cc
 800d004:	20001634 	.word	0x20001634

0800d008 <global_stdio_init.part.0>:
 800d008:	b510      	push	{r4, lr}
 800d00a:	4b0b      	ldr	r3, [pc, #44]	; (800d038 <global_stdio_init.part.0+0x30>)
 800d00c:	4c0b      	ldr	r4, [pc, #44]	; (800d03c <global_stdio_init.part.0+0x34>)
 800d00e:	4a0c      	ldr	r2, [pc, #48]	; (800d040 <global_stdio_init.part.0+0x38>)
 800d010:	601a      	str	r2, [r3, #0]
 800d012:	4620      	mov	r0, r4
 800d014:	2200      	movs	r2, #0
 800d016:	2104      	movs	r1, #4
 800d018:	f7ff ffa6 	bl	800cf68 <std>
 800d01c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d020:	2201      	movs	r2, #1
 800d022:	2109      	movs	r1, #9
 800d024:	f7ff ffa0 	bl	800cf68 <std>
 800d028:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d02c:	2202      	movs	r2, #2
 800d02e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d032:	2112      	movs	r1, #18
 800d034:	f7ff bf98 	b.w	800cf68 <std>
 800d038:	2000169c 	.word	0x2000169c
 800d03c:	20001564 	.word	0x20001564
 800d040:	0800cfb1 	.word	0x0800cfb1

0800d044 <__sfp_lock_acquire>:
 800d044:	4801      	ldr	r0, [pc, #4]	; (800d04c <__sfp_lock_acquire+0x8>)
 800d046:	f000 b875 	b.w	800d134 <__retarget_lock_acquire_recursive>
 800d04a:	bf00      	nop
 800d04c:	200016a1 	.word	0x200016a1

0800d050 <__sfp_lock_release>:
 800d050:	4801      	ldr	r0, [pc, #4]	; (800d058 <__sfp_lock_release+0x8>)
 800d052:	f000 b870 	b.w	800d136 <__retarget_lock_release_recursive>
 800d056:	bf00      	nop
 800d058:	200016a1 	.word	0x200016a1

0800d05c <__sinit>:
 800d05c:	b510      	push	{r4, lr}
 800d05e:	4604      	mov	r4, r0
 800d060:	f7ff fff0 	bl	800d044 <__sfp_lock_acquire>
 800d064:	6a23      	ldr	r3, [r4, #32]
 800d066:	b11b      	cbz	r3, 800d070 <__sinit+0x14>
 800d068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d06c:	f7ff bff0 	b.w	800d050 <__sfp_lock_release>
 800d070:	4b04      	ldr	r3, [pc, #16]	; (800d084 <__sinit+0x28>)
 800d072:	6223      	str	r3, [r4, #32]
 800d074:	4b04      	ldr	r3, [pc, #16]	; (800d088 <__sinit+0x2c>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d1f5      	bne.n	800d068 <__sinit+0xc>
 800d07c:	f7ff ffc4 	bl	800d008 <global_stdio_init.part.0>
 800d080:	e7f2      	b.n	800d068 <__sinit+0xc>
 800d082:	bf00      	nop
 800d084:	0800cfc9 	.word	0x0800cfc9
 800d088:	2000169c 	.word	0x2000169c

0800d08c <_fwalk_sglue>:
 800d08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d090:	4607      	mov	r7, r0
 800d092:	4688      	mov	r8, r1
 800d094:	4614      	mov	r4, r2
 800d096:	2600      	movs	r6, #0
 800d098:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d09c:	f1b9 0901 	subs.w	r9, r9, #1
 800d0a0:	d505      	bpl.n	800d0ae <_fwalk_sglue+0x22>
 800d0a2:	6824      	ldr	r4, [r4, #0]
 800d0a4:	2c00      	cmp	r4, #0
 800d0a6:	d1f7      	bne.n	800d098 <_fwalk_sglue+0xc>
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ae:	89ab      	ldrh	r3, [r5, #12]
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d907      	bls.n	800d0c4 <_fwalk_sglue+0x38>
 800d0b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	d003      	beq.n	800d0c4 <_fwalk_sglue+0x38>
 800d0bc:	4629      	mov	r1, r5
 800d0be:	4638      	mov	r0, r7
 800d0c0:	47c0      	blx	r8
 800d0c2:	4306      	orrs	r6, r0
 800d0c4:	3568      	adds	r5, #104	; 0x68
 800d0c6:	e7e9      	b.n	800d09c <_fwalk_sglue+0x10>

0800d0c8 <memset>:
 800d0c8:	4402      	add	r2, r0
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d100      	bne.n	800d0d2 <memset+0xa>
 800d0d0:	4770      	bx	lr
 800d0d2:	f803 1b01 	strb.w	r1, [r3], #1
 800d0d6:	e7f9      	b.n	800d0cc <memset+0x4>

0800d0d8 <_localeconv_r>:
 800d0d8:	4800      	ldr	r0, [pc, #0]	; (800d0dc <_localeconv_r+0x4>)
 800d0da:	4770      	bx	lr
 800d0dc:	20000220 	.word	0x20000220

0800d0e0 <__errno>:
 800d0e0:	4b01      	ldr	r3, [pc, #4]	; (800d0e8 <__errno+0x8>)
 800d0e2:	6818      	ldr	r0, [r3, #0]
 800d0e4:	4770      	bx	lr
 800d0e6:	bf00      	nop
 800d0e8:	2000012c 	.word	0x2000012c

0800d0ec <__libc_init_array>:
 800d0ec:	b570      	push	{r4, r5, r6, lr}
 800d0ee:	4d0d      	ldr	r5, [pc, #52]	; (800d124 <__libc_init_array+0x38>)
 800d0f0:	4c0d      	ldr	r4, [pc, #52]	; (800d128 <__libc_init_array+0x3c>)
 800d0f2:	1b64      	subs	r4, r4, r5
 800d0f4:	10a4      	asrs	r4, r4, #2
 800d0f6:	2600      	movs	r6, #0
 800d0f8:	42a6      	cmp	r6, r4
 800d0fa:	d109      	bne.n	800d110 <__libc_init_array+0x24>
 800d0fc:	4d0b      	ldr	r5, [pc, #44]	; (800d12c <__libc_init_array+0x40>)
 800d0fe:	4c0c      	ldr	r4, [pc, #48]	; (800d130 <__libc_init_array+0x44>)
 800d100:	f002 f91e 	bl	800f340 <_init>
 800d104:	1b64      	subs	r4, r4, r5
 800d106:	10a4      	asrs	r4, r4, #2
 800d108:	2600      	movs	r6, #0
 800d10a:	42a6      	cmp	r6, r4
 800d10c:	d105      	bne.n	800d11a <__libc_init_array+0x2e>
 800d10e:	bd70      	pop	{r4, r5, r6, pc}
 800d110:	f855 3b04 	ldr.w	r3, [r5], #4
 800d114:	4798      	blx	r3
 800d116:	3601      	adds	r6, #1
 800d118:	e7ee      	b.n	800d0f8 <__libc_init_array+0xc>
 800d11a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d11e:	4798      	blx	r3
 800d120:	3601      	adds	r6, #1
 800d122:	e7f2      	b.n	800d10a <__libc_init_array+0x1e>
 800d124:	0800fc0c 	.word	0x0800fc0c
 800d128:	0800fc0c 	.word	0x0800fc0c
 800d12c:	0800fc0c 	.word	0x0800fc0c
 800d130:	0800fc10 	.word	0x0800fc10

0800d134 <__retarget_lock_acquire_recursive>:
 800d134:	4770      	bx	lr

0800d136 <__retarget_lock_release_recursive>:
 800d136:	4770      	bx	lr

0800d138 <memcpy>:
 800d138:	440a      	add	r2, r1
 800d13a:	4291      	cmp	r1, r2
 800d13c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d140:	d100      	bne.n	800d144 <memcpy+0xc>
 800d142:	4770      	bx	lr
 800d144:	b510      	push	{r4, lr}
 800d146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d14a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d14e:	4291      	cmp	r1, r2
 800d150:	d1f9      	bne.n	800d146 <memcpy+0xe>
 800d152:	bd10      	pop	{r4, pc}

0800d154 <quorem>:
 800d154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d158:	6903      	ldr	r3, [r0, #16]
 800d15a:	690c      	ldr	r4, [r1, #16]
 800d15c:	42a3      	cmp	r3, r4
 800d15e:	4607      	mov	r7, r0
 800d160:	db7e      	blt.n	800d260 <quorem+0x10c>
 800d162:	3c01      	subs	r4, #1
 800d164:	f101 0814 	add.w	r8, r1, #20
 800d168:	f100 0514 	add.w	r5, r0, #20
 800d16c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d170:	9301      	str	r3, [sp, #4]
 800d172:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d176:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d17a:	3301      	adds	r3, #1
 800d17c:	429a      	cmp	r2, r3
 800d17e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d182:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d186:	fbb2 f6f3 	udiv	r6, r2, r3
 800d18a:	d331      	bcc.n	800d1f0 <quorem+0x9c>
 800d18c:	f04f 0e00 	mov.w	lr, #0
 800d190:	4640      	mov	r0, r8
 800d192:	46ac      	mov	ip, r5
 800d194:	46f2      	mov	sl, lr
 800d196:	f850 2b04 	ldr.w	r2, [r0], #4
 800d19a:	b293      	uxth	r3, r2
 800d19c:	fb06 e303 	mla	r3, r6, r3, lr
 800d1a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d1a4:	0c1a      	lsrs	r2, r3, #16
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	ebaa 0303 	sub.w	r3, sl, r3
 800d1ac:	f8dc a000 	ldr.w	sl, [ip]
 800d1b0:	fa13 f38a 	uxtah	r3, r3, sl
 800d1b4:	fb06 220e 	mla	r2, r6, lr, r2
 800d1b8:	9300      	str	r3, [sp, #0]
 800d1ba:	9b00      	ldr	r3, [sp, #0]
 800d1bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d1c0:	b292      	uxth	r2, r2
 800d1c2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d1c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d1ca:	f8bd 3000 	ldrh.w	r3, [sp]
 800d1ce:	4581      	cmp	r9, r0
 800d1d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1d4:	f84c 3b04 	str.w	r3, [ip], #4
 800d1d8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d1dc:	d2db      	bcs.n	800d196 <quorem+0x42>
 800d1de:	f855 300b 	ldr.w	r3, [r5, fp]
 800d1e2:	b92b      	cbnz	r3, 800d1f0 <quorem+0x9c>
 800d1e4:	9b01      	ldr	r3, [sp, #4]
 800d1e6:	3b04      	subs	r3, #4
 800d1e8:	429d      	cmp	r5, r3
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	d32c      	bcc.n	800d248 <quorem+0xf4>
 800d1ee:	613c      	str	r4, [r7, #16]
 800d1f0:	4638      	mov	r0, r7
 800d1f2:	f001 fb61 	bl	800e8b8 <__mcmp>
 800d1f6:	2800      	cmp	r0, #0
 800d1f8:	db22      	blt.n	800d240 <quorem+0xec>
 800d1fa:	3601      	adds	r6, #1
 800d1fc:	4629      	mov	r1, r5
 800d1fe:	2000      	movs	r0, #0
 800d200:	f858 2b04 	ldr.w	r2, [r8], #4
 800d204:	f8d1 c000 	ldr.w	ip, [r1]
 800d208:	b293      	uxth	r3, r2
 800d20a:	1ac3      	subs	r3, r0, r3
 800d20c:	0c12      	lsrs	r2, r2, #16
 800d20e:	fa13 f38c 	uxtah	r3, r3, ip
 800d212:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d216:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d220:	45c1      	cmp	r9, r8
 800d222:	f841 3b04 	str.w	r3, [r1], #4
 800d226:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d22a:	d2e9      	bcs.n	800d200 <quorem+0xac>
 800d22c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d230:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d234:	b922      	cbnz	r2, 800d240 <quorem+0xec>
 800d236:	3b04      	subs	r3, #4
 800d238:	429d      	cmp	r5, r3
 800d23a:	461a      	mov	r2, r3
 800d23c:	d30a      	bcc.n	800d254 <quorem+0x100>
 800d23e:	613c      	str	r4, [r7, #16]
 800d240:	4630      	mov	r0, r6
 800d242:	b003      	add	sp, #12
 800d244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d248:	6812      	ldr	r2, [r2, #0]
 800d24a:	3b04      	subs	r3, #4
 800d24c:	2a00      	cmp	r2, #0
 800d24e:	d1ce      	bne.n	800d1ee <quorem+0x9a>
 800d250:	3c01      	subs	r4, #1
 800d252:	e7c9      	b.n	800d1e8 <quorem+0x94>
 800d254:	6812      	ldr	r2, [r2, #0]
 800d256:	3b04      	subs	r3, #4
 800d258:	2a00      	cmp	r2, #0
 800d25a:	d1f0      	bne.n	800d23e <quorem+0xea>
 800d25c:	3c01      	subs	r4, #1
 800d25e:	e7eb      	b.n	800d238 <quorem+0xe4>
 800d260:	2000      	movs	r0, #0
 800d262:	e7ee      	b.n	800d242 <quorem+0xee>
 800d264:	0000      	movs	r0, r0
	...

0800d268 <_dtoa_r>:
 800d268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d26c:	ed2d 8b04 	vpush	{d8-d9}
 800d270:	69c5      	ldr	r5, [r0, #28]
 800d272:	b093      	sub	sp, #76	; 0x4c
 800d274:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d278:	ec57 6b10 	vmov	r6, r7, d0
 800d27c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d280:	9107      	str	r1, [sp, #28]
 800d282:	4604      	mov	r4, r0
 800d284:	920a      	str	r2, [sp, #40]	; 0x28
 800d286:	930d      	str	r3, [sp, #52]	; 0x34
 800d288:	b975      	cbnz	r5, 800d2a8 <_dtoa_r+0x40>
 800d28a:	2010      	movs	r0, #16
 800d28c:	f000 ff36 	bl	800e0fc <malloc>
 800d290:	4602      	mov	r2, r0
 800d292:	61e0      	str	r0, [r4, #28]
 800d294:	b920      	cbnz	r0, 800d2a0 <_dtoa_r+0x38>
 800d296:	4bae      	ldr	r3, [pc, #696]	; (800d550 <_dtoa_r+0x2e8>)
 800d298:	21ef      	movs	r1, #239	; 0xef
 800d29a:	48ae      	ldr	r0, [pc, #696]	; (800d554 <_dtoa_r+0x2ec>)
 800d29c:	f001 fcee 	bl	800ec7c <__assert_func>
 800d2a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d2a4:	6005      	str	r5, [r0, #0]
 800d2a6:	60c5      	str	r5, [r0, #12]
 800d2a8:	69e3      	ldr	r3, [r4, #28]
 800d2aa:	6819      	ldr	r1, [r3, #0]
 800d2ac:	b151      	cbz	r1, 800d2c4 <_dtoa_r+0x5c>
 800d2ae:	685a      	ldr	r2, [r3, #4]
 800d2b0:	604a      	str	r2, [r1, #4]
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	4093      	lsls	r3, r2
 800d2b6:	608b      	str	r3, [r1, #8]
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	f001 f8c1 	bl	800e440 <_Bfree>
 800d2be:	69e3      	ldr	r3, [r4, #28]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	601a      	str	r2, [r3, #0]
 800d2c4:	1e3b      	subs	r3, r7, #0
 800d2c6:	bfbb      	ittet	lt
 800d2c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d2cc:	9303      	strlt	r3, [sp, #12]
 800d2ce:	2300      	movge	r3, #0
 800d2d0:	2201      	movlt	r2, #1
 800d2d2:	bfac      	ite	ge
 800d2d4:	f8c8 3000 	strge.w	r3, [r8]
 800d2d8:	f8c8 2000 	strlt.w	r2, [r8]
 800d2dc:	4b9e      	ldr	r3, [pc, #632]	; (800d558 <_dtoa_r+0x2f0>)
 800d2de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d2e2:	ea33 0308 	bics.w	r3, r3, r8
 800d2e6:	d11b      	bne.n	800d320 <_dtoa_r+0xb8>
 800d2e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d2ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800d2ee:	6013      	str	r3, [r2, #0]
 800d2f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d2f4:	4333      	orrs	r3, r6
 800d2f6:	f000 8593 	beq.w	800de20 <_dtoa_r+0xbb8>
 800d2fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2fc:	b963      	cbnz	r3, 800d318 <_dtoa_r+0xb0>
 800d2fe:	4b97      	ldr	r3, [pc, #604]	; (800d55c <_dtoa_r+0x2f4>)
 800d300:	e027      	b.n	800d352 <_dtoa_r+0xea>
 800d302:	4b97      	ldr	r3, [pc, #604]	; (800d560 <_dtoa_r+0x2f8>)
 800d304:	9300      	str	r3, [sp, #0]
 800d306:	3308      	adds	r3, #8
 800d308:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d30a:	6013      	str	r3, [r2, #0]
 800d30c:	9800      	ldr	r0, [sp, #0]
 800d30e:	b013      	add	sp, #76	; 0x4c
 800d310:	ecbd 8b04 	vpop	{d8-d9}
 800d314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d318:	4b90      	ldr	r3, [pc, #576]	; (800d55c <_dtoa_r+0x2f4>)
 800d31a:	9300      	str	r3, [sp, #0]
 800d31c:	3303      	adds	r3, #3
 800d31e:	e7f3      	b.n	800d308 <_dtoa_r+0xa0>
 800d320:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d324:	2200      	movs	r2, #0
 800d326:	ec51 0b17 	vmov	r0, r1, d7
 800d32a:	eeb0 8a47 	vmov.f32	s16, s14
 800d32e:	eef0 8a67 	vmov.f32	s17, s15
 800d332:	2300      	movs	r3, #0
 800d334:	f7f3 fbe0 	bl	8000af8 <__aeabi_dcmpeq>
 800d338:	4681      	mov	r9, r0
 800d33a:	b160      	cbz	r0, 800d356 <_dtoa_r+0xee>
 800d33c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d33e:	2301      	movs	r3, #1
 800d340:	6013      	str	r3, [r2, #0]
 800d342:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d344:	2b00      	cmp	r3, #0
 800d346:	f000 8568 	beq.w	800de1a <_dtoa_r+0xbb2>
 800d34a:	4b86      	ldr	r3, [pc, #536]	; (800d564 <_dtoa_r+0x2fc>)
 800d34c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d34e:	6013      	str	r3, [r2, #0]
 800d350:	3b01      	subs	r3, #1
 800d352:	9300      	str	r3, [sp, #0]
 800d354:	e7da      	b.n	800d30c <_dtoa_r+0xa4>
 800d356:	aa10      	add	r2, sp, #64	; 0x40
 800d358:	a911      	add	r1, sp, #68	; 0x44
 800d35a:	4620      	mov	r0, r4
 800d35c:	eeb0 0a48 	vmov.f32	s0, s16
 800d360:	eef0 0a68 	vmov.f32	s1, s17
 800d364:	f001 fb4e 	bl	800ea04 <__d2b>
 800d368:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d36c:	4682      	mov	sl, r0
 800d36e:	2d00      	cmp	r5, #0
 800d370:	d07f      	beq.n	800d472 <_dtoa_r+0x20a>
 800d372:	ee18 3a90 	vmov	r3, s17
 800d376:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d37a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d37e:	ec51 0b18 	vmov	r0, r1, d8
 800d382:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d386:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d38a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d38e:	4619      	mov	r1, r3
 800d390:	2200      	movs	r2, #0
 800d392:	4b75      	ldr	r3, [pc, #468]	; (800d568 <_dtoa_r+0x300>)
 800d394:	f7f2 ff90 	bl	80002b8 <__aeabi_dsub>
 800d398:	a367      	add	r3, pc, #412	; (adr r3, 800d538 <_dtoa_r+0x2d0>)
 800d39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39e:	f7f3 f943 	bl	8000628 <__aeabi_dmul>
 800d3a2:	a367      	add	r3, pc, #412	; (adr r3, 800d540 <_dtoa_r+0x2d8>)
 800d3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a8:	f7f2 ff88 	bl	80002bc <__adddf3>
 800d3ac:	4606      	mov	r6, r0
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	460f      	mov	r7, r1
 800d3b2:	f7f3 f8cf 	bl	8000554 <__aeabi_i2d>
 800d3b6:	a364      	add	r3, pc, #400	; (adr r3, 800d548 <_dtoa_r+0x2e0>)
 800d3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3bc:	f7f3 f934 	bl	8000628 <__aeabi_dmul>
 800d3c0:	4602      	mov	r2, r0
 800d3c2:	460b      	mov	r3, r1
 800d3c4:	4630      	mov	r0, r6
 800d3c6:	4639      	mov	r1, r7
 800d3c8:	f7f2 ff78 	bl	80002bc <__adddf3>
 800d3cc:	4606      	mov	r6, r0
 800d3ce:	460f      	mov	r7, r1
 800d3d0:	f7f3 fbda 	bl	8000b88 <__aeabi_d2iz>
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	4683      	mov	fp, r0
 800d3d8:	2300      	movs	r3, #0
 800d3da:	4630      	mov	r0, r6
 800d3dc:	4639      	mov	r1, r7
 800d3de:	f7f3 fb95 	bl	8000b0c <__aeabi_dcmplt>
 800d3e2:	b148      	cbz	r0, 800d3f8 <_dtoa_r+0x190>
 800d3e4:	4658      	mov	r0, fp
 800d3e6:	f7f3 f8b5 	bl	8000554 <__aeabi_i2d>
 800d3ea:	4632      	mov	r2, r6
 800d3ec:	463b      	mov	r3, r7
 800d3ee:	f7f3 fb83 	bl	8000af8 <__aeabi_dcmpeq>
 800d3f2:	b908      	cbnz	r0, 800d3f8 <_dtoa_r+0x190>
 800d3f4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d3f8:	f1bb 0f16 	cmp.w	fp, #22
 800d3fc:	d857      	bhi.n	800d4ae <_dtoa_r+0x246>
 800d3fe:	4b5b      	ldr	r3, [pc, #364]	; (800d56c <_dtoa_r+0x304>)
 800d400:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d408:	ec51 0b18 	vmov	r0, r1, d8
 800d40c:	f7f3 fb7e 	bl	8000b0c <__aeabi_dcmplt>
 800d410:	2800      	cmp	r0, #0
 800d412:	d04e      	beq.n	800d4b2 <_dtoa_r+0x24a>
 800d414:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d418:	2300      	movs	r3, #0
 800d41a:	930c      	str	r3, [sp, #48]	; 0x30
 800d41c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d41e:	1b5b      	subs	r3, r3, r5
 800d420:	1e5a      	subs	r2, r3, #1
 800d422:	bf45      	ittet	mi
 800d424:	f1c3 0301 	rsbmi	r3, r3, #1
 800d428:	9305      	strmi	r3, [sp, #20]
 800d42a:	2300      	movpl	r3, #0
 800d42c:	2300      	movmi	r3, #0
 800d42e:	9206      	str	r2, [sp, #24]
 800d430:	bf54      	ite	pl
 800d432:	9305      	strpl	r3, [sp, #20]
 800d434:	9306      	strmi	r3, [sp, #24]
 800d436:	f1bb 0f00 	cmp.w	fp, #0
 800d43a:	db3c      	blt.n	800d4b6 <_dtoa_r+0x24e>
 800d43c:	9b06      	ldr	r3, [sp, #24]
 800d43e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d442:	445b      	add	r3, fp
 800d444:	9306      	str	r3, [sp, #24]
 800d446:	2300      	movs	r3, #0
 800d448:	9308      	str	r3, [sp, #32]
 800d44a:	9b07      	ldr	r3, [sp, #28]
 800d44c:	2b09      	cmp	r3, #9
 800d44e:	d868      	bhi.n	800d522 <_dtoa_r+0x2ba>
 800d450:	2b05      	cmp	r3, #5
 800d452:	bfc4      	itt	gt
 800d454:	3b04      	subgt	r3, #4
 800d456:	9307      	strgt	r3, [sp, #28]
 800d458:	9b07      	ldr	r3, [sp, #28]
 800d45a:	f1a3 0302 	sub.w	r3, r3, #2
 800d45e:	bfcc      	ite	gt
 800d460:	2500      	movgt	r5, #0
 800d462:	2501      	movle	r5, #1
 800d464:	2b03      	cmp	r3, #3
 800d466:	f200 8085 	bhi.w	800d574 <_dtoa_r+0x30c>
 800d46a:	e8df f003 	tbb	[pc, r3]
 800d46e:	3b2e      	.short	0x3b2e
 800d470:	5839      	.short	0x5839
 800d472:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d476:	441d      	add	r5, r3
 800d478:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d47c:	2b20      	cmp	r3, #32
 800d47e:	bfc1      	itttt	gt
 800d480:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d484:	fa08 f803 	lslgt.w	r8, r8, r3
 800d488:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d48c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d490:	bfd6      	itet	le
 800d492:	f1c3 0320 	rsble	r3, r3, #32
 800d496:	ea48 0003 	orrgt.w	r0, r8, r3
 800d49a:	fa06 f003 	lslle.w	r0, r6, r3
 800d49e:	f7f3 f849 	bl	8000534 <__aeabi_ui2d>
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d4a8:	3d01      	subs	r5, #1
 800d4aa:	920e      	str	r2, [sp, #56]	; 0x38
 800d4ac:	e76f      	b.n	800d38e <_dtoa_r+0x126>
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	e7b3      	b.n	800d41a <_dtoa_r+0x1b2>
 800d4b2:	900c      	str	r0, [sp, #48]	; 0x30
 800d4b4:	e7b2      	b.n	800d41c <_dtoa_r+0x1b4>
 800d4b6:	9b05      	ldr	r3, [sp, #20]
 800d4b8:	eba3 030b 	sub.w	r3, r3, fp
 800d4bc:	9305      	str	r3, [sp, #20]
 800d4be:	f1cb 0300 	rsb	r3, fp, #0
 800d4c2:	9308      	str	r3, [sp, #32]
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d4c8:	e7bf      	b.n	800d44a <_dtoa_r+0x1e2>
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	9309      	str	r3, [sp, #36]	; 0x24
 800d4ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	dc52      	bgt.n	800d57a <_dtoa_r+0x312>
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	9301      	str	r3, [sp, #4]
 800d4d8:	9304      	str	r3, [sp, #16]
 800d4da:	461a      	mov	r2, r3
 800d4dc:	920a      	str	r2, [sp, #40]	; 0x28
 800d4de:	e00b      	b.n	800d4f8 <_dtoa_r+0x290>
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	e7f3      	b.n	800d4cc <_dtoa_r+0x264>
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	9309      	str	r3, [sp, #36]	; 0x24
 800d4e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4ea:	445b      	add	r3, fp
 800d4ec:	9301      	str	r3, [sp, #4]
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	2b01      	cmp	r3, #1
 800d4f2:	9304      	str	r3, [sp, #16]
 800d4f4:	bfb8      	it	lt
 800d4f6:	2301      	movlt	r3, #1
 800d4f8:	69e0      	ldr	r0, [r4, #28]
 800d4fa:	2100      	movs	r1, #0
 800d4fc:	2204      	movs	r2, #4
 800d4fe:	f102 0614 	add.w	r6, r2, #20
 800d502:	429e      	cmp	r6, r3
 800d504:	d93d      	bls.n	800d582 <_dtoa_r+0x31a>
 800d506:	6041      	str	r1, [r0, #4]
 800d508:	4620      	mov	r0, r4
 800d50a:	f000 ff59 	bl	800e3c0 <_Balloc>
 800d50e:	9000      	str	r0, [sp, #0]
 800d510:	2800      	cmp	r0, #0
 800d512:	d139      	bne.n	800d588 <_dtoa_r+0x320>
 800d514:	4b16      	ldr	r3, [pc, #88]	; (800d570 <_dtoa_r+0x308>)
 800d516:	4602      	mov	r2, r0
 800d518:	f240 11af 	movw	r1, #431	; 0x1af
 800d51c:	e6bd      	b.n	800d29a <_dtoa_r+0x32>
 800d51e:	2301      	movs	r3, #1
 800d520:	e7e1      	b.n	800d4e6 <_dtoa_r+0x27e>
 800d522:	2501      	movs	r5, #1
 800d524:	2300      	movs	r3, #0
 800d526:	9307      	str	r3, [sp, #28]
 800d528:	9509      	str	r5, [sp, #36]	; 0x24
 800d52a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d52e:	9301      	str	r3, [sp, #4]
 800d530:	9304      	str	r3, [sp, #16]
 800d532:	2200      	movs	r2, #0
 800d534:	2312      	movs	r3, #18
 800d536:	e7d1      	b.n	800d4dc <_dtoa_r+0x274>
 800d538:	636f4361 	.word	0x636f4361
 800d53c:	3fd287a7 	.word	0x3fd287a7
 800d540:	8b60c8b3 	.word	0x8b60c8b3
 800d544:	3fc68a28 	.word	0x3fc68a28
 800d548:	509f79fb 	.word	0x509f79fb
 800d54c:	3fd34413 	.word	0x3fd34413
 800d550:	0800f8d1 	.word	0x0800f8d1
 800d554:	0800f8e8 	.word	0x0800f8e8
 800d558:	7ff00000 	.word	0x7ff00000
 800d55c:	0800f8cd 	.word	0x0800f8cd
 800d560:	0800f8c4 	.word	0x0800f8c4
 800d564:	0800f8a1 	.word	0x0800f8a1
 800d568:	3ff80000 	.word	0x3ff80000
 800d56c:	0800f9e8 	.word	0x0800f9e8
 800d570:	0800f940 	.word	0x0800f940
 800d574:	2301      	movs	r3, #1
 800d576:	9309      	str	r3, [sp, #36]	; 0x24
 800d578:	e7d7      	b.n	800d52a <_dtoa_r+0x2c2>
 800d57a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d57c:	9301      	str	r3, [sp, #4]
 800d57e:	9304      	str	r3, [sp, #16]
 800d580:	e7ba      	b.n	800d4f8 <_dtoa_r+0x290>
 800d582:	3101      	adds	r1, #1
 800d584:	0052      	lsls	r2, r2, #1
 800d586:	e7ba      	b.n	800d4fe <_dtoa_r+0x296>
 800d588:	69e3      	ldr	r3, [r4, #28]
 800d58a:	9a00      	ldr	r2, [sp, #0]
 800d58c:	601a      	str	r2, [r3, #0]
 800d58e:	9b04      	ldr	r3, [sp, #16]
 800d590:	2b0e      	cmp	r3, #14
 800d592:	f200 80a8 	bhi.w	800d6e6 <_dtoa_r+0x47e>
 800d596:	2d00      	cmp	r5, #0
 800d598:	f000 80a5 	beq.w	800d6e6 <_dtoa_r+0x47e>
 800d59c:	f1bb 0f00 	cmp.w	fp, #0
 800d5a0:	dd38      	ble.n	800d614 <_dtoa_r+0x3ac>
 800d5a2:	4bc0      	ldr	r3, [pc, #768]	; (800d8a4 <_dtoa_r+0x63c>)
 800d5a4:	f00b 020f 	and.w	r2, fp, #15
 800d5a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d5b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d5b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d5b8:	d019      	beq.n	800d5ee <_dtoa_r+0x386>
 800d5ba:	4bbb      	ldr	r3, [pc, #748]	; (800d8a8 <_dtoa_r+0x640>)
 800d5bc:	ec51 0b18 	vmov	r0, r1, d8
 800d5c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d5c4:	f7f3 f95a 	bl	800087c <__aeabi_ddiv>
 800d5c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5cc:	f008 080f 	and.w	r8, r8, #15
 800d5d0:	2503      	movs	r5, #3
 800d5d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d8a8 <_dtoa_r+0x640>
 800d5d6:	f1b8 0f00 	cmp.w	r8, #0
 800d5da:	d10a      	bne.n	800d5f2 <_dtoa_r+0x38a>
 800d5dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5e0:	4632      	mov	r2, r6
 800d5e2:	463b      	mov	r3, r7
 800d5e4:	f7f3 f94a 	bl	800087c <__aeabi_ddiv>
 800d5e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5ec:	e02b      	b.n	800d646 <_dtoa_r+0x3de>
 800d5ee:	2502      	movs	r5, #2
 800d5f0:	e7ef      	b.n	800d5d2 <_dtoa_r+0x36a>
 800d5f2:	f018 0f01 	tst.w	r8, #1
 800d5f6:	d008      	beq.n	800d60a <_dtoa_r+0x3a2>
 800d5f8:	4630      	mov	r0, r6
 800d5fa:	4639      	mov	r1, r7
 800d5fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d600:	f7f3 f812 	bl	8000628 <__aeabi_dmul>
 800d604:	3501      	adds	r5, #1
 800d606:	4606      	mov	r6, r0
 800d608:	460f      	mov	r7, r1
 800d60a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d60e:	f109 0908 	add.w	r9, r9, #8
 800d612:	e7e0      	b.n	800d5d6 <_dtoa_r+0x36e>
 800d614:	f000 809f 	beq.w	800d756 <_dtoa_r+0x4ee>
 800d618:	f1cb 0600 	rsb	r6, fp, #0
 800d61c:	4ba1      	ldr	r3, [pc, #644]	; (800d8a4 <_dtoa_r+0x63c>)
 800d61e:	4fa2      	ldr	r7, [pc, #648]	; (800d8a8 <_dtoa_r+0x640>)
 800d620:	f006 020f 	and.w	r2, r6, #15
 800d624:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62c:	ec51 0b18 	vmov	r0, r1, d8
 800d630:	f7f2 fffa 	bl	8000628 <__aeabi_dmul>
 800d634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d638:	1136      	asrs	r6, r6, #4
 800d63a:	2300      	movs	r3, #0
 800d63c:	2502      	movs	r5, #2
 800d63e:	2e00      	cmp	r6, #0
 800d640:	d17e      	bne.n	800d740 <_dtoa_r+0x4d8>
 800d642:	2b00      	cmp	r3, #0
 800d644:	d1d0      	bne.n	800d5e8 <_dtoa_r+0x380>
 800d646:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d648:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	f000 8084 	beq.w	800d75a <_dtoa_r+0x4f2>
 800d652:	4b96      	ldr	r3, [pc, #600]	; (800d8ac <_dtoa_r+0x644>)
 800d654:	2200      	movs	r2, #0
 800d656:	4640      	mov	r0, r8
 800d658:	4649      	mov	r1, r9
 800d65a:	f7f3 fa57 	bl	8000b0c <__aeabi_dcmplt>
 800d65e:	2800      	cmp	r0, #0
 800d660:	d07b      	beq.n	800d75a <_dtoa_r+0x4f2>
 800d662:	9b04      	ldr	r3, [sp, #16]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d078      	beq.n	800d75a <_dtoa_r+0x4f2>
 800d668:	9b01      	ldr	r3, [sp, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	dd39      	ble.n	800d6e2 <_dtoa_r+0x47a>
 800d66e:	4b90      	ldr	r3, [pc, #576]	; (800d8b0 <_dtoa_r+0x648>)
 800d670:	2200      	movs	r2, #0
 800d672:	4640      	mov	r0, r8
 800d674:	4649      	mov	r1, r9
 800d676:	f7f2 ffd7 	bl	8000628 <__aeabi_dmul>
 800d67a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d67e:	9e01      	ldr	r6, [sp, #4]
 800d680:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800d684:	3501      	adds	r5, #1
 800d686:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d68a:	4628      	mov	r0, r5
 800d68c:	f7f2 ff62 	bl	8000554 <__aeabi_i2d>
 800d690:	4642      	mov	r2, r8
 800d692:	464b      	mov	r3, r9
 800d694:	f7f2 ffc8 	bl	8000628 <__aeabi_dmul>
 800d698:	4b86      	ldr	r3, [pc, #536]	; (800d8b4 <_dtoa_r+0x64c>)
 800d69a:	2200      	movs	r2, #0
 800d69c:	f7f2 fe0e 	bl	80002bc <__adddf3>
 800d6a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d6a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6a8:	9303      	str	r3, [sp, #12]
 800d6aa:	2e00      	cmp	r6, #0
 800d6ac:	d158      	bne.n	800d760 <_dtoa_r+0x4f8>
 800d6ae:	4b82      	ldr	r3, [pc, #520]	; (800d8b8 <_dtoa_r+0x650>)
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	4640      	mov	r0, r8
 800d6b4:	4649      	mov	r1, r9
 800d6b6:	f7f2 fdff 	bl	80002b8 <__aeabi_dsub>
 800d6ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6be:	4680      	mov	r8, r0
 800d6c0:	4689      	mov	r9, r1
 800d6c2:	f7f3 fa41 	bl	8000b48 <__aeabi_dcmpgt>
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	f040 8296 	bne.w	800dbf8 <_dtoa_r+0x990>
 800d6cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d6d0:	4640      	mov	r0, r8
 800d6d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6d6:	4649      	mov	r1, r9
 800d6d8:	f7f3 fa18 	bl	8000b0c <__aeabi_dcmplt>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	f040 8289 	bne.w	800dbf4 <_dtoa_r+0x98c>
 800d6e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d6e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f2c0 814e 	blt.w	800d98a <_dtoa_r+0x722>
 800d6ee:	f1bb 0f0e 	cmp.w	fp, #14
 800d6f2:	f300 814a 	bgt.w	800d98a <_dtoa_r+0x722>
 800d6f6:	4b6b      	ldr	r3, [pc, #428]	; (800d8a4 <_dtoa_r+0x63c>)
 800d6f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d6fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d702:	2b00      	cmp	r3, #0
 800d704:	f280 80dc 	bge.w	800d8c0 <_dtoa_r+0x658>
 800d708:	9b04      	ldr	r3, [sp, #16]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	f300 80d8 	bgt.w	800d8c0 <_dtoa_r+0x658>
 800d710:	f040 826f 	bne.w	800dbf2 <_dtoa_r+0x98a>
 800d714:	4b68      	ldr	r3, [pc, #416]	; (800d8b8 <_dtoa_r+0x650>)
 800d716:	2200      	movs	r2, #0
 800d718:	4640      	mov	r0, r8
 800d71a:	4649      	mov	r1, r9
 800d71c:	f7f2 ff84 	bl	8000628 <__aeabi_dmul>
 800d720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d724:	f7f3 fa06 	bl	8000b34 <__aeabi_dcmpge>
 800d728:	9e04      	ldr	r6, [sp, #16]
 800d72a:	4637      	mov	r7, r6
 800d72c:	2800      	cmp	r0, #0
 800d72e:	f040 8245 	bne.w	800dbbc <_dtoa_r+0x954>
 800d732:	9d00      	ldr	r5, [sp, #0]
 800d734:	2331      	movs	r3, #49	; 0x31
 800d736:	f805 3b01 	strb.w	r3, [r5], #1
 800d73a:	f10b 0b01 	add.w	fp, fp, #1
 800d73e:	e241      	b.n	800dbc4 <_dtoa_r+0x95c>
 800d740:	07f2      	lsls	r2, r6, #31
 800d742:	d505      	bpl.n	800d750 <_dtoa_r+0x4e8>
 800d744:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d748:	f7f2 ff6e 	bl	8000628 <__aeabi_dmul>
 800d74c:	3501      	adds	r5, #1
 800d74e:	2301      	movs	r3, #1
 800d750:	1076      	asrs	r6, r6, #1
 800d752:	3708      	adds	r7, #8
 800d754:	e773      	b.n	800d63e <_dtoa_r+0x3d6>
 800d756:	2502      	movs	r5, #2
 800d758:	e775      	b.n	800d646 <_dtoa_r+0x3de>
 800d75a:	9e04      	ldr	r6, [sp, #16]
 800d75c:	465f      	mov	r7, fp
 800d75e:	e792      	b.n	800d686 <_dtoa_r+0x41e>
 800d760:	9900      	ldr	r1, [sp, #0]
 800d762:	4b50      	ldr	r3, [pc, #320]	; (800d8a4 <_dtoa_r+0x63c>)
 800d764:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d768:	4431      	add	r1, r6
 800d76a:	9102      	str	r1, [sp, #8]
 800d76c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d76e:	eeb0 9a47 	vmov.f32	s18, s14
 800d772:	eef0 9a67 	vmov.f32	s19, s15
 800d776:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d77a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d77e:	2900      	cmp	r1, #0
 800d780:	d044      	beq.n	800d80c <_dtoa_r+0x5a4>
 800d782:	494e      	ldr	r1, [pc, #312]	; (800d8bc <_dtoa_r+0x654>)
 800d784:	2000      	movs	r0, #0
 800d786:	f7f3 f879 	bl	800087c <__aeabi_ddiv>
 800d78a:	ec53 2b19 	vmov	r2, r3, d9
 800d78e:	f7f2 fd93 	bl	80002b8 <__aeabi_dsub>
 800d792:	9d00      	ldr	r5, [sp, #0]
 800d794:	ec41 0b19 	vmov	d9, r0, r1
 800d798:	4649      	mov	r1, r9
 800d79a:	4640      	mov	r0, r8
 800d79c:	f7f3 f9f4 	bl	8000b88 <__aeabi_d2iz>
 800d7a0:	4606      	mov	r6, r0
 800d7a2:	f7f2 fed7 	bl	8000554 <__aeabi_i2d>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	4640      	mov	r0, r8
 800d7ac:	4649      	mov	r1, r9
 800d7ae:	f7f2 fd83 	bl	80002b8 <__aeabi_dsub>
 800d7b2:	3630      	adds	r6, #48	; 0x30
 800d7b4:	f805 6b01 	strb.w	r6, [r5], #1
 800d7b8:	ec53 2b19 	vmov	r2, r3, d9
 800d7bc:	4680      	mov	r8, r0
 800d7be:	4689      	mov	r9, r1
 800d7c0:	f7f3 f9a4 	bl	8000b0c <__aeabi_dcmplt>
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	d164      	bne.n	800d892 <_dtoa_r+0x62a>
 800d7c8:	4642      	mov	r2, r8
 800d7ca:	464b      	mov	r3, r9
 800d7cc:	4937      	ldr	r1, [pc, #220]	; (800d8ac <_dtoa_r+0x644>)
 800d7ce:	2000      	movs	r0, #0
 800d7d0:	f7f2 fd72 	bl	80002b8 <__aeabi_dsub>
 800d7d4:	ec53 2b19 	vmov	r2, r3, d9
 800d7d8:	f7f3 f998 	bl	8000b0c <__aeabi_dcmplt>
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	f040 80b6 	bne.w	800d94e <_dtoa_r+0x6e6>
 800d7e2:	9b02      	ldr	r3, [sp, #8]
 800d7e4:	429d      	cmp	r5, r3
 800d7e6:	f43f af7c 	beq.w	800d6e2 <_dtoa_r+0x47a>
 800d7ea:	4b31      	ldr	r3, [pc, #196]	; (800d8b0 <_dtoa_r+0x648>)
 800d7ec:	ec51 0b19 	vmov	r0, r1, d9
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	f7f2 ff19 	bl	8000628 <__aeabi_dmul>
 800d7f6:	4b2e      	ldr	r3, [pc, #184]	; (800d8b0 <_dtoa_r+0x648>)
 800d7f8:	ec41 0b19 	vmov	d9, r0, r1
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	4640      	mov	r0, r8
 800d800:	4649      	mov	r1, r9
 800d802:	f7f2 ff11 	bl	8000628 <__aeabi_dmul>
 800d806:	4680      	mov	r8, r0
 800d808:	4689      	mov	r9, r1
 800d80a:	e7c5      	b.n	800d798 <_dtoa_r+0x530>
 800d80c:	ec51 0b17 	vmov	r0, r1, d7
 800d810:	f7f2 ff0a 	bl	8000628 <__aeabi_dmul>
 800d814:	9b02      	ldr	r3, [sp, #8]
 800d816:	9d00      	ldr	r5, [sp, #0]
 800d818:	930f      	str	r3, [sp, #60]	; 0x3c
 800d81a:	ec41 0b19 	vmov	d9, r0, r1
 800d81e:	4649      	mov	r1, r9
 800d820:	4640      	mov	r0, r8
 800d822:	f7f3 f9b1 	bl	8000b88 <__aeabi_d2iz>
 800d826:	4606      	mov	r6, r0
 800d828:	f7f2 fe94 	bl	8000554 <__aeabi_i2d>
 800d82c:	3630      	adds	r6, #48	; 0x30
 800d82e:	4602      	mov	r2, r0
 800d830:	460b      	mov	r3, r1
 800d832:	4640      	mov	r0, r8
 800d834:	4649      	mov	r1, r9
 800d836:	f7f2 fd3f 	bl	80002b8 <__aeabi_dsub>
 800d83a:	f805 6b01 	strb.w	r6, [r5], #1
 800d83e:	9b02      	ldr	r3, [sp, #8]
 800d840:	429d      	cmp	r5, r3
 800d842:	4680      	mov	r8, r0
 800d844:	4689      	mov	r9, r1
 800d846:	f04f 0200 	mov.w	r2, #0
 800d84a:	d124      	bne.n	800d896 <_dtoa_r+0x62e>
 800d84c:	4b1b      	ldr	r3, [pc, #108]	; (800d8bc <_dtoa_r+0x654>)
 800d84e:	ec51 0b19 	vmov	r0, r1, d9
 800d852:	f7f2 fd33 	bl	80002bc <__adddf3>
 800d856:	4602      	mov	r2, r0
 800d858:	460b      	mov	r3, r1
 800d85a:	4640      	mov	r0, r8
 800d85c:	4649      	mov	r1, r9
 800d85e:	f7f3 f973 	bl	8000b48 <__aeabi_dcmpgt>
 800d862:	2800      	cmp	r0, #0
 800d864:	d173      	bne.n	800d94e <_dtoa_r+0x6e6>
 800d866:	ec53 2b19 	vmov	r2, r3, d9
 800d86a:	4914      	ldr	r1, [pc, #80]	; (800d8bc <_dtoa_r+0x654>)
 800d86c:	2000      	movs	r0, #0
 800d86e:	f7f2 fd23 	bl	80002b8 <__aeabi_dsub>
 800d872:	4602      	mov	r2, r0
 800d874:	460b      	mov	r3, r1
 800d876:	4640      	mov	r0, r8
 800d878:	4649      	mov	r1, r9
 800d87a:	f7f3 f947 	bl	8000b0c <__aeabi_dcmplt>
 800d87e:	2800      	cmp	r0, #0
 800d880:	f43f af2f 	beq.w	800d6e2 <_dtoa_r+0x47a>
 800d884:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d886:	1e6b      	subs	r3, r5, #1
 800d888:	930f      	str	r3, [sp, #60]	; 0x3c
 800d88a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d88e:	2b30      	cmp	r3, #48	; 0x30
 800d890:	d0f8      	beq.n	800d884 <_dtoa_r+0x61c>
 800d892:	46bb      	mov	fp, r7
 800d894:	e04a      	b.n	800d92c <_dtoa_r+0x6c4>
 800d896:	4b06      	ldr	r3, [pc, #24]	; (800d8b0 <_dtoa_r+0x648>)
 800d898:	f7f2 fec6 	bl	8000628 <__aeabi_dmul>
 800d89c:	4680      	mov	r8, r0
 800d89e:	4689      	mov	r9, r1
 800d8a0:	e7bd      	b.n	800d81e <_dtoa_r+0x5b6>
 800d8a2:	bf00      	nop
 800d8a4:	0800f9e8 	.word	0x0800f9e8
 800d8a8:	0800f9c0 	.word	0x0800f9c0
 800d8ac:	3ff00000 	.word	0x3ff00000
 800d8b0:	40240000 	.word	0x40240000
 800d8b4:	401c0000 	.word	0x401c0000
 800d8b8:	40140000 	.word	0x40140000
 800d8bc:	3fe00000 	.word	0x3fe00000
 800d8c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d8c4:	9d00      	ldr	r5, [sp, #0]
 800d8c6:	4642      	mov	r2, r8
 800d8c8:	464b      	mov	r3, r9
 800d8ca:	4630      	mov	r0, r6
 800d8cc:	4639      	mov	r1, r7
 800d8ce:	f7f2 ffd5 	bl	800087c <__aeabi_ddiv>
 800d8d2:	f7f3 f959 	bl	8000b88 <__aeabi_d2iz>
 800d8d6:	9001      	str	r0, [sp, #4]
 800d8d8:	f7f2 fe3c 	bl	8000554 <__aeabi_i2d>
 800d8dc:	4642      	mov	r2, r8
 800d8de:	464b      	mov	r3, r9
 800d8e0:	f7f2 fea2 	bl	8000628 <__aeabi_dmul>
 800d8e4:	4602      	mov	r2, r0
 800d8e6:	460b      	mov	r3, r1
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	4639      	mov	r1, r7
 800d8ec:	f7f2 fce4 	bl	80002b8 <__aeabi_dsub>
 800d8f0:	9e01      	ldr	r6, [sp, #4]
 800d8f2:	9f04      	ldr	r7, [sp, #16]
 800d8f4:	3630      	adds	r6, #48	; 0x30
 800d8f6:	f805 6b01 	strb.w	r6, [r5], #1
 800d8fa:	9e00      	ldr	r6, [sp, #0]
 800d8fc:	1bae      	subs	r6, r5, r6
 800d8fe:	42b7      	cmp	r7, r6
 800d900:	4602      	mov	r2, r0
 800d902:	460b      	mov	r3, r1
 800d904:	d134      	bne.n	800d970 <_dtoa_r+0x708>
 800d906:	f7f2 fcd9 	bl	80002bc <__adddf3>
 800d90a:	4642      	mov	r2, r8
 800d90c:	464b      	mov	r3, r9
 800d90e:	4606      	mov	r6, r0
 800d910:	460f      	mov	r7, r1
 800d912:	f7f3 f919 	bl	8000b48 <__aeabi_dcmpgt>
 800d916:	b9c8      	cbnz	r0, 800d94c <_dtoa_r+0x6e4>
 800d918:	4642      	mov	r2, r8
 800d91a:	464b      	mov	r3, r9
 800d91c:	4630      	mov	r0, r6
 800d91e:	4639      	mov	r1, r7
 800d920:	f7f3 f8ea 	bl	8000af8 <__aeabi_dcmpeq>
 800d924:	b110      	cbz	r0, 800d92c <_dtoa_r+0x6c4>
 800d926:	9b01      	ldr	r3, [sp, #4]
 800d928:	07db      	lsls	r3, r3, #31
 800d92a:	d40f      	bmi.n	800d94c <_dtoa_r+0x6e4>
 800d92c:	4651      	mov	r1, sl
 800d92e:	4620      	mov	r0, r4
 800d930:	f000 fd86 	bl	800e440 <_Bfree>
 800d934:	2300      	movs	r3, #0
 800d936:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d938:	702b      	strb	r3, [r5, #0]
 800d93a:	f10b 0301 	add.w	r3, fp, #1
 800d93e:	6013      	str	r3, [r2, #0]
 800d940:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d942:	2b00      	cmp	r3, #0
 800d944:	f43f ace2 	beq.w	800d30c <_dtoa_r+0xa4>
 800d948:	601d      	str	r5, [r3, #0]
 800d94a:	e4df      	b.n	800d30c <_dtoa_r+0xa4>
 800d94c:	465f      	mov	r7, fp
 800d94e:	462b      	mov	r3, r5
 800d950:	461d      	mov	r5, r3
 800d952:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d956:	2a39      	cmp	r2, #57	; 0x39
 800d958:	d106      	bne.n	800d968 <_dtoa_r+0x700>
 800d95a:	9a00      	ldr	r2, [sp, #0]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d1f7      	bne.n	800d950 <_dtoa_r+0x6e8>
 800d960:	9900      	ldr	r1, [sp, #0]
 800d962:	2230      	movs	r2, #48	; 0x30
 800d964:	3701      	adds	r7, #1
 800d966:	700a      	strb	r2, [r1, #0]
 800d968:	781a      	ldrb	r2, [r3, #0]
 800d96a:	3201      	adds	r2, #1
 800d96c:	701a      	strb	r2, [r3, #0]
 800d96e:	e790      	b.n	800d892 <_dtoa_r+0x62a>
 800d970:	4ba3      	ldr	r3, [pc, #652]	; (800dc00 <_dtoa_r+0x998>)
 800d972:	2200      	movs	r2, #0
 800d974:	f7f2 fe58 	bl	8000628 <__aeabi_dmul>
 800d978:	2200      	movs	r2, #0
 800d97a:	2300      	movs	r3, #0
 800d97c:	4606      	mov	r6, r0
 800d97e:	460f      	mov	r7, r1
 800d980:	f7f3 f8ba 	bl	8000af8 <__aeabi_dcmpeq>
 800d984:	2800      	cmp	r0, #0
 800d986:	d09e      	beq.n	800d8c6 <_dtoa_r+0x65e>
 800d988:	e7d0      	b.n	800d92c <_dtoa_r+0x6c4>
 800d98a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d98c:	2a00      	cmp	r2, #0
 800d98e:	f000 80ca 	beq.w	800db26 <_dtoa_r+0x8be>
 800d992:	9a07      	ldr	r2, [sp, #28]
 800d994:	2a01      	cmp	r2, #1
 800d996:	f300 80ad 	bgt.w	800daf4 <_dtoa_r+0x88c>
 800d99a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d99c:	2a00      	cmp	r2, #0
 800d99e:	f000 80a5 	beq.w	800daec <_dtoa_r+0x884>
 800d9a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d9a6:	9e08      	ldr	r6, [sp, #32]
 800d9a8:	9d05      	ldr	r5, [sp, #20]
 800d9aa:	9a05      	ldr	r2, [sp, #20]
 800d9ac:	441a      	add	r2, r3
 800d9ae:	9205      	str	r2, [sp, #20]
 800d9b0:	9a06      	ldr	r2, [sp, #24]
 800d9b2:	2101      	movs	r1, #1
 800d9b4:	441a      	add	r2, r3
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	9206      	str	r2, [sp, #24]
 800d9ba:	f000 fdf7 	bl	800e5ac <__i2b>
 800d9be:	4607      	mov	r7, r0
 800d9c0:	b165      	cbz	r5, 800d9dc <_dtoa_r+0x774>
 800d9c2:	9b06      	ldr	r3, [sp, #24]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	dd09      	ble.n	800d9dc <_dtoa_r+0x774>
 800d9c8:	42ab      	cmp	r3, r5
 800d9ca:	9a05      	ldr	r2, [sp, #20]
 800d9cc:	bfa8      	it	ge
 800d9ce:	462b      	movge	r3, r5
 800d9d0:	1ad2      	subs	r2, r2, r3
 800d9d2:	9205      	str	r2, [sp, #20]
 800d9d4:	9a06      	ldr	r2, [sp, #24]
 800d9d6:	1aed      	subs	r5, r5, r3
 800d9d8:	1ad3      	subs	r3, r2, r3
 800d9da:	9306      	str	r3, [sp, #24]
 800d9dc:	9b08      	ldr	r3, [sp, #32]
 800d9de:	b1f3      	cbz	r3, 800da1e <_dtoa_r+0x7b6>
 800d9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	f000 80a3 	beq.w	800db2e <_dtoa_r+0x8c6>
 800d9e8:	2e00      	cmp	r6, #0
 800d9ea:	dd10      	ble.n	800da0e <_dtoa_r+0x7a6>
 800d9ec:	4639      	mov	r1, r7
 800d9ee:	4632      	mov	r2, r6
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	f000 fe9b 	bl	800e72c <__pow5mult>
 800d9f6:	4652      	mov	r2, sl
 800d9f8:	4601      	mov	r1, r0
 800d9fa:	4607      	mov	r7, r0
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	f000 fdeb 	bl	800e5d8 <__multiply>
 800da02:	4651      	mov	r1, sl
 800da04:	4680      	mov	r8, r0
 800da06:	4620      	mov	r0, r4
 800da08:	f000 fd1a 	bl	800e440 <_Bfree>
 800da0c:	46c2      	mov	sl, r8
 800da0e:	9b08      	ldr	r3, [sp, #32]
 800da10:	1b9a      	subs	r2, r3, r6
 800da12:	d004      	beq.n	800da1e <_dtoa_r+0x7b6>
 800da14:	4651      	mov	r1, sl
 800da16:	4620      	mov	r0, r4
 800da18:	f000 fe88 	bl	800e72c <__pow5mult>
 800da1c:	4682      	mov	sl, r0
 800da1e:	2101      	movs	r1, #1
 800da20:	4620      	mov	r0, r4
 800da22:	f000 fdc3 	bl	800e5ac <__i2b>
 800da26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da28:	2b00      	cmp	r3, #0
 800da2a:	4606      	mov	r6, r0
 800da2c:	f340 8081 	ble.w	800db32 <_dtoa_r+0x8ca>
 800da30:	461a      	mov	r2, r3
 800da32:	4601      	mov	r1, r0
 800da34:	4620      	mov	r0, r4
 800da36:	f000 fe79 	bl	800e72c <__pow5mult>
 800da3a:	9b07      	ldr	r3, [sp, #28]
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	4606      	mov	r6, r0
 800da40:	dd7a      	ble.n	800db38 <_dtoa_r+0x8d0>
 800da42:	f04f 0800 	mov.w	r8, #0
 800da46:	6933      	ldr	r3, [r6, #16]
 800da48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800da4c:	6918      	ldr	r0, [r3, #16]
 800da4e:	f000 fd5f 	bl	800e510 <__hi0bits>
 800da52:	f1c0 0020 	rsb	r0, r0, #32
 800da56:	9b06      	ldr	r3, [sp, #24]
 800da58:	4418      	add	r0, r3
 800da5a:	f010 001f 	ands.w	r0, r0, #31
 800da5e:	f000 8094 	beq.w	800db8a <_dtoa_r+0x922>
 800da62:	f1c0 0320 	rsb	r3, r0, #32
 800da66:	2b04      	cmp	r3, #4
 800da68:	f340 8085 	ble.w	800db76 <_dtoa_r+0x90e>
 800da6c:	9b05      	ldr	r3, [sp, #20]
 800da6e:	f1c0 001c 	rsb	r0, r0, #28
 800da72:	4403      	add	r3, r0
 800da74:	9305      	str	r3, [sp, #20]
 800da76:	9b06      	ldr	r3, [sp, #24]
 800da78:	4403      	add	r3, r0
 800da7a:	4405      	add	r5, r0
 800da7c:	9306      	str	r3, [sp, #24]
 800da7e:	9b05      	ldr	r3, [sp, #20]
 800da80:	2b00      	cmp	r3, #0
 800da82:	dd05      	ble.n	800da90 <_dtoa_r+0x828>
 800da84:	4651      	mov	r1, sl
 800da86:	461a      	mov	r2, r3
 800da88:	4620      	mov	r0, r4
 800da8a:	f000 fea9 	bl	800e7e0 <__lshift>
 800da8e:	4682      	mov	sl, r0
 800da90:	9b06      	ldr	r3, [sp, #24]
 800da92:	2b00      	cmp	r3, #0
 800da94:	dd05      	ble.n	800daa2 <_dtoa_r+0x83a>
 800da96:	4631      	mov	r1, r6
 800da98:	461a      	mov	r2, r3
 800da9a:	4620      	mov	r0, r4
 800da9c:	f000 fea0 	bl	800e7e0 <__lshift>
 800daa0:	4606      	mov	r6, r0
 800daa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d072      	beq.n	800db8e <_dtoa_r+0x926>
 800daa8:	4631      	mov	r1, r6
 800daaa:	4650      	mov	r0, sl
 800daac:	f000 ff04 	bl	800e8b8 <__mcmp>
 800dab0:	2800      	cmp	r0, #0
 800dab2:	da6c      	bge.n	800db8e <_dtoa_r+0x926>
 800dab4:	2300      	movs	r3, #0
 800dab6:	4651      	mov	r1, sl
 800dab8:	220a      	movs	r2, #10
 800daba:	4620      	mov	r0, r4
 800dabc:	f000 fce2 	bl	800e484 <__multadd>
 800dac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dac2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dac6:	4682      	mov	sl, r0
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f000 81b0 	beq.w	800de2e <_dtoa_r+0xbc6>
 800dace:	2300      	movs	r3, #0
 800dad0:	4639      	mov	r1, r7
 800dad2:	220a      	movs	r2, #10
 800dad4:	4620      	mov	r0, r4
 800dad6:	f000 fcd5 	bl	800e484 <__multadd>
 800dada:	9b01      	ldr	r3, [sp, #4]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	4607      	mov	r7, r0
 800dae0:	f300 8096 	bgt.w	800dc10 <_dtoa_r+0x9a8>
 800dae4:	9b07      	ldr	r3, [sp, #28]
 800dae6:	2b02      	cmp	r3, #2
 800dae8:	dc59      	bgt.n	800db9e <_dtoa_r+0x936>
 800daea:	e091      	b.n	800dc10 <_dtoa_r+0x9a8>
 800daec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800daee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800daf2:	e758      	b.n	800d9a6 <_dtoa_r+0x73e>
 800daf4:	9b04      	ldr	r3, [sp, #16]
 800daf6:	1e5e      	subs	r6, r3, #1
 800daf8:	9b08      	ldr	r3, [sp, #32]
 800dafa:	42b3      	cmp	r3, r6
 800dafc:	bfbf      	itttt	lt
 800dafe:	9b08      	ldrlt	r3, [sp, #32]
 800db00:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800db02:	9608      	strlt	r6, [sp, #32]
 800db04:	1af3      	sublt	r3, r6, r3
 800db06:	bfb4      	ite	lt
 800db08:	18d2      	addlt	r2, r2, r3
 800db0a:	1b9e      	subge	r6, r3, r6
 800db0c:	9b04      	ldr	r3, [sp, #16]
 800db0e:	bfbc      	itt	lt
 800db10:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800db12:	2600      	movlt	r6, #0
 800db14:	2b00      	cmp	r3, #0
 800db16:	bfb7      	itett	lt
 800db18:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800db1c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800db20:	1a9d      	sublt	r5, r3, r2
 800db22:	2300      	movlt	r3, #0
 800db24:	e741      	b.n	800d9aa <_dtoa_r+0x742>
 800db26:	9e08      	ldr	r6, [sp, #32]
 800db28:	9d05      	ldr	r5, [sp, #20]
 800db2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800db2c:	e748      	b.n	800d9c0 <_dtoa_r+0x758>
 800db2e:	9a08      	ldr	r2, [sp, #32]
 800db30:	e770      	b.n	800da14 <_dtoa_r+0x7ac>
 800db32:	9b07      	ldr	r3, [sp, #28]
 800db34:	2b01      	cmp	r3, #1
 800db36:	dc19      	bgt.n	800db6c <_dtoa_r+0x904>
 800db38:	9b02      	ldr	r3, [sp, #8]
 800db3a:	b9bb      	cbnz	r3, 800db6c <_dtoa_r+0x904>
 800db3c:	9b03      	ldr	r3, [sp, #12]
 800db3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db42:	b99b      	cbnz	r3, 800db6c <_dtoa_r+0x904>
 800db44:	9b03      	ldr	r3, [sp, #12]
 800db46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db4a:	0d1b      	lsrs	r3, r3, #20
 800db4c:	051b      	lsls	r3, r3, #20
 800db4e:	b183      	cbz	r3, 800db72 <_dtoa_r+0x90a>
 800db50:	9b05      	ldr	r3, [sp, #20]
 800db52:	3301      	adds	r3, #1
 800db54:	9305      	str	r3, [sp, #20]
 800db56:	9b06      	ldr	r3, [sp, #24]
 800db58:	3301      	adds	r3, #1
 800db5a:	9306      	str	r3, [sp, #24]
 800db5c:	f04f 0801 	mov.w	r8, #1
 800db60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db62:	2b00      	cmp	r3, #0
 800db64:	f47f af6f 	bne.w	800da46 <_dtoa_r+0x7de>
 800db68:	2001      	movs	r0, #1
 800db6a:	e774      	b.n	800da56 <_dtoa_r+0x7ee>
 800db6c:	f04f 0800 	mov.w	r8, #0
 800db70:	e7f6      	b.n	800db60 <_dtoa_r+0x8f8>
 800db72:	4698      	mov	r8, r3
 800db74:	e7f4      	b.n	800db60 <_dtoa_r+0x8f8>
 800db76:	d082      	beq.n	800da7e <_dtoa_r+0x816>
 800db78:	9a05      	ldr	r2, [sp, #20]
 800db7a:	331c      	adds	r3, #28
 800db7c:	441a      	add	r2, r3
 800db7e:	9205      	str	r2, [sp, #20]
 800db80:	9a06      	ldr	r2, [sp, #24]
 800db82:	441a      	add	r2, r3
 800db84:	441d      	add	r5, r3
 800db86:	9206      	str	r2, [sp, #24]
 800db88:	e779      	b.n	800da7e <_dtoa_r+0x816>
 800db8a:	4603      	mov	r3, r0
 800db8c:	e7f4      	b.n	800db78 <_dtoa_r+0x910>
 800db8e:	9b04      	ldr	r3, [sp, #16]
 800db90:	2b00      	cmp	r3, #0
 800db92:	dc37      	bgt.n	800dc04 <_dtoa_r+0x99c>
 800db94:	9b07      	ldr	r3, [sp, #28]
 800db96:	2b02      	cmp	r3, #2
 800db98:	dd34      	ble.n	800dc04 <_dtoa_r+0x99c>
 800db9a:	9b04      	ldr	r3, [sp, #16]
 800db9c:	9301      	str	r3, [sp, #4]
 800db9e:	9b01      	ldr	r3, [sp, #4]
 800dba0:	b963      	cbnz	r3, 800dbbc <_dtoa_r+0x954>
 800dba2:	4631      	mov	r1, r6
 800dba4:	2205      	movs	r2, #5
 800dba6:	4620      	mov	r0, r4
 800dba8:	f000 fc6c 	bl	800e484 <__multadd>
 800dbac:	4601      	mov	r1, r0
 800dbae:	4606      	mov	r6, r0
 800dbb0:	4650      	mov	r0, sl
 800dbb2:	f000 fe81 	bl	800e8b8 <__mcmp>
 800dbb6:	2800      	cmp	r0, #0
 800dbb8:	f73f adbb 	bgt.w	800d732 <_dtoa_r+0x4ca>
 800dbbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbbe:	9d00      	ldr	r5, [sp, #0]
 800dbc0:	ea6f 0b03 	mvn.w	fp, r3
 800dbc4:	f04f 0800 	mov.w	r8, #0
 800dbc8:	4631      	mov	r1, r6
 800dbca:	4620      	mov	r0, r4
 800dbcc:	f000 fc38 	bl	800e440 <_Bfree>
 800dbd0:	2f00      	cmp	r7, #0
 800dbd2:	f43f aeab 	beq.w	800d92c <_dtoa_r+0x6c4>
 800dbd6:	f1b8 0f00 	cmp.w	r8, #0
 800dbda:	d005      	beq.n	800dbe8 <_dtoa_r+0x980>
 800dbdc:	45b8      	cmp	r8, r7
 800dbde:	d003      	beq.n	800dbe8 <_dtoa_r+0x980>
 800dbe0:	4641      	mov	r1, r8
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	f000 fc2c 	bl	800e440 <_Bfree>
 800dbe8:	4639      	mov	r1, r7
 800dbea:	4620      	mov	r0, r4
 800dbec:	f000 fc28 	bl	800e440 <_Bfree>
 800dbf0:	e69c      	b.n	800d92c <_dtoa_r+0x6c4>
 800dbf2:	2600      	movs	r6, #0
 800dbf4:	4637      	mov	r7, r6
 800dbf6:	e7e1      	b.n	800dbbc <_dtoa_r+0x954>
 800dbf8:	46bb      	mov	fp, r7
 800dbfa:	4637      	mov	r7, r6
 800dbfc:	e599      	b.n	800d732 <_dtoa_r+0x4ca>
 800dbfe:	bf00      	nop
 800dc00:	40240000 	.word	0x40240000
 800dc04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	f000 80c8 	beq.w	800dd9c <_dtoa_r+0xb34>
 800dc0c:	9b04      	ldr	r3, [sp, #16]
 800dc0e:	9301      	str	r3, [sp, #4]
 800dc10:	2d00      	cmp	r5, #0
 800dc12:	dd05      	ble.n	800dc20 <_dtoa_r+0x9b8>
 800dc14:	4639      	mov	r1, r7
 800dc16:	462a      	mov	r2, r5
 800dc18:	4620      	mov	r0, r4
 800dc1a:	f000 fde1 	bl	800e7e0 <__lshift>
 800dc1e:	4607      	mov	r7, r0
 800dc20:	f1b8 0f00 	cmp.w	r8, #0
 800dc24:	d05b      	beq.n	800dcde <_dtoa_r+0xa76>
 800dc26:	6879      	ldr	r1, [r7, #4]
 800dc28:	4620      	mov	r0, r4
 800dc2a:	f000 fbc9 	bl	800e3c0 <_Balloc>
 800dc2e:	4605      	mov	r5, r0
 800dc30:	b928      	cbnz	r0, 800dc3e <_dtoa_r+0x9d6>
 800dc32:	4b83      	ldr	r3, [pc, #524]	; (800de40 <_dtoa_r+0xbd8>)
 800dc34:	4602      	mov	r2, r0
 800dc36:	f240 21ef 	movw	r1, #751	; 0x2ef
 800dc3a:	f7ff bb2e 	b.w	800d29a <_dtoa_r+0x32>
 800dc3e:	693a      	ldr	r2, [r7, #16]
 800dc40:	3202      	adds	r2, #2
 800dc42:	0092      	lsls	r2, r2, #2
 800dc44:	f107 010c 	add.w	r1, r7, #12
 800dc48:	300c      	adds	r0, #12
 800dc4a:	f7ff fa75 	bl	800d138 <memcpy>
 800dc4e:	2201      	movs	r2, #1
 800dc50:	4629      	mov	r1, r5
 800dc52:	4620      	mov	r0, r4
 800dc54:	f000 fdc4 	bl	800e7e0 <__lshift>
 800dc58:	9b00      	ldr	r3, [sp, #0]
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	9304      	str	r3, [sp, #16]
 800dc5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc62:	4413      	add	r3, r2
 800dc64:	9308      	str	r3, [sp, #32]
 800dc66:	9b02      	ldr	r3, [sp, #8]
 800dc68:	f003 0301 	and.w	r3, r3, #1
 800dc6c:	46b8      	mov	r8, r7
 800dc6e:	9306      	str	r3, [sp, #24]
 800dc70:	4607      	mov	r7, r0
 800dc72:	9b04      	ldr	r3, [sp, #16]
 800dc74:	4631      	mov	r1, r6
 800dc76:	3b01      	subs	r3, #1
 800dc78:	4650      	mov	r0, sl
 800dc7a:	9301      	str	r3, [sp, #4]
 800dc7c:	f7ff fa6a 	bl	800d154 <quorem>
 800dc80:	4641      	mov	r1, r8
 800dc82:	9002      	str	r0, [sp, #8]
 800dc84:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dc88:	4650      	mov	r0, sl
 800dc8a:	f000 fe15 	bl	800e8b8 <__mcmp>
 800dc8e:	463a      	mov	r2, r7
 800dc90:	9005      	str	r0, [sp, #20]
 800dc92:	4631      	mov	r1, r6
 800dc94:	4620      	mov	r0, r4
 800dc96:	f000 fe2b 	bl	800e8f0 <__mdiff>
 800dc9a:	68c2      	ldr	r2, [r0, #12]
 800dc9c:	4605      	mov	r5, r0
 800dc9e:	bb02      	cbnz	r2, 800dce2 <_dtoa_r+0xa7a>
 800dca0:	4601      	mov	r1, r0
 800dca2:	4650      	mov	r0, sl
 800dca4:	f000 fe08 	bl	800e8b8 <__mcmp>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	4629      	mov	r1, r5
 800dcac:	4620      	mov	r0, r4
 800dcae:	9209      	str	r2, [sp, #36]	; 0x24
 800dcb0:	f000 fbc6 	bl	800e440 <_Bfree>
 800dcb4:	9b07      	ldr	r3, [sp, #28]
 800dcb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcb8:	9d04      	ldr	r5, [sp, #16]
 800dcba:	ea43 0102 	orr.w	r1, r3, r2
 800dcbe:	9b06      	ldr	r3, [sp, #24]
 800dcc0:	4319      	orrs	r1, r3
 800dcc2:	d110      	bne.n	800dce6 <_dtoa_r+0xa7e>
 800dcc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dcc8:	d029      	beq.n	800dd1e <_dtoa_r+0xab6>
 800dcca:	9b05      	ldr	r3, [sp, #20]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	dd02      	ble.n	800dcd6 <_dtoa_r+0xa6e>
 800dcd0:	9b02      	ldr	r3, [sp, #8]
 800dcd2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800dcd6:	9b01      	ldr	r3, [sp, #4]
 800dcd8:	f883 9000 	strb.w	r9, [r3]
 800dcdc:	e774      	b.n	800dbc8 <_dtoa_r+0x960>
 800dcde:	4638      	mov	r0, r7
 800dce0:	e7ba      	b.n	800dc58 <_dtoa_r+0x9f0>
 800dce2:	2201      	movs	r2, #1
 800dce4:	e7e1      	b.n	800dcaa <_dtoa_r+0xa42>
 800dce6:	9b05      	ldr	r3, [sp, #20]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	db04      	blt.n	800dcf6 <_dtoa_r+0xa8e>
 800dcec:	9907      	ldr	r1, [sp, #28]
 800dcee:	430b      	orrs	r3, r1
 800dcf0:	9906      	ldr	r1, [sp, #24]
 800dcf2:	430b      	orrs	r3, r1
 800dcf4:	d120      	bne.n	800dd38 <_dtoa_r+0xad0>
 800dcf6:	2a00      	cmp	r2, #0
 800dcf8:	dded      	ble.n	800dcd6 <_dtoa_r+0xa6e>
 800dcfa:	4651      	mov	r1, sl
 800dcfc:	2201      	movs	r2, #1
 800dcfe:	4620      	mov	r0, r4
 800dd00:	f000 fd6e 	bl	800e7e0 <__lshift>
 800dd04:	4631      	mov	r1, r6
 800dd06:	4682      	mov	sl, r0
 800dd08:	f000 fdd6 	bl	800e8b8 <__mcmp>
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	dc03      	bgt.n	800dd18 <_dtoa_r+0xab0>
 800dd10:	d1e1      	bne.n	800dcd6 <_dtoa_r+0xa6e>
 800dd12:	f019 0f01 	tst.w	r9, #1
 800dd16:	d0de      	beq.n	800dcd6 <_dtoa_r+0xa6e>
 800dd18:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dd1c:	d1d8      	bne.n	800dcd0 <_dtoa_r+0xa68>
 800dd1e:	9a01      	ldr	r2, [sp, #4]
 800dd20:	2339      	movs	r3, #57	; 0x39
 800dd22:	7013      	strb	r3, [r2, #0]
 800dd24:	462b      	mov	r3, r5
 800dd26:	461d      	mov	r5, r3
 800dd28:	3b01      	subs	r3, #1
 800dd2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dd2e:	2a39      	cmp	r2, #57	; 0x39
 800dd30:	d06c      	beq.n	800de0c <_dtoa_r+0xba4>
 800dd32:	3201      	adds	r2, #1
 800dd34:	701a      	strb	r2, [r3, #0]
 800dd36:	e747      	b.n	800dbc8 <_dtoa_r+0x960>
 800dd38:	2a00      	cmp	r2, #0
 800dd3a:	dd07      	ble.n	800dd4c <_dtoa_r+0xae4>
 800dd3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dd40:	d0ed      	beq.n	800dd1e <_dtoa_r+0xab6>
 800dd42:	9a01      	ldr	r2, [sp, #4]
 800dd44:	f109 0301 	add.w	r3, r9, #1
 800dd48:	7013      	strb	r3, [r2, #0]
 800dd4a:	e73d      	b.n	800dbc8 <_dtoa_r+0x960>
 800dd4c:	9b04      	ldr	r3, [sp, #16]
 800dd4e:	9a08      	ldr	r2, [sp, #32]
 800dd50:	f803 9c01 	strb.w	r9, [r3, #-1]
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d043      	beq.n	800dde0 <_dtoa_r+0xb78>
 800dd58:	4651      	mov	r1, sl
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	220a      	movs	r2, #10
 800dd5e:	4620      	mov	r0, r4
 800dd60:	f000 fb90 	bl	800e484 <__multadd>
 800dd64:	45b8      	cmp	r8, r7
 800dd66:	4682      	mov	sl, r0
 800dd68:	f04f 0300 	mov.w	r3, #0
 800dd6c:	f04f 020a 	mov.w	r2, #10
 800dd70:	4641      	mov	r1, r8
 800dd72:	4620      	mov	r0, r4
 800dd74:	d107      	bne.n	800dd86 <_dtoa_r+0xb1e>
 800dd76:	f000 fb85 	bl	800e484 <__multadd>
 800dd7a:	4680      	mov	r8, r0
 800dd7c:	4607      	mov	r7, r0
 800dd7e:	9b04      	ldr	r3, [sp, #16]
 800dd80:	3301      	adds	r3, #1
 800dd82:	9304      	str	r3, [sp, #16]
 800dd84:	e775      	b.n	800dc72 <_dtoa_r+0xa0a>
 800dd86:	f000 fb7d 	bl	800e484 <__multadd>
 800dd8a:	4639      	mov	r1, r7
 800dd8c:	4680      	mov	r8, r0
 800dd8e:	2300      	movs	r3, #0
 800dd90:	220a      	movs	r2, #10
 800dd92:	4620      	mov	r0, r4
 800dd94:	f000 fb76 	bl	800e484 <__multadd>
 800dd98:	4607      	mov	r7, r0
 800dd9a:	e7f0      	b.n	800dd7e <_dtoa_r+0xb16>
 800dd9c:	9b04      	ldr	r3, [sp, #16]
 800dd9e:	9301      	str	r3, [sp, #4]
 800dda0:	9d00      	ldr	r5, [sp, #0]
 800dda2:	4631      	mov	r1, r6
 800dda4:	4650      	mov	r0, sl
 800dda6:	f7ff f9d5 	bl	800d154 <quorem>
 800ddaa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ddae:	9b00      	ldr	r3, [sp, #0]
 800ddb0:	f805 9b01 	strb.w	r9, [r5], #1
 800ddb4:	1aea      	subs	r2, r5, r3
 800ddb6:	9b01      	ldr	r3, [sp, #4]
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	dd07      	ble.n	800ddcc <_dtoa_r+0xb64>
 800ddbc:	4651      	mov	r1, sl
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	220a      	movs	r2, #10
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	f000 fb5e 	bl	800e484 <__multadd>
 800ddc8:	4682      	mov	sl, r0
 800ddca:	e7ea      	b.n	800dda2 <_dtoa_r+0xb3a>
 800ddcc:	9b01      	ldr	r3, [sp, #4]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	bfc8      	it	gt
 800ddd2:	461d      	movgt	r5, r3
 800ddd4:	9b00      	ldr	r3, [sp, #0]
 800ddd6:	bfd8      	it	le
 800ddd8:	2501      	movle	r5, #1
 800ddda:	441d      	add	r5, r3
 800dddc:	f04f 0800 	mov.w	r8, #0
 800dde0:	4651      	mov	r1, sl
 800dde2:	2201      	movs	r2, #1
 800dde4:	4620      	mov	r0, r4
 800dde6:	f000 fcfb 	bl	800e7e0 <__lshift>
 800ddea:	4631      	mov	r1, r6
 800ddec:	4682      	mov	sl, r0
 800ddee:	f000 fd63 	bl	800e8b8 <__mcmp>
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	dc96      	bgt.n	800dd24 <_dtoa_r+0xabc>
 800ddf6:	d102      	bne.n	800ddfe <_dtoa_r+0xb96>
 800ddf8:	f019 0f01 	tst.w	r9, #1
 800ddfc:	d192      	bne.n	800dd24 <_dtoa_r+0xabc>
 800ddfe:	462b      	mov	r3, r5
 800de00:	461d      	mov	r5, r3
 800de02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de06:	2a30      	cmp	r2, #48	; 0x30
 800de08:	d0fa      	beq.n	800de00 <_dtoa_r+0xb98>
 800de0a:	e6dd      	b.n	800dbc8 <_dtoa_r+0x960>
 800de0c:	9a00      	ldr	r2, [sp, #0]
 800de0e:	429a      	cmp	r2, r3
 800de10:	d189      	bne.n	800dd26 <_dtoa_r+0xabe>
 800de12:	f10b 0b01 	add.w	fp, fp, #1
 800de16:	2331      	movs	r3, #49	; 0x31
 800de18:	e796      	b.n	800dd48 <_dtoa_r+0xae0>
 800de1a:	4b0a      	ldr	r3, [pc, #40]	; (800de44 <_dtoa_r+0xbdc>)
 800de1c:	f7ff ba99 	b.w	800d352 <_dtoa_r+0xea>
 800de20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de22:	2b00      	cmp	r3, #0
 800de24:	f47f aa6d 	bne.w	800d302 <_dtoa_r+0x9a>
 800de28:	4b07      	ldr	r3, [pc, #28]	; (800de48 <_dtoa_r+0xbe0>)
 800de2a:	f7ff ba92 	b.w	800d352 <_dtoa_r+0xea>
 800de2e:	9b01      	ldr	r3, [sp, #4]
 800de30:	2b00      	cmp	r3, #0
 800de32:	dcb5      	bgt.n	800dda0 <_dtoa_r+0xb38>
 800de34:	9b07      	ldr	r3, [sp, #28]
 800de36:	2b02      	cmp	r3, #2
 800de38:	f73f aeb1 	bgt.w	800db9e <_dtoa_r+0x936>
 800de3c:	e7b0      	b.n	800dda0 <_dtoa_r+0xb38>
 800de3e:	bf00      	nop
 800de40:	0800f940 	.word	0x0800f940
 800de44:	0800f8a0 	.word	0x0800f8a0
 800de48:	0800f8c4 	.word	0x0800f8c4

0800de4c <__ssputs_r>:
 800de4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de50:	688e      	ldr	r6, [r1, #8]
 800de52:	461f      	mov	r7, r3
 800de54:	42be      	cmp	r6, r7
 800de56:	680b      	ldr	r3, [r1, #0]
 800de58:	4682      	mov	sl, r0
 800de5a:	460c      	mov	r4, r1
 800de5c:	4690      	mov	r8, r2
 800de5e:	d82c      	bhi.n	800deba <__ssputs_r+0x6e>
 800de60:	898a      	ldrh	r2, [r1, #12]
 800de62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800de66:	d026      	beq.n	800deb6 <__ssputs_r+0x6a>
 800de68:	6965      	ldr	r5, [r4, #20]
 800de6a:	6909      	ldr	r1, [r1, #16]
 800de6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de70:	eba3 0901 	sub.w	r9, r3, r1
 800de74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800de78:	1c7b      	adds	r3, r7, #1
 800de7a:	444b      	add	r3, r9
 800de7c:	106d      	asrs	r5, r5, #1
 800de7e:	429d      	cmp	r5, r3
 800de80:	bf38      	it	cc
 800de82:	461d      	movcc	r5, r3
 800de84:	0553      	lsls	r3, r2, #21
 800de86:	d527      	bpl.n	800ded8 <__ssputs_r+0x8c>
 800de88:	4629      	mov	r1, r5
 800de8a:	f000 f95f 	bl	800e14c <_malloc_r>
 800de8e:	4606      	mov	r6, r0
 800de90:	b360      	cbz	r0, 800deec <__ssputs_r+0xa0>
 800de92:	6921      	ldr	r1, [r4, #16]
 800de94:	464a      	mov	r2, r9
 800de96:	f7ff f94f 	bl	800d138 <memcpy>
 800de9a:	89a3      	ldrh	r3, [r4, #12]
 800de9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dea4:	81a3      	strh	r3, [r4, #12]
 800dea6:	6126      	str	r6, [r4, #16]
 800dea8:	6165      	str	r5, [r4, #20]
 800deaa:	444e      	add	r6, r9
 800deac:	eba5 0509 	sub.w	r5, r5, r9
 800deb0:	6026      	str	r6, [r4, #0]
 800deb2:	60a5      	str	r5, [r4, #8]
 800deb4:	463e      	mov	r6, r7
 800deb6:	42be      	cmp	r6, r7
 800deb8:	d900      	bls.n	800debc <__ssputs_r+0x70>
 800deba:	463e      	mov	r6, r7
 800debc:	6820      	ldr	r0, [r4, #0]
 800debe:	4632      	mov	r2, r6
 800dec0:	4641      	mov	r1, r8
 800dec2:	f000 fe6b 	bl	800eb9c <memmove>
 800dec6:	68a3      	ldr	r3, [r4, #8]
 800dec8:	1b9b      	subs	r3, r3, r6
 800deca:	60a3      	str	r3, [r4, #8]
 800decc:	6823      	ldr	r3, [r4, #0]
 800dece:	4433      	add	r3, r6
 800ded0:	6023      	str	r3, [r4, #0]
 800ded2:	2000      	movs	r0, #0
 800ded4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ded8:	462a      	mov	r2, r5
 800deda:	f000 fe30 	bl	800eb3e <_realloc_r>
 800dede:	4606      	mov	r6, r0
 800dee0:	2800      	cmp	r0, #0
 800dee2:	d1e0      	bne.n	800dea6 <__ssputs_r+0x5a>
 800dee4:	6921      	ldr	r1, [r4, #16]
 800dee6:	4650      	mov	r0, sl
 800dee8:	f000 fefc 	bl	800ece4 <_free_r>
 800deec:	230c      	movs	r3, #12
 800deee:	f8ca 3000 	str.w	r3, [sl]
 800def2:	89a3      	ldrh	r3, [r4, #12]
 800def4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800def8:	81a3      	strh	r3, [r4, #12]
 800defa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800defe:	e7e9      	b.n	800ded4 <__ssputs_r+0x88>

0800df00 <_svfiprintf_r>:
 800df00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df04:	4698      	mov	r8, r3
 800df06:	898b      	ldrh	r3, [r1, #12]
 800df08:	061b      	lsls	r3, r3, #24
 800df0a:	b09d      	sub	sp, #116	; 0x74
 800df0c:	4607      	mov	r7, r0
 800df0e:	460d      	mov	r5, r1
 800df10:	4614      	mov	r4, r2
 800df12:	d50e      	bpl.n	800df32 <_svfiprintf_r+0x32>
 800df14:	690b      	ldr	r3, [r1, #16]
 800df16:	b963      	cbnz	r3, 800df32 <_svfiprintf_r+0x32>
 800df18:	2140      	movs	r1, #64	; 0x40
 800df1a:	f000 f917 	bl	800e14c <_malloc_r>
 800df1e:	6028      	str	r0, [r5, #0]
 800df20:	6128      	str	r0, [r5, #16]
 800df22:	b920      	cbnz	r0, 800df2e <_svfiprintf_r+0x2e>
 800df24:	230c      	movs	r3, #12
 800df26:	603b      	str	r3, [r7, #0]
 800df28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df2c:	e0d0      	b.n	800e0d0 <_svfiprintf_r+0x1d0>
 800df2e:	2340      	movs	r3, #64	; 0x40
 800df30:	616b      	str	r3, [r5, #20]
 800df32:	2300      	movs	r3, #0
 800df34:	9309      	str	r3, [sp, #36]	; 0x24
 800df36:	2320      	movs	r3, #32
 800df38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800df40:	2330      	movs	r3, #48	; 0x30
 800df42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e0e8 <_svfiprintf_r+0x1e8>
 800df46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df4a:	f04f 0901 	mov.w	r9, #1
 800df4e:	4623      	mov	r3, r4
 800df50:	469a      	mov	sl, r3
 800df52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df56:	b10a      	cbz	r2, 800df5c <_svfiprintf_r+0x5c>
 800df58:	2a25      	cmp	r2, #37	; 0x25
 800df5a:	d1f9      	bne.n	800df50 <_svfiprintf_r+0x50>
 800df5c:	ebba 0b04 	subs.w	fp, sl, r4
 800df60:	d00b      	beq.n	800df7a <_svfiprintf_r+0x7a>
 800df62:	465b      	mov	r3, fp
 800df64:	4622      	mov	r2, r4
 800df66:	4629      	mov	r1, r5
 800df68:	4638      	mov	r0, r7
 800df6a:	f7ff ff6f 	bl	800de4c <__ssputs_r>
 800df6e:	3001      	adds	r0, #1
 800df70:	f000 80a9 	beq.w	800e0c6 <_svfiprintf_r+0x1c6>
 800df74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df76:	445a      	add	r2, fp
 800df78:	9209      	str	r2, [sp, #36]	; 0x24
 800df7a:	f89a 3000 	ldrb.w	r3, [sl]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	f000 80a1 	beq.w	800e0c6 <_svfiprintf_r+0x1c6>
 800df84:	2300      	movs	r3, #0
 800df86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df8e:	f10a 0a01 	add.w	sl, sl, #1
 800df92:	9304      	str	r3, [sp, #16]
 800df94:	9307      	str	r3, [sp, #28]
 800df96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df9a:	931a      	str	r3, [sp, #104]	; 0x68
 800df9c:	4654      	mov	r4, sl
 800df9e:	2205      	movs	r2, #5
 800dfa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfa4:	4850      	ldr	r0, [pc, #320]	; (800e0e8 <_svfiprintf_r+0x1e8>)
 800dfa6:	f7f2 f92b 	bl	8000200 <memchr>
 800dfaa:	9a04      	ldr	r2, [sp, #16]
 800dfac:	b9d8      	cbnz	r0, 800dfe6 <_svfiprintf_r+0xe6>
 800dfae:	06d0      	lsls	r0, r2, #27
 800dfb0:	bf44      	itt	mi
 800dfb2:	2320      	movmi	r3, #32
 800dfb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dfb8:	0711      	lsls	r1, r2, #28
 800dfba:	bf44      	itt	mi
 800dfbc:	232b      	movmi	r3, #43	; 0x2b
 800dfbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dfc2:	f89a 3000 	ldrb.w	r3, [sl]
 800dfc6:	2b2a      	cmp	r3, #42	; 0x2a
 800dfc8:	d015      	beq.n	800dff6 <_svfiprintf_r+0xf6>
 800dfca:	9a07      	ldr	r2, [sp, #28]
 800dfcc:	4654      	mov	r4, sl
 800dfce:	2000      	movs	r0, #0
 800dfd0:	f04f 0c0a 	mov.w	ip, #10
 800dfd4:	4621      	mov	r1, r4
 800dfd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfda:	3b30      	subs	r3, #48	; 0x30
 800dfdc:	2b09      	cmp	r3, #9
 800dfde:	d94d      	bls.n	800e07c <_svfiprintf_r+0x17c>
 800dfe0:	b1b0      	cbz	r0, 800e010 <_svfiprintf_r+0x110>
 800dfe2:	9207      	str	r2, [sp, #28]
 800dfe4:	e014      	b.n	800e010 <_svfiprintf_r+0x110>
 800dfe6:	eba0 0308 	sub.w	r3, r0, r8
 800dfea:	fa09 f303 	lsl.w	r3, r9, r3
 800dfee:	4313      	orrs	r3, r2
 800dff0:	9304      	str	r3, [sp, #16]
 800dff2:	46a2      	mov	sl, r4
 800dff4:	e7d2      	b.n	800df9c <_svfiprintf_r+0x9c>
 800dff6:	9b03      	ldr	r3, [sp, #12]
 800dff8:	1d19      	adds	r1, r3, #4
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	9103      	str	r1, [sp, #12]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	bfbb      	ittet	lt
 800e002:	425b      	neglt	r3, r3
 800e004:	f042 0202 	orrlt.w	r2, r2, #2
 800e008:	9307      	strge	r3, [sp, #28]
 800e00a:	9307      	strlt	r3, [sp, #28]
 800e00c:	bfb8      	it	lt
 800e00e:	9204      	strlt	r2, [sp, #16]
 800e010:	7823      	ldrb	r3, [r4, #0]
 800e012:	2b2e      	cmp	r3, #46	; 0x2e
 800e014:	d10c      	bne.n	800e030 <_svfiprintf_r+0x130>
 800e016:	7863      	ldrb	r3, [r4, #1]
 800e018:	2b2a      	cmp	r3, #42	; 0x2a
 800e01a:	d134      	bne.n	800e086 <_svfiprintf_r+0x186>
 800e01c:	9b03      	ldr	r3, [sp, #12]
 800e01e:	1d1a      	adds	r2, r3, #4
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	9203      	str	r2, [sp, #12]
 800e024:	2b00      	cmp	r3, #0
 800e026:	bfb8      	it	lt
 800e028:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e02c:	3402      	adds	r4, #2
 800e02e:	9305      	str	r3, [sp, #20]
 800e030:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e0f8 <_svfiprintf_r+0x1f8>
 800e034:	7821      	ldrb	r1, [r4, #0]
 800e036:	2203      	movs	r2, #3
 800e038:	4650      	mov	r0, sl
 800e03a:	f7f2 f8e1 	bl	8000200 <memchr>
 800e03e:	b138      	cbz	r0, 800e050 <_svfiprintf_r+0x150>
 800e040:	9b04      	ldr	r3, [sp, #16]
 800e042:	eba0 000a 	sub.w	r0, r0, sl
 800e046:	2240      	movs	r2, #64	; 0x40
 800e048:	4082      	lsls	r2, r0
 800e04a:	4313      	orrs	r3, r2
 800e04c:	3401      	adds	r4, #1
 800e04e:	9304      	str	r3, [sp, #16]
 800e050:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e054:	4825      	ldr	r0, [pc, #148]	; (800e0ec <_svfiprintf_r+0x1ec>)
 800e056:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e05a:	2206      	movs	r2, #6
 800e05c:	f7f2 f8d0 	bl	8000200 <memchr>
 800e060:	2800      	cmp	r0, #0
 800e062:	d038      	beq.n	800e0d6 <_svfiprintf_r+0x1d6>
 800e064:	4b22      	ldr	r3, [pc, #136]	; (800e0f0 <_svfiprintf_r+0x1f0>)
 800e066:	bb1b      	cbnz	r3, 800e0b0 <_svfiprintf_r+0x1b0>
 800e068:	9b03      	ldr	r3, [sp, #12]
 800e06a:	3307      	adds	r3, #7
 800e06c:	f023 0307 	bic.w	r3, r3, #7
 800e070:	3308      	adds	r3, #8
 800e072:	9303      	str	r3, [sp, #12]
 800e074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e076:	4433      	add	r3, r6
 800e078:	9309      	str	r3, [sp, #36]	; 0x24
 800e07a:	e768      	b.n	800df4e <_svfiprintf_r+0x4e>
 800e07c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e080:	460c      	mov	r4, r1
 800e082:	2001      	movs	r0, #1
 800e084:	e7a6      	b.n	800dfd4 <_svfiprintf_r+0xd4>
 800e086:	2300      	movs	r3, #0
 800e088:	3401      	adds	r4, #1
 800e08a:	9305      	str	r3, [sp, #20]
 800e08c:	4619      	mov	r1, r3
 800e08e:	f04f 0c0a 	mov.w	ip, #10
 800e092:	4620      	mov	r0, r4
 800e094:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e098:	3a30      	subs	r2, #48	; 0x30
 800e09a:	2a09      	cmp	r2, #9
 800e09c:	d903      	bls.n	800e0a6 <_svfiprintf_r+0x1a6>
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d0c6      	beq.n	800e030 <_svfiprintf_r+0x130>
 800e0a2:	9105      	str	r1, [sp, #20]
 800e0a4:	e7c4      	b.n	800e030 <_svfiprintf_r+0x130>
 800e0a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0aa:	4604      	mov	r4, r0
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	e7f0      	b.n	800e092 <_svfiprintf_r+0x192>
 800e0b0:	ab03      	add	r3, sp, #12
 800e0b2:	9300      	str	r3, [sp, #0]
 800e0b4:	462a      	mov	r2, r5
 800e0b6:	4b0f      	ldr	r3, [pc, #60]	; (800e0f4 <_svfiprintf_r+0x1f4>)
 800e0b8:	a904      	add	r1, sp, #16
 800e0ba:	4638      	mov	r0, r7
 800e0bc:	f7fe fb6e 	bl	800c79c <_printf_float>
 800e0c0:	1c42      	adds	r2, r0, #1
 800e0c2:	4606      	mov	r6, r0
 800e0c4:	d1d6      	bne.n	800e074 <_svfiprintf_r+0x174>
 800e0c6:	89ab      	ldrh	r3, [r5, #12]
 800e0c8:	065b      	lsls	r3, r3, #25
 800e0ca:	f53f af2d 	bmi.w	800df28 <_svfiprintf_r+0x28>
 800e0ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0d0:	b01d      	add	sp, #116	; 0x74
 800e0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d6:	ab03      	add	r3, sp, #12
 800e0d8:	9300      	str	r3, [sp, #0]
 800e0da:	462a      	mov	r2, r5
 800e0dc:	4b05      	ldr	r3, [pc, #20]	; (800e0f4 <_svfiprintf_r+0x1f4>)
 800e0de:	a904      	add	r1, sp, #16
 800e0e0:	4638      	mov	r0, r7
 800e0e2:	f7fe fdff 	bl	800cce4 <_printf_i>
 800e0e6:	e7eb      	b.n	800e0c0 <_svfiprintf_r+0x1c0>
 800e0e8:	0800f951 	.word	0x0800f951
 800e0ec:	0800f95b 	.word	0x0800f95b
 800e0f0:	0800c79d 	.word	0x0800c79d
 800e0f4:	0800de4d 	.word	0x0800de4d
 800e0f8:	0800f957 	.word	0x0800f957

0800e0fc <malloc>:
 800e0fc:	4b02      	ldr	r3, [pc, #8]	; (800e108 <malloc+0xc>)
 800e0fe:	4601      	mov	r1, r0
 800e100:	6818      	ldr	r0, [r3, #0]
 800e102:	f000 b823 	b.w	800e14c <_malloc_r>
 800e106:	bf00      	nop
 800e108:	2000012c 	.word	0x2000012c

0800e10c <sbrk_aligned>:
 800e10c:	b570      	push	{r4, r5, r6, lr}
 800e10e:	4e0e      	ldr	r6, [pc, #56]	; (800e148 <sbrk_aligned+0x3c>)
 800e110:	460c      	mov	r4, r1
 800e112:	6831      	ldr	r1, [r6, #0]
 800e114:	4605      	mov	r5, r0
 800e116:	b911      	cbnz	r1, 800e11e <sbrk_aligned+0x12>
 800e118:	f000 fd8e 	bl	800ec38 <_sbrk_r>
 800e11c:	6030      	str	r0, [r6, #0]
 800e11e:	4621      	mov	r1, r4
 800e120:	4628      	mov	r0, r5
 800e122:	f000 fd89 	bl	800ec38 <_sbrk_r>
 800e126:	1c43      	adds	r3, r0, #1
 800e128:	d00a      	beq.n	800e140 <sbrk_aligned+0x34>
 800e12a:	1cc4      	adds	r4, r0, #3
 800e12c:	f024 0403 	bic.w	r4, r4, #3
 800e130:	42a0      	cmp	r0, r4
 800e132:	d007      	beq.n	800e144 <sbrk_aligned+0x38>
 800e134:	1a21      	subs	r1, r4, r0
 800e136:	4628      	mov	r0, r5
 800e138:	f000 fd7e 	bl	800ec38 <_sbrk_r>
 800e13c:	3001      	adds	r0, #1
 800e13e:	d101      	bne.n	800e144 <sbrk_aligned+0x38>
 800e140:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e144:	4620      	mov	r0, r4
 800e146:	bd70      	pop	{r4, r5, r6, pc}
 800e148:	200016a8 	.word	0x200016a8

0800e14c <_malloc_r>:
 800e14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e150:	1ccd      	adds	r5, r1, #3
 800e152:	f025 0503 	bic.w	r5, r5, #3
 800e156:	3508      	adds	r5, #8
 800e158:	2d0c      	cmp	r5, #12
 800e15a:	bf38      	it	cc
 800e15c:	250c      	movcc	r5, #12
 800e15e:	2d00      	cmp	r5, #0
 800e160:	4607      	mov	r7, r0
 800e162:	db01      	blt.n	800e168 <_malloc_r+0x1c>
 800e164:	42a9      	cmp	r1, r5
 800e166:	d905      	bls.n	800e174 <_malloc_r+0x28>
 800e168:	230c      	movs	r3, #12
 800e16a:	603b      	str	r3, [r7, #0]
 800e16c:	2600      	movs	r6, #0
 800e16e:	4630      	mov	r0, r6
 800e170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e174:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e248 <_malloc_r+0xfc>
 800e178:	f000 f916 	bl	800e3a8 <__malloc_lock>
 800e17c:	f8d8 3000 	ldr.w	r3, [r8]
 800e180:	461c      	mov	r4, r3
 800e182:	bb5c      	cbnz	r4, 800e1dc <_malloc_r+0x90>
 800e184:	4629      	mov	r1, r5
 800e186:	4638      	mov	r0, r7
 800e188:	f7ff ffc0 	bl	800e10c <sbrk_aligned>
 800e18c:	1c43      	adds	r3, r0, #1
 800e18e:	4604      	mov	r4, r0
 800e190:	d155      	bne.n	800e23e <_malloc_r+0xf2>
 800e192:	f8d8 4000 	ldr.w	r4, [r8]
 800e196:	4626      	mov	r6, r4
 800e198:	2e00      	cmp	r6, #0
 800e19a:	d145      	bne.n	800e228 <_malloc_r+0xdc>
 800e19c:	2c00      	cmp	r4, #0
 800e19e:	d048      	beq.n	800e232 <_malloc_r+0xe6>
 800e1a0:	6823      	ldr	r3, [r4, #0]
 800e1a2:	4631      	mov	r1, r6
 800e1a4:	4638      	mov	r0, r7
 800e1a6:	eb04 0903 	add.w	r9, r4, r3
 800e1aa:	f000 fd45 	bl	800ec38 <_sbrk_r>
 800e1ae:	4581      	cmp	r9, r0
 800e1b0:	d13f      	bne.n	800e232 <_malloc_r+0xe6>
 800e1b2:	6821      	ldr	r1, [r4, #0]
 800e1b4:	1a6d      	subs	r5, r5, r1
 800e1b6:	4629      	mov	r1, r5
 800e1b8:	4638      	mov	r0, r7
 800e1ba:	f7ff ffa7 	bl	800e10c <sbrk_aligned>
 800e1be:	3001      	adds	r0, #1
 800e1c0:	d037      	beq.n	800e232 <_malloc_r+0xe6>
 800e1c2:	6823      	ldr	r3, [r4, #0]
 800e1c4:	442b      	add	r3, r5
 800e1c6:	6023      	str	r3, [r4, #0]
 800e1c8:	f8d8 3000 	ldr.w	r3, [r8]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d038      	beq.n	800e242 <_malloc_r+0xf6>
 800e1d0:	685a      	ldr	r2, [r3, #4]
 800e1d2:	42a2      	cmp	r2, r4
 800e1d4:	d12b      	bne.n	800e22e <_malloc_r+0xe2>
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	605a      	str	r2, [r3, #4]
 800e1da:	e00f      	b.n	800e1fc <_malloc_r+0xb0>
 800e1dc:	6822      	ldr	r2, [r4, #0]
 800e1de:	1b52      	subs	r2, r2, r5
 800e1e0:	d41f      	bmi.n	800e222 <_malloc_r+0xd6>
 800e1e2:	2a0b      	cmp	r2, #11
 800e1e4:	d917      	bls.n	800e216 <_malloc_r+0xca>
 800e1e6:	1961      	adds	r1, r4, r5
 800e1e8:	42a3      	cmp	r3, r4
 800e1ea:	6025      	str	r5, [r4, #0]
 800e1ec:	bf18      	it	ne
 800e1ee:	6059      	strne	r1, [r3, #4]
 800e1f0:	6863      	ldr	r3, [r4, #4]
 800e1f2:	bf08      	it	eq
 800e1f4:	f8c8 1000 	streq.w	r1, [r8]
 800e1f8:	5162      	str	r2, [r4, r5]
 800e1fa:	604b      	str	r3, [r1, #4]
 800e1fc:	4638      	mov	r0, r7
 800e1fe:	f104 060b 	add.w	r6, r4, #11
 800e202:	f000 f8d7 	bl	800e3b4 <__malloc_unlock>
 800e206:	f026 0607 	bic.w	r6, r6, #7
 800e20a:	1d23      	adds	r3, r4, #4
 800e20c:	1af2      	subs	r2, r6, r3
 800e20e:	d0ae      	beq.n	800e16e <_malloc_r+0x22>
 800e210:	1b9b      	subs	r3, r3, r6
 800e212:	50a3      	str	r3, [r4, r2]
 800e214:	e7ab      	b.n	800e16e <_malloc_r+0x22>
 800e216:	42a3      	cmp	r3, r4
 800e218:	6862      	ldr	r2, [r4, #4]
 800e21a:	d1dd      	bne.n	800e1d8 <_malloc_r+0x8c>
 800e21c:	f8c8 2000 	str.w	r2, [r8]
 800e220:	e7ec      	b.n	800e1fc <_malloc_r+0xb0>
 800e222:	4623      	mov	r3, r4
 800e224:	6864      	ldr	r4, [r4, #4]
 800e226:	e7ac      	b.n	800e182 <_malloc_r+0x36>
 800e228:	4634      	mov	r4, r6
 800e22a:	6876      	ldr	r6, [r6, #4]
 800e22c:	e7b4      	b.n	800e198 <_malloc_r+0x4c>
 800e22e:	4613      	mov	r3, r2
 800e230:	e7cc      	b.n	800e1cc <_malloc_r+0x80>
 800e232:	230c      	movs	r3, #12
 800e234:	603b      	str	r3, [r7, #0]
 800e236:	4638      	mov	r0, r7
 800e238:	f000 f8bc 	bl	800e3b4 <__malloc_unlock>
 800e23c:	e797      	b.n	800e16e <_malloc_r+0x22>
 800e23e:	6025      	str	r5, [r4, #0]
 800e240:	e7dc      	b.n	800e1fc <_malloc_r+0xb0>
 800e242:	605b      	str	r3, [r3, #4]
 800e244:	deff      	udf	#255	; 0xff
 800e246:	bf00      	nop
 800e248:	200016a4 	.word	0x200016a4

0800e24c <__sflush_r>:
 800e24c:	898a      	ldrh	r2, [r1, #12]
 800e24e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e252:	4605      	mov	r5, r0
 800e254:	0710      	lsls	r0, r2, #28
 800e256:	460c      	mov	r4, r1
 800e258:	d458      	bmi.n	800e30c <__sflush_r+0xc0>
 800e25a:	684b      	ldr	r3, [r1, #4]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	dc05      	bgt.n	800e26c <__sflush_r+0x20>
 800e260:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e262:	2b00      	cmp	r3, #0
 800e264:	dc02      	bgt.n	800e26c <__sflush_r+0x20>
 800e266:	2000      	movs	r0, #0
 800e268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e26c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e26e:	2e00      	cmp	r6, #0
 800e270:	d0f9      	beq.n	800e266 <__sflush_r+0x1a>
 800e272:	2300      	movs	r3, #0
 800e274:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e278:	682f      	ldr	r7, [r5, #0]
 800e27a:	6a21      	ldr	r1, [r4, #32]
 800e27c:	602b      	str	r3, [r5, #0]
 800e27e:	d032      	beq.n	800e2e6 <__sflush_r+0x9a>
 800e280:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e282:	89a3      	ldrh	r3, [r4, #12]
 800e284:	075a      	lsls	r2, r3, #29
 800e286:	d505      	bpl.n	800e294 <__sflush_r+0x48>
 800e288:	6863      	ldr	r3, [r4, #4]
 800e28a:	1ac0      	subs	r0, r0, r3
 800e28c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e28e:	b10b      	cbz	r3, 800e294 <__sflush_r+0x48>
 800e290:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e292:	1ac0      	subs	r0, r0, r3
 800e294:	2300      	movs	r3, #0
 800e296:	4602      	mov	r2, r0
 800e298:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e29a:	6a21      	ldr	r1, [r4, #32]
 800e29c:	4628      	mov	r0, r5
 800e29e:	47b0      	blx	r6
 800e2a0:	1c43      	adds	r3, r0, #1
 800e2a2:	89a3      	ldrh	r3, [r4, #12]
 800e2a4:	d106      	bne.n	800e2b4 <__sflush_r+0x68>
 800e2a6:	6829      	ldr	r1, [r5, #0]
 800e2a8:	291d      	cmp	r1, #29
 800e2aa:	d82b      	bhi.n	800e304 <__sflush_r+0xb8>
 800e2ac:	4a29      	ldr	r2, [pc, #164]	; (800e354 <__sflush_r+0x108>)
 800e2ae:	410a      	asrs	r2, r1
 800e2b0:	07d6      	lsls	r6, r2, #31
 800e2b2:	d427      	bmi.n	800e304 <__sflush_r+0xb8>
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	6062      	str	r2, [r4, #4]
 800e2b8:	04d9      	lsls	r1, r3, #19
 800e2ba:	6922      	ldr	r2, [r4, #16]
 800e2bc:	6022      	str	r2, [r4, #0]
 800e2be:	d504      	bpl.n	800e2ca <__sflush_r+0x7e>
 800e2c0:	1c42      	adds	r2, r0, #1
 800e2c2:	d101      	bne.n	800e2c8 <__sflush_r+0x7c>
 800e2c4:	682b      	ldr	r3, [r5, #0]
 800e2c6:	b903      	cbnz	r3, 800e2ca <__sflush_r+0x7e>
 800e2c8:	6560      	str	r0, [r4, #84]	; 0x54
 800e2ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2cc:	602f      	str	r7, [r5, #0]
 800e2ce:	2900      	cmp	r1, #0
 800e2d0:	d0c9      	beq.n	800e266 <__sflush_r+0x1a>
 800e2d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2d6:	4299      	cmp	r1, r3
 800e2d8:	d002      	beq.n	800e2e0 <__sflush_r+0x94>
 800e2da:	4628      	mov	r0, r5
 800e2dc:	f000 fd02 	bl	800ece4 <_free_r>
 800e2e0:	2000      	movs	r0, #0
 800e2e2:	6360      	str	r0, [r4, #52]	; 0x34
 800e2e4:	e7c0      	b.n	800e268 <__sflush_r+0x1c>
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	4628      	mov	r0, r5
 800e2ea:	47b0      	blx	r6
 800e2ec:	1c41      	adds	r1, r0, #1
 800e2ee:	d1c8      	bne.n	800e282 <__sflush_r+0x36>
 800e2f0:	682b      	ldr	r3, [r5, #0]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d0c5      	beq.n	800e282 <__sflush_r+0x36>
 800e2f6:	2b1d      	cmp	r3, #29
 800e2f8:	d001      	beq.n	800e2fe <__sflush_r+0xb2>
 800e2fa:	2b16      	cmp	r3, #22
 800e2fc:	d101      	bne.n	800e302 <__sflush_r+0xb6>
 800e2fe:	602f      	str	r7, [r5, #0]
 800e300:	e7b1      	b.n	800e266 <__sflush_r+0x1a>
 800e302:	89a3      	ldrh	r3, [r4, #12]
 800e304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e308:	81a3      	strh	r3, [r4, #12]
 800e30a:	e7ad      	b.n	800e268 <__sflush_r+0x1c>
 800e30c:	690f      	ldr	r7, [r1, #16]
 800e30e:	2f00      	cmp	r7, #0
 800e310:	d0a9      	beq.n	800e266 <__sflush_r+0x1a>
 800e312:	0793      	lsls	r3, r2, #30
 800e314:	680e      	ldr	r6, [r1, #0]
 800e316:	bf08      	it	eq
 800e318:	694b      	ldreq	r3, [r1, #20]
 800e31a:	600f      	str	r7, [r1, #0]
 800e31c:	bf18      	it	ne
 800e31e:	2300      	movne	r3, #0
 800e320:	eba6 0807 	sub.w	r8, r6, r7
 800e324:	608b      	str	r3, [r1, #8]
 800e326:	f1b8 0f00 	cmp.w	r8, #0
 800e32a:	dd9c      	ble.n	800e266 <__sflush_r+0x1a>
 800e32c:	6a21      	ldr	r1, [r4, #32]
 800e32e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e330:	4643      	mov	r3, r8
 800e332:	463a      	mov	r2, r7
 800e334:	4628      	mov	r0, r5
 800e336:	47b0      	blx	r6
 800e338:	2800      	cmp	r0, #0
 800e33a:	dc06      	bgt.n	800e34a <__sflush_r+0xfe>
 800e33c:	89a3      	ldrh	r3, [r4, #12]
 800e33e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e342:	81a3      	strh	r3, [r4, #12]
 800e344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e348:	e78e      	b.n	800e268 <__sflush_r+0x1c>
 800e34a:	4407      	add	r7, r0
 800e34c:	eba8 0800 	sub.w	r8, r8, r0
 800e350:	e7e9      	b.n	800e326 <__sflush_r+0xda>
 800e352:	bf00      	nop
 800e354:	dfbffffe 	.word	0xdfbffffe

0800e358 <_fflush_r>:
 800e358:	b538      	push	{r3, r4, r5, lr}
 800e35a:	690b      	ldr	r3, [r1, #16]
 800e35c:	4605      	mov	r5, r0
 800e35e:	460c      	mov	r4, r1
 800e360:	b913      	cbnz	r3, 800e368 <_fflush_r+0x10>
 800e362:	2500      	movs	r5, #0
 800e364:	4628      	mov	r0, r5
 800e366:	bd38      	pop	{r3, r4, r5, pc}
 800e368:	b118      	cbz	r0, 800e372 <_fflush_r+0x1a>
 800e36a:	6a03      	ldr	r3, [r0, #32]
 800e36c:	b90b      	cbnz	r3, 800e372 <_fflush_r+0x1a>
 800e36e:	f7fe fe75 	bl	800d05c <__sinit>
 800e372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d0f3      	beq.n	800e362 <_fflush_r+0xa>
 800e37a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e37c:	07d0      	lsls	r0, r2, #31
 800e37e:	d404      	bmi.n	800e38a <_fflush_r+0x32>
 800e380:	0599      	lsls	r1, r3, #22
 800e382:	d402      	bmi.n	800e38a <_fflush_r+0x32>
 800e384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e386:	f7fe fed5 	bl	800d134 <__retarget_lock_acquire_recursive>
 800e38a:	4628      	mov	r0, r5
 800e38c:	4621      	mov	r1, r4
 800e38e:	f7ff ff5d 	bl	800e24c <__sflush_r>
 800e392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e394:	07da      	lsls	r2, r3, #31
 800e396:	4605      	mov	r5, r0
 800e398:	d4e4      	bmi.n	800e364 <_fflush_r+0xc>
 800e39a:	89a3      	ldrh	r3, [r4, #12]
 800e39c:	059b      	lsls	r3, r3, #22
 800e39e:	d4e1      	bmi.n	800e364 <_fflush_r+0xc>
 800e3a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e3a2:	f7fe fec8 	bl	800d136 <__retarget_lock_release_recursive>
 800e3a6:	e7dd      	b.n	800e364 <_fflush_r+0xc>

0800e3a8 <__malloc_lock>:
 800e3a8:	4801      	ldr	r0, [pc, #4]	; (800e3b0 <__malloc_lock+0x8>)
 800e3aa:	f7fe bec3 	b.w	800d134 <__retarget_lock_acquire_recursive>
 800e3ae:	bf00      	nop
 800e3b0:	200016a0 	.word	0x200016a0

0800e3b4 <__malloc_unlock>:
 800e3b4:	4801      	ldr	r0, [pc, #4]	; (800e3bc <__malloc_unlock+0x8>)
 800e3b6:	f7fe bebe 	b.w	800d136 <__retarget_lock_release_recursive>
 800e3ba:	bf00      	nop
 800e3bc:	200016a0 	.word	0x200016a0

0800e3c0 <_Balloc>:
 800e3c0:	b570      	push	{r4, r5, r6, lr}
 800e3c2:	69c6      	ldr	r6, [r0, #28]
 800e3c4:	4604      	mov	r4, r0
 800e3c6:	460d      	mov	r5, r1
 800e3c8:	b976      	cbnz	r6, 800e3e8 <_Balloc+0x28>
 800e3ca:	2010      	movs	r0, #16
 800e3cc:	f7ff fe96 	bl	800e0fc <malloc>
 800e3d0:	4602      	mov	r2, r0
 800e3d2:	61e0      	str	r0, [r4, #28]
 800e3d4:	b920      	cbnz	r0, 800e3e0 <_Balloc+0x20>
 800e3d6:	4b18      	ldr	r3, [pc, #96]	; (800e438 <_Balloc+0x78>)
 800e3d8:	4818      	ldr	r0, [pc, #96]	; (800e43c <_Balloc+0x7c>)
 800e3da:	216b      	movs	r1, #107	; 0x6b
 800e3dc:	f000 fc4e 	bl	800ec7c <__assert_func>
 800e3e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e3e4:	6006      	str	r6, [r0, #0]
 800e3e6:	60c6      	str	r6, [r0, #12]
 800e3e8:	69e6      	ldr	r6, [r4, #28]
 800e3ea:	68f3      	ldr	r3, [r6, #12]
 800e3ec:	b183      	cbz	r3, 800e410 <_Balloc+0x50>
 800e3ee:	69e3      	ldr	r3, [r4, #28]
 800e3f0:	68db      	ldr	r3, [r3, #12]
 800e3f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e3f6:	b9b8      	cbnz	r0, 800e428 <_Balloc+0x68>
 800e3f8:	2101      	movs	r1, #1
 800e3fa:	fa01 f605 	lsl.w	r6, r1, r5
 800e3fe:	1d72      	adds	r2, r6, #5
 800e400:	0092      	lsls	r2, r2, #2
 800e402:	4620      	mov	r0, r4
 800e404:	f000 fc58 	bl	800ecb8 <_calloc_r>
 800e408:	b160      	cbz	r0, 800e424 <_Balloc+0x64>
 800e40a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e40e:	e00e      	b.n	800e42e <_Balloc+0x6e>
 800e410:	2221      	movs	r2, #33	; 0x21
 800e412:	2104      	movs	r1, #4
 800e414:	4620      	mov	r0, r4
 800e416:	f000 fc4f 	bl	800ecb8 <_calloc_r>
 800e41a:	69e3      	ldr	r3, [r4, #28]
 800e41c:	60f0      	str	r0, [r6, #12]
 800e41e:	68db      	ldr	r3, [r3, #12]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d1e4      	bne.n	800e3ee <_Balloc+0x2e>
 800e424:	2000      	movs	r0, #0
 800e426:	bd70      	pop	{r4, r5, r6, pc}
 800e428:	6802      	ldr	r2, [r0, #0]
 800e42a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e42e:	2300      	movs	r3, #0
 800e430:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e434:	e7f7      	b.n	800e426 <_Balloc+0x66>
 800e436:	bf00      	nop
 800e438:	0800f8d1 	.word	0x0800f8d1
 800e43c:	0800f962 	.word	0x0800f962

0800e440 <_Bfree>:
 800e440:	b570      	push	{r4, r5, r6, lr}
 800e442:	69c6      	ldr	r6, [r0, #28]
 800e444:	4605      	mov	r5, r0
 800e446:	460c      	mov	r4, r1
 800e448:	b976      	cbnz	r6, 800e468 <_Bfree+0x28>
 800e44a:	2010      	movs	r0, #16
 800e44c:	f7ff fe56 	bl	800e0fc <malloc>
 800e450:	4602      	mov	r2, r0
 800e452:	61e8      	str	r0, [r5, #28]
 800e454:	b920      	cbnz	r0, 800e460 <_Bfree+0x20>
 800e456:	4b09      	ldr	r3, [pc, #36]	; (800e47c <_Bfree+0x3c>)
 800e458:	4809      	ldr	r0, [pc, #36]	; (800e480 <_Bfree+0x40>)
 800e45a:	218f      	movs	r1, #143	; 0x8f
 800e45c:	f000 fc0e 	bl	800ec7c <__assert_func>
 800e460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e464:	6006      	str	r6, [r0, #0]
 800e466:	60c6      	str	r6, [r0, #12]
 800e468:	b13c      	cbz	r4, 800e47a <_Bfree+0x3a>
 800e46a:	69eb      	ldr	r3, [r5, #28]
 800e46c:	6862      	ldr	r2, [r4, #4]
 800e46e:	68db      	ldr	r3, [r3, #12]
 800e470:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e474:	6021      	str	r1, [r4, #0]
 800e476:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e47a:	bd70      	pop	{r4, r5, r6, pc}
 800e47c:	0800f8d1 	.word	0x0800f8d1
 800e480:	0800f962 	.word	0x0800f962

0800e484 <__multadd>:
 800e484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e488:	690d      	ldr	r5, [r1, #16]
 800e48a:	4607      	mov	r7, r0
 800e48c:	460c      	mov	r4, r1
 800e48e:	461e      	mov	r6, r3
 800e490:	f101 0c14 	add.w	ip, r1, #20
 800e494:	2000      	movs	r0, #0
 800e496:	f8dc 3000 	ldr.w	r3, [ip]
 800e49a:	b299      	uxth	r1, r3
 800e49c:	fb02 6101 	mla	r1, r2, r1, r6
 800e4a0:	0c1e      	lsrs	r6, r3, #16
 800e4a2:	0c0b      	lsrs	r3, r1, #16
 800e4a4:	fb02 3306 	mla	r3, r2, r6, r3
 800e4a8:	b289      	uxth	r1, r1
 800e4aa:	3001      	adds	r0, #1
 800e4ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e4b0:	4285      	cmp	r5, r0
 800e4b2:	f84c 1b04 	str.w	r1, [ip], #4
 800e4b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e4ba:	dcec      	bgt.n	800e496 <__multadd+0x12>
 800e4bc:	b30e      	cbz	r6, 800e502 <__multadd+0x7e>
 800e4be:	68a3      	ldr	r3, [r4, #8]
 800e4c0:	42ab      	cmp	r3, r5
 800e4c2:	dc19      	bgt.n	800e4f8 <__multadd+0x74>
 800e4c4:	6861      	ldr	r1, [r4, #4]
 800e4c6:	4638      	mov	r0, r7
 800e4c8:	3101      	adds	r1, #1
 800e4ca:	f7ff ff79 	bl	800e3c0 <_Balloc>
 800e4ce:	4680      	mov	r8, r0
 800e4d0:	b928      	cbnz	r0, 800e4de <__multadd+0x5a>
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	4b0c      	ldr	r3, [pc, #48]	; (800e508 <__multadd+0x84>)
 800e4d6:	480d      	ldr	r0, [pc, #52]	; (800e50c <__multadd+0x88>)
 800e4d8:	21ba      	movs	r1, #186	; 0xba
 800e4da:	f000 fbcf 	bl	800ec7c <__assert_func>
 800e4de:	6922      	ldr	r2, [r4, #16]
 800e4e0:	3202      	adds	r2, #2
 800e4e2:	f104 010c 	add.w	r1, r4, #12
 800e4e6:	0092      	lsls	r2, r2, #2
 800e4e8:	300c      	adds	r0, #12
 800e4ea:	f7fe fe25 	bl	800d138 <memcpy>
 800e4ee:	4621      	mov	r1, r4
 800e4f0:	4638      	mov	r0, r7
 800e4f2:	f7ff ffa5 	bl	800e440 <_Bfree>
 800e4f6:	4644      	mov	r4, r8
 800e4f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e4fc:	3501      	adds	r5, #1
 800e4fe:	615e      	str	r6, [r3, #20]
 800e500:	6125      	str	r5, [r4, #16]
 800e502:	4620      	mov	r0, r4
 800e504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e508:	0800f940 	.word	0x0800f940
 800e50c:	0800f962 	.word	0x0800f962

0800e510 <__hi0bits>:
 800e510:	0c03      	lsrs	r3, r0, #16
 800e512:	041b      	lsls	r3, r3, #16
 800e514:	b9d3      	cbnz	r3, 800e54c <__hi0bits+0x3c>
 800e516:	0400      	lsls	r0, r0, #16
 800e518:	2310      	movs	r3, #16
 800e51a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e51e:	bf04      	itt	eq
 800e520:	0200      	lsleq	r0, r0, #8
 800e522:	3308      	addeq	r3, #8
 800e524:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e528:	bf04      	itt	eq
 800e52a:	0100      	lsleq	r0, r0, #4
 800e52c:	3304      	addeq	r3, #4
 800e52e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e532:	bf04      	itt	eq
 800e534:	0080      	lsleq	r0, r0, #2
 800e536:	3302      	addeq	r3, #2
 800e538:	2800      	cmp	r0, #0
 800e53a:	db05      	blt.n	800e548 <__hi0bits+0x38>
 800e53c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e540:	f103 0301 	add.w	r3, r3, #1
 800e544:	bf08      	it	eq
 800e546:	2320      	moveq	r3, #32
 800e548:	4618      	mov	r0, r3
 800e54a:	4770      	bx	lr
 800e54c:	2300      	movs	r3, #0
 800e54e:	e7e4      	b.n	800e51a <__hi0bits+0xa>

0800e550 <__lo0bits>:
 800e550:	6803      	ldr	r3, [r0, #0]
 800e552:	f013 0207 	ands.w	r2, r3, #7
 800e556:	d00c      	beq.n	800e572 <__lo0bits+0x22>
 800e558:	07d9      	lsls	r1, r3, #31
 800e55a:	d422      	bmi.n	800e5a2 <__lo0bits+0x52>
 800e55c:	079a      	lsls	r2, r3, #30
 800e55e:	bf49      	itett	mi
 800e560:	085b      	lsrmi	r3, r3, #1
 800e562:	089b      	lsrpl	r3, r3, #2
 800e564:	6003      	strmi	r3, [r0, #0]
 800e566:	2201      	movmi	r2, #1
 800e568:	bf5c      	itt	pl
 800e56a:	6003      	strpl	r3, [r0, #0]
 800e56c:	2202      	movpl	r2, #2
 800e56e:	4610      	mov	r0, r2
 800e570:	4770      	bx	lr
 800e572:	b299      	uxth	r1, r3
 800e574:	b909      	cbnz	r1, 800e57a <__lo0bits+0x2a>
 800e576:	0c1b      	lsrs	r3, r3, #16
 800e578:	2210      	movs	r2, #16
 800e57a:	b2d9      	uxtb	r1, r3
 800e57c:	b909      	cbnz	r1, 800e582 <__lo0bits+0x32>
 800e57e:	3208      	adds	r2, #8
 800e580:	0a1b      	lsrs	r3, r3, #8
 800e582:	0719      	lsls	r1, r3, #28
 800e584:	bf04      	itt	eq
 800e586:	091b      	lsreq	r3, r3, #4
 800e588:	3204      	addeq	r2, #4
 800e58a:	0799      	lsls	r1, r3, #30
 800e58c:	bf04      	itt	eq
 800e58e:	089b      	lsreq	r3, r3, #2
 800e590:	3202      	addeq	r2, #2
 800e592:	07d9      	lsls	r1, r3, #31
 800e594:	d403      	bmi.n	800e59e <__lo0bits+0x4e>
 800e596:	085b      	lsrs	r3, r3, #1
 800e598:	f102 0201 	add.w	r2, r2, #1
 800e59c:	d003      	beq.n	800e5a6 <__lo0bits+0x56>
 800e59e:	6003      	str	r3, [r0, #0]
 800e5a0:	e7e5      	b.n	800e56e <__lo0bits+0x1e>
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	e7e3      	b.n	800e56e <__lo0bits+0x1e>
 800e5a6:	2220      	movs	r2, #32
 800e5a8:	e7e1      	b.n	800e56e <__lo0bits+0x1e>
	...

0800e5ac <__i2b>:
 800e5ac:	b510      	push	{r4, lr}
 800e5ae:	460c      	mov	r4, r1
 800e5b0:	2101      	movs	r1, #1
 800e5b2:	f7ff ff05 	bl	800e3c0 <_Balloc>
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	b928      	cbnz	r0, 800e5c6 <__i2b+0x1a>
 800e5ba:	4b05      	ldr	r3, [pc, #20]	; (800e5d0 <__i2b+0x24>)
 800e5bc:	4805      	ldr	r0, [pc, #20]	; (800e5d4 <__i2b+0x28>)
 800e5be:	f240 1145 	movw	r1, #325	; 0x145
 800e5c2:	f000 fb5b 	bl	800ec7c <__assert_func>
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	6144      	str	r4, [r0, #20]
 800e5ca:	6103      	str	r3, [r0, #16]
 800e5cc:	bd10      	pop	{r4, pc}
 800e5ce:	bf00      	nop
 800e5d0:	0800f940 	.word	0x0800f940
 800e5d4:	0800f962 	.word	0x0800f962

0800e5d8 <__multiply>:
 800e5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5dc:	4691      	mov	r9, r2
 800e5de:	690a      	ldr	r2, [r1, #16]
 800e5e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	bfb8      	it	lt
 800e5e8:	460b      	movlt	r3, r1
 800e5ea:	460c      	mov	r4, r1
 800e5ec:	bfbc      	itt	lt
 800e5ee:	464c      	movlt	r4, r9
 800e5f0:	4699      	movlt	r9, r3
 800e5f2:	6927      	ldr	r7, [r4, #16]
 800e5f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e5f8:	68a3      	ldr	r3, [r4, #8]
 800e5fa:	6861      	ldr	r1, [r4, #4]
 800e5fc:	eb07 060a 	add.w	r6, r7, sl
 800e600:	42b3      	cmp	r3, r6
 800e602:	b085      	sub	sp, #20
 800e604:	bfb8      	it	lt
 800e606:	3101      	addlt	r1, #1
 800e608:	f7ff feda 	bl	800e3c0 <_Balloc>
 800e60c:	b930      	cbnz	r0, 800e61c <__multiply+0x44>
 800e60e:	4602      	mov	r2, r0
 800e610:	4b44      	ldr	r3, [pc, #272]	; (800e724 <__multiply+0x14c>)
 800e612:	4845      	ldr	r0, [pc, #276]	; (800e728 <__multiply+0x150>)
 800e614:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e618:	f000 fb30 	bl	800ec7c <__assert_func>
 800e61c:	f100 0514 	add.w	r5, r0, #20
 800e620:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e624:	462b      	mov	r3, r5
 800e626:	2200      	movs	r2, #0
 800e628:	4543      	cmp	r3, r8
 800e62a:	d321      	bcc.n	800e670 <__multiply+0x98>
 800e62c:	f104 0314 	add.w	r3, r4, #20
 800e630:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e634:	f109 0314 	add.w	r3, r9, #20
 800e638:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e63c:	9202      	str	r2, [sp, #8]
 800e63e:	1b3a      	subs	r2, r7, r4
 800e640:	3a15      	subs	r2, #21
 800e642:	f022 0203 	bic.w	r2, r2, #3
 800e646:	3204      	adds	r2, #4
 800e648:	f104 0115 	add.w	r1, r4, #21
 800e64c:	428f      	cmp	r7, r1
 800e64e:	bf38      	it	cc
 800e650:	2204      	movcc	r2, #4
 800e652:	9201      	str	r2, [sp, #4]
 800e654:	9a02      	ldr	r2, [sp, #8]
 800e656:	9303      	str	r3, [sp, #12]
 800e658:	429a      	cmp	r2, r3
 800e65a:	d80c      	bhi.n	800e676 <__multiply+0x9e>
 800e65c:	2e00      	cmp	r6, #0
 800e65e:	dd03      	ble.n	800e668 <__multiply+0x90>
 800e660:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e664:	2b00      	cmp	r3, #0
 800e666:	d05b      	beq.n	800e720 <__multiply+0x148>
 800e668:	6106      	str	r6, [r0, #16]
 800e66a:	b005      	add	sp, #20
 800e66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e670:	f843 2b04 	str.w	r2, [r3], #4
 800e674:	e7d8      	b.n	800e628 <__multiply+0x50>
 800e676:	f8b3 a000 	ldrh.w	sl, [r3]
 800e67a:	f1ba 0f00 	cmp.w	sl, #0
 800e67e:	d024      	beq.n	800e6ca <__multiply+0xf2>
 800e680:	f104 0e14 	add.w	lr, r4, #20
 800e684:	46a9      	mov	r9, r5
 800e686:	f04f 0c00 	mov.w	ip, #0
 800e68a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e68e:	f8d9 1000 	ldr.w	r1, [r9]
 800e692:	fa1f fb82 	uxth.w	fp, r2
 800e696:	b289      	uxth	r1, r1
 800e698:	fb0a 110b 	mla	r1, sl, fp, r1
 800e69c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e6a0:	f8d9 2000 	ldr.w	r2, [r9]
 800e6a4:	4461      	add	r1, ip
 800e6a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e6aa:	fb0a c20b 	mla	r2, sl, fp, ip
 800e6ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e6b2:	b289      	uxth	r1, r1
 800e6b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e6b8:	4577      	cmp	r7, lr
 800e6ba:	f849 1b04 	str.w	r1, [r9], #4
 800e6be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e6c2:	d8e2      	bhi.n	800e68a <__multiply+0xb2>
 800e6c4:	9a01      	ldr	r2, [sp, #4]
 800e6c6:	f845 c002 	str.w	ip, [r5, r2]
 800e6ca:	9a03      	ldr	r2, [sp, #12]
 800e6cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e6d0:	3304      	adds	r3, #4
 800e6d2:	f1b9 0f00 	cmp.w	r9, #0
 800e6d6:	d021      	beq.n	800e71c <__multiply+0x144>
 800e6d8:	6829      	ldr	r1, [r5, #0]
 800e6da:	f104 0c14 	add.w	ip, r4, #20
 800e6de:	46ae      	mov	lr, r5
 800e6e0:	f04f 0a00 	mov.w	sl, #0
 800e6e4:	f8bc b000 	ldrh.w	fp, [ip]
 800e6e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e6ec:	fb09 220b 	mla	r2, r9, fp, r2
 800e6f0:	4452      	add	r2, sl
 800e6f2:	b289      	uxth	r1, r1
 800e6f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e6f8:	f84e 1b04 	str.w	r1, [lr], #4
 800e6fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e700:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e704:	f8be 1000 	ldrh.w	r1, [lr]
 800e708:	fb09 110a 	mla	r1, r9, sl, r1
 800e70c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e710:	4567      	cmp	r7, ip
 800e712:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e716:	d8e5      	bhi.n	800e6e4 <__multiply+0x10c>
 800e718:	9a01      	ldr	r2, [sp, #4]
 800e71a:	50a9      	str	r1, [r5, r2]
 800e71c:	3504      	adds	r5, #4
 800e71e:	e799      	b.n	800e654 <__multiply+0x7c>
 800e720:	3e01      	subs	r6, #1
 800e722:	e79b      	b.n	800e65c <__multiply+0x84>
 800e724:	0800f940 	.word	0x0800f940
 800e728:	0800f962 	.word	0x0800f962

0800e72c <__pow5mult>:
 800e72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e730:	4615      	mov	r5, r2
 800e732:	f012 0203 	ands.w	r2, r2, #3
 800e736:	4606      	mov	r6, r0
 800e738:	460f      	mov	r7, r1
 800e73a:	d007      	beq.n	800e74c <__pow5mult+0x20>
 800e73c:	4c25      	ldr	r4, [pc, #148]	; (800e7d4 <__pow5mult+0xa8>)
 800e73e:	3a01      	subs	r2, #1
 800e740:	2300      	movs	r3, #0
 800e742:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e746:	f7ff fe9d 	bl	800e484 <__multadd>
 800e74a:	4607      	mov	r7, r0
 800e74c:	10ad      	asrs	r5, r5, #2
 800e74e:	d03d      	beq.n	800e7cc <__pow5mult+0xa0>
 800e750:	69f4      	ldr	r4, [r6, #28]
 800e752:	b97c      	cbnz	r4, 800e774 <__pow5mult+0x48>
 800e754:	2010      	movs	r0, #16
 800e756:	f7ff fcd1 	bl	800e0fc <malloc>
 800e75a:	4602      	mov	r2, r0
 800e75c:	61f0      	str	r0, [r6, #28]
 800e75e:	b928      	cbnz	r0, 800e76c <__pow5mult+0x40>
 800e760:	4b1d      	ldr	r3, [pc, #116]	; (800e7d8 <__pow5mult+0xac>)
 800e762:	481e      	ldr	r0, [pc, #120]	; (800e7dc <__pow5mult+0xb0>)
 800e764:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e768:	f000 fa88 	bl	800ec7c <__assert_func>
 800e76c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e770:	6004      	str	r4, [r0, #0]
 800e772:	60c4      	str	r4, [r0, #12]
 800e774:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e778:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e77c:	b94c      	cbnz	r4, 800e792 <__pow5mult+0x66>
 800e77e:	f240 2171 	movw	r1, #625	; 0x271
 800e782:	4630      	mov	r0, r6
 800e784:	f7ff ff12 	bl	800e5ac <__i2b>
 800e788:	2300      	movs	r3, #0
 800e78a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e78e:	4604      	mov	r4, r0
 800e790:	6003      	str	r3, [r0, #0]
 800e792:	f04f 0900 	mov.w	r9, #0
 800e796:	07eb      	lsls	r3, r5, #31
 800e798:	d50a      	bpl.n	800e7b0 <__pow5mult+0x84>
 800e79a:	4639      	mov	r1, r7
 800e79c:	4622      	mov	r2, r4
 800e79e:	4630      	mov	r0, r6
 800e7a0:	f7ff ff1a 	bl	800e5d8 <__multiply>
 800e7a4:	4639      	mov	r1, r7
 800e7a6:	4680      	mov	r8, r0
 800e7a8:	4630      	mov	r0, r6
 800e7aa:	f7ff fe49 	bl	800e440 <_Bfree>
 800e7ae:	4647      	mov	r7, r8
 800e7b0:	106d      	asrs	r5, r5, #1
 800e7b2:	d00b      	beq.n	800e7cc <__pow5mult+0xa0>
 800e7b4:	6820      	ldr	r0, [r4, #0]
 800e7b6:	b938      	cbnz	r0, 800e7c8 <__pow5mult+0x9c>
 800e7b8:	4622      	mov	r2, r4
 800e7ba:	4621      	mov	r1, r4
 800e7bc:	4630      	mov	r0, r6
 800e7be:	f7ff ff0b 	bl	800e5d8 <__multiply>
 800e7c2:	6020      	str	r0, [r4, #0]
 800e7c4:	f8c0 9000 	str.w	r9, [r0]
 800e7c8:	4604      	mov	r4, r0
 800e7ca:	e7e4      	b.n	800e796 <__pow5mult+0x6a>
 800e7cc:	4638      	mov	r0, r7
 800e7ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7d2:	bf00      	nop
 800e7d4:	0800fab0 	.word	0x0800fab0
 800e7d8:	0800f8d1 	.word	0x0800f8d1
 800e7dc:	0800f962 	.word	0x0800f962

0800e7e0 <__lshift>:
 800e7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7e4:	460c      	mov	r4, r1
 800e7e6:	6849      	ldr	r1, [r1, #4]
 800e7e8:	6923      	ldr	r3, [r4, #16]
 800e7ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e7ee:	68a3      	ldr	r3, [r4, #8]
 800e7f0:	4607      	mov	r7, r0
 800e7f2:	4691      	mov	r9, r2
 800e7f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e7f8:	f108 0601 	add.w	r6, r8, #1
 800e7fc:	42b3      	cmp	r3, r6
 800e7fe:	db0b      	blt.n	800e818 <__lshift+0x38>
 800e800:	4638      	mov	r0, r7
 800e802:	f7ff fddd 	bl	800e3c0 <_Balloc>
 800e806:	4605      	mov	r5, r0
 800e808:	b948      	cbnz	r0, 800e81e <__lshift+0x3e>
 800e80a:	4602      	mov	r2, r0
 800e80c:	4b28      	ldr	r3, [pc, #160]	; (800e8b0 <__lshift+0xd0>)
 800e80e:	4829      	ldr	r0, [pc, #164]	; (800e8b4 <__lshift+0xd4>)
 800e810:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e814:	f000 fa32 	bl	800ec7c <__assert_func>
 800e818:	3101      	adds	r1, #1
 800e81a:	005b      	lsls	r3, r3, #1
 800e81c:	e7ee      	b.n	800e7fc <__lshift+0x1c>
 800e81e:	2300      	movs	r3, #0
 800e820:	f100 0114 	add.w	r1, r0, #20
 800e824:	f100 0210 	add.w	r2, r0, #16
 800e828:	4618      	mov	r0, r3
 800e82a:	4553      	cmp	r3, sl
 800e82c:	db33      	blt.n	800e896 <__lshift+0xb6>
 800e82e:	6920      	ldr	r0, [r4, #16]
 800e830:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e834:	f104 0314 	add.w	r3, r4, #20
 800e838:	f019 091f 	ands.w	r9, r9, #31
 800e83c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e840:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e844:	d02b      	beq.n	800e89e <__lshift+0xbe>
 800e846:	f1c9 0e20 	rsb	lr, r9, #32
 800e84a:	468a      	mov	sl, r1
 800e84c:	2200      	movs	r2, #0
 800e84e:	6818      	ldr	r0, [r3, #0]
 800e850:	fa00 f009 	lsl.w	r0, r0, r9
 800e854:	4310      	orrs	r0, r2
 800e856:	f84a 0b04 	str.w	r0, [sl], #4
 800e85a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e85e:	459c      	cmp	ip, r3
 800e860:	fa22 f20e 	lsr.w	r2, r2, lr
 800e864:	d8f3      	bhi.n	800e84e <__lshift+0x6e>
 800e866:	ebac 0304 	sub.w	r3, ip, r4
 800e86a:	3b15      	subs	r3, #21
 800e86c:	f023 0303 	bic.w	r3, r3, #3
 800e870:	3304      	adds	r3, #4
 800e872:	f104 0015 	add.w	r0, r4, #21
 800e876:	4584      	cmp	ip, r0
 800e878:	bf38      	it	cc
 800e87a:	2304      	movcc	r3, #4
 800e87c:	50ca      	str	r2, [r1, r3]
 800e87e:	b10a      	cbz	r2, 800e884 <__lshift+0xa4>
 800e880:	f108 0602 	add.w	r6, r8, #2
 800e884:	3e01      	subs	r6, #1
 800e886:	4638      	mov	r0, r7
 800e888:	612e      	str	r6, [r5, #16]
 800e88a:	4621      	mov	r1, r4
 800e88c:	f7ff fdd8 	bl	800e440 <_Bfree>
 800e890:	4628      	mov	r0, r5
 800e892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e896:	f842 0f04 	str.w	r0, [r2, #4]!
 800e89a:	3301      	adds	r3, #1
 800e89c:	e7c5      	b.n	800e82a <__lshift+0x4a>
 800e89e:	3904      	subs	r1, #4
 800e8a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e8a8:	459c      	cmp	ip, r3
 800e8aa:	d8f9      	bhi.n	800e8a0 <__lshift+0xc0>
 800e8ac:	e7ea      	b.n	800e884 <__lshift+0xa4>
 800e8ae:	bf00      	nop
 800e8b0:	0800f940 	.word	0x0800f940
 800e8b4:	0800f962 	.word	0x0800f962

0800e8b8 <__mcmp>:
 800e8b8:	b530      	push	{r4, r5, lr}
 800e8ba:	6902      	ldr	r2, [r0, #16]
 800e8bc:	690c      	ldr	r4, [r1, #16]
 800e8be:	1b12      	subs	r2, r2, r4
 800e8c0:	d10e      	bne.n	800e8e0 <__mcmp+0x28>
 800e8c2:	f100 0314 	add.w	r3, r0, #20
 800e8c6:	3114      	adds	r1, #20
 800e8c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e8cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e8d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e8d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e8d8:	42a5      	cmp	r5, r4
 800e8da:	d003      	beq.n	800e8e4 <__mcmp+0x2c>
 800e8dc:	d305      	bcc.n	800e8ea <__mcmp+0x32>
 800e8de:	2201      	movs	r2, #1
 800e8e0:	4610      	mov	r0, r2
 800e8e2:	bd30      	pop	{r4, r5, pc}
 800e8e4:	4283      	cmp	r3, r0
 800e8e6:	d3f3      	bcc.n	800e8d0 <__mcmp+0x18>
 800e8e8:	e7fa      	b.n	800e8e0 <__mcmp+0x28>
 800e8ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e8ee:	e7f7      	b.n	800e8e0 <__mcmp+0x28>

0800e8f0 <__mdiff>:
 800e8f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f4:	460c      	mov	r4, r1
 800e8f6:	4606      	mov	r6, r0
 800e8f8:	4611      	mov	r1, r2
 800e8fa:	4620      	mov	r0, r4
 800e8fc:	4690      	mov	r8, r2
 800e8fe:	f7ff ffdb 	bl	800e8b8 <__mcmp>
 800e902:	1e05      	subs	r5, r0, #0
 800e904:	d110      	bne.n	800e928 <__mdiff+0x38>
 800e906:	4629      	mov	r1, r5
 800e908:	4630      	mov	r0, r6
 800e90a:	f7ff fd59 	bl	800e3c0 <_Balloc>
 800e90e:	b930      	cbnz	r0, 800e91e <__mdiff+0x2e>
 800e910:	4b3a      	ldr	r3, [pc, #232]	; (800e9fc <__mdiff+0x10c>)
 800e912:	4602      	mov	r2, r0
 800e914:	f240 2137 	movw	r1, #567	; 0x237
 800e918:	4839      	ldr	r0, [pc, #228]	; (800ea00 <__mdiff+0x110>)
 800e91a:	f000 f9af 	bl	800ec7c <__assert_func>
 800e91e:	2301      	movs	r3, #1
 800e920:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e924:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e928:	bfa4      	itt	ge
 800e92a:	4643      	movge	r3, r8
 800e92c:	46a0      	movge	r8, r4
 800e92e:	4630      	mov	r0, r6
 800e930:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e934:	bfa6      	itte	ge
 800e936:	461c      	movge	r4, r3
 800e938:	2500      	movge	r5, #0
 800e93a:	2501      	movlt	r5, #1
 800e93c:	f7ff fd40 	bl	800e3c0 <_Balloc>
 800e940:	b920      	cbnz	r0, 800e94c <__mdiff+0x5c>
 800e942:	4b2e      	ldr	r3, [pc, #184]	; (800e9fc <__mdiff+0x10c>)
 800e944:	4602      	mov	r2, r0
 800e946:	f240 2145 	movw	r1, #581	; 0x245
 800e94a:	e7e5      	b.n	800e918 <__mdiff+0x28>
 800e94c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e950:	6926      	ldr	r6, [r4, #16]
 800e952:	60c5      	str	r5, [r0, #12]
 800e954:	f104 0914 	add.w	r9, r4, #20
 800e958:	f108 0514 	add.w	r5, r8, #20
 800e95c:	f100 0e14 	add.w	lr, r0, #20
 800e960:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e964:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e968:	f108 0210 	add.w	r2, r8, #16
 800e96c:	46f2      	mov	sl, lr
 800e96e:	2100      	movs	r1, #0
 800e970:	f859 3b04 	ldr.w	r3, [r9], #4
 800e974:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e978:	fa11 f88b 	uxtah	r8, r1, fp
 800e97c:	b299      	uxth	r1, r3
 800e97e:	0c1b      	lsrs	r3, r3, #16
 800e980:	eba8 0801 	sub.w	r8, r8, r1
 800e984:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e988:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e98c:	fa1f f888 	uxth.w	r8, r8
 800e990:	1419      	asrs	r1, r3, #16
 800e992:	454e      	cmp	r6, r9
 800e994:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e998:	f84a 3b04 	str.w	r3, [sl], #4
 800e99c:	d8e8      	bhi.n	800e970 <__mdiff+0x80>
 800e99e:	1b33      	subs	r3, r6, r4
 800e9a0:	3b15      	subs	r3, #21
 800e9a2:	f023 0303 	bic.w	r3, r3, #3
 800e9a6:	3304      	adds	r3, #4
 800e9a8:	3415      	adds	r4, #21
 800e9aa:	42a6      	cmp	r6, r4
 800e9ac:	bf38      	it	cc
 800e9ae:	2304      	movcc	r3, #4
 800e9b0:	441d      	add	r5, r3
 800e9b2:	4473      	add	r3, lr
 800e9b4:	469e      	mov	lr, r3
 800e9b6:	462e      	mov	r6, r5
 800e9b8:	4566      	cmp	r6, ip
 800e9ba:	d30e      	bcc.n	800e9da <__mdiff+0xea>
 800e9bc:	f10c 0203 	add.w	r2, ip, #3
 800e9c0:	1b52      	subs	r2, r2, r5
 800e9c2:	f022 0203 	bic.w	r2, r2, #3
 800e9c6:	3d03      	subs	r5, #3
 800e9c8:	45ac      	cmp	ip, r5
 800e9ca:	bf38      	it	cc
 800e9cc:	2200      	movcc	r2, #0
 800e9ce:	4413      	add	r3, r2
 800e9d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e9d4:	b17a      	cbz	r2, 800e9f6 <__mdiff+0x106>
 800e9d6:	6107      	str	r7, [r0, #16]
 800e9d8:	e7a4      	b.n	800e924 <__mdiff+0x34>
 800e9da:	f856 8b04 	ldr.w	r8, [r6], #4
 800e9de:	fa11 f288 	uxtah	r2, r1, r8
 800e9e2:	1414      	asrs	r4, r2, #16
 800e9e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e9e8:	b292      	uxth	r2, r2
 800e9ea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e9ee:	f84e 2b04 	str.w	r2, [lr], #4
 800e9f2:	1421      	asrs	r1, r4, #16
 800e9f4:	e7e0      	b.n	800e9b8 <__mdiff+0xc8>
 800e9f6:	3f01      	subs	r7, #1
 800e9f8:	e7ea      	b.n	800e9d0 <__mdiff+0xe0>
 800e9fa:	bf00      	nop
 800e9fc:	0800f940 	.word	0x0800f940
 800ea00:	0800f962 	.word	0x0800f962

0800ea04 <__d2b>:
 800ea04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea08:	460f      	mov	r7, r1
 800ea0a:	2101      	movs	r1, #1
 800ea0c:	ec59 8b10 	vmov	r8, r9, d0
 800ea10:	4616      	mov	r6, r2
 800ea12:	f7ff fcd5 	bl	800e3c0 <_Balloc>
 800ea16:	4604      	mov	r4, r0
 800ea18:	b930      	cbnz	r0, 800ea28 <__d2b+0x24>
 800ea1a:	4602      	mov	r2, r0
 800ea1c:	4b24      	ldr	r3, [pc, #144]	; (800eab0 <__d2b+0xac>)
 800ea1e:	4825      	ldr	r0, [pc, #148]	; (800eab4 <__d2b+0xb0>)
 800ea20:	f240 310f 	movw	r1, #783	; 0x30f
 800ea24:	f000 f92a 	bl	800ec7c <__assert_func>
 800ea28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ea2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea30:	bb2d      	cbnz	r5, 800ea7e <__d2b+0x7a>
 800ea32:	9301      	str	r3, [sp, #4]
 800ea34:	f1b8 0300 	subs.w	r3, r8, #0
 800ea38:	d026      	beq.n	800ea88 <__d2b+0x84>
 800ea3a:	4668      	mov	r0, sp
 800ea3c:	9300      	str	r3, [sp, #0]
 800ea3e:	f7ff fd87 	bl	800e550 <__lo0bits>
 800ea42:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ea46:	b1e8      	cbz	r0, 800ea84 <__d2b+0x80>
 800ea48:	f1c0 0320 	rsb	r3, r0, #32
 800ea4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ea50:	430b      	orrs	r3, r1
 800ea52:	40c2      	lsrs	r2, r0
 800ea54:	6163      	str	r3, [r4, #20]
 800ea56:	9201      	str	r2, [sp, #4]
 800ea58:	9b01      	ldr	r3, [sp, #4]
 800ea5a:	61a3      	str	r3, [r4, #24]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	bf14      	ite	ne
 800ea60:	2202      	movne	r2, #2
 800ea62:	2201      	moveq	r2, #1
 800ea64:	6122      	str	r2, [r4, #16]
 800ea66:	b1bd      	cbz	r5, 800ea98 <__d2b+0x94>
 800ea68:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ea6c:	4405      	add	r5, r0
 800ea6e:	603d      	str	r5, [r7, #0]
 800ea70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ea74:	6030      	str	r0, [r6, #0]
 800ea76:	4620      	mov	r0, r4
 800ea78:	b003      	add	sp, #12
 800ea7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ea82:	e7d6      	b.n	800ea32 <__d2b+0x2e>
 800ea84:	6161      	str	r1, [r4, #20]
 800ea86:	e7e7      	b.n	800ea58 <__d2b+0x54>
 800ea88:	a801      	add	r0, sp, #4
 800ea8a:	f7ff fd61 	bl	800e550 <__lo0bits>
 800ea8e:	9b01      	ldr	r3, [sp, #4]
 800ea90:	6163      	str	r3, [r4, #20]
 800ea92:	3020      	adds	r0, #32
 800ea94:	2201      	movs	r2, #1
 800ea96:	e7e5      	b.n	800ea64 <__d2b+0x60>
 800ea98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ea9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eaa0:	6038      	str	r0, [r7, #0]
 800eaa2:	6918      	ldr	r0, [r3, #16]
 800eaa4:	f7ff fd34 	bl	800e510 <__hi0bits>
 800eaa8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eaac:	e7e2      	b.n	800ea74 <__d2b+0x70>
 800eaae:	bf00      	nop
 800eab0:	0800f940 	.word	0x0800f940
 800eab4:	0800f962 	.word	0x0800f962

0800eab8 <__sread>:
 800eab8:	b510      	push	{r4, lr}
 800eaba:	460c      	mov	r4, r1
 800eabc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eac0:	f000 f8a8 	bl	800ec14 <_read_r>
 800eac4:	2800      	cmp	r0, #0
 800eac6:	bfab      	itete	ge
 800eac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eaca:	89a3      	ldrhlt	r3, [r4, #12]
 800eacc:	181b      	addge	r3, r3, r0
 800eace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ead2:	bfac      	ite	ge
 800ead4:	6563      	strge	r3, [r4, #84]	; 0x54
 800ead6:	81a3      	strhlt	r3, [r4, #12]
 800ead8:	bd10      	pop	{r4, pc}

0800eada <__swrite>:
 800eada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eade:	461f      	mov	r7, r3
 800eae0:	898b      	ldrh	r3, [r1, #12]
 800eae2:	05db      	lsls	r3, r3, #23
 800eae4:	4605      	mov	r5, r0
 800eae6:	460c      	mov	r4, r1
 800eae8:	4616      	mov	r6, r2
 800eaea:	d505      	bpl.n	800eaf8 <__swrite+0x1e>
 800eaec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eaf0:	2302      	movs	r3, #2
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	f000 f87c 	bl	800ebf0 <_lseek_r>
 800eaf8:	89a3      	ldrh	r3, [r4, #12]
 800eafa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eafe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb02:	81a3      	strh	r3, [r4, #12]
 800eb04:	4632      	mov	r2, r6
 800eb06:	463b      	mov	r3, r7
 800eb08:	4628      	mov	r0, r5
 800eb0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb0e:	f000 b8a3 	b.w	800ec58 <_write_r>

0800eb12 <__sseek>:
 800eb12:	b510      	push	{r4, lr}
 800eb14:	460c      	mov	r4, r1
 800eb16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb1a:	f000 f869 	bl	800ebf0 <_lseek_r>
 800eb1e:	1c43      	adds	r3, r0, #1
 800eb20:	89a3      	ldrh	r3, [r4, #12]
 800eb22:	bf15      	itete	ne
 800eb24:	6560      	strne	r0, [r4, #84]	; 0x54
 800eb26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eb2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eb2e:	81a3      	strheq	r3, [r4, #12]
 800eb30:	bf18      	it	ne
 800eb32:	81a3      	strhne	r3, [r4, #12]
 800eb34:	bd10      	pop	{r4, pc}

0800eb36 <__sclose>:
 800eb36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb3a:	f000 b849 	b.w	800ebd0 <_close_r>

0800eb3e <_realloc_r>:
 800eb3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb42:	4680      	mov	r8, r0
 800eb44:	4614      	mov	r4, r2
 800eb46:	460e      	mov	r6, r1
 800eb48:	b921      	cbnz	r1, 800eb54 <_realloc_r+0x16>
 800eb4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb4e:	4611      	mov	r1, r2
 800eb50:	f7ff bafc 	b.w	800e14c <_malloc_r>
 800eb54:	b92a      	cbnz	r2, 800eb62 <_realloc_r+0x24>
 800eb56:	f000 f8c5 	bl	800ece4 <_free_r>
 800eb5a:	4625      	mov	r5, r4
 800eb5c:	4628      	mov	r0, r5
 800eb5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb62:	f000 f91d 	bl	800eda0 <_malloc_usable_size_r>
 800eb66:	4284      	cmp	r4, r0
 800eb68:	4607      	mov	r7, r0
 800eb6a:	d802      	bhi.n	800eb72 <_realloc_r+0x34>
 800eb6c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eb70:	d812      	bhi.n	800eb98 <_realloc_r+0x5a>
 800eb72:	4621      	mov	r1, r4
 800eb74:	4640      	mov	r0, r8
 800eb76:	f7ff fae9 	bl	800e14c <_malloc_r>
 800eb7a:	4605      	mov	r5, r0
 800eb7c:	2800      	cmp	r0, #0
 800eb7e:	d0ed      	beq.n	800eb5c <_realloc_r+0x1e>
 800eb80:	42bc      	cmp	r4, r7
 800eb82:	4622      	mov	r2, r4
 800eb84:	4631      	mov	r1, r6
 800eb86:	bf28      	it	cs
 800eb88:	463a      	movcs	r2, r7
 800eb8a:	f7fe fad5 	bl	800d138 <memcpy>
 800eb8e:	4631      	mov	r1, r6
 800eb90:	4640      	mov	r0, r8
 800eb92:	f000 f8a7 	bl	800ece4 <_free_r>
 800eb96:	e7e1      	b.n	800eb5c <_realloc_r+0x1e>
 800eb98:	4635      	mov	r5, r6
 800eb9a:	e7df      	b.n	800eb5c <_realloc_r+0x1e>

0800eb9c <memmove>:
 800eb9c:	4288      	cmp	r0, r1
 800eb9e:	b510      	push	{r4, lr}
 800eba0:	eb01 0402 	add.w	r4, r1, r2
 800eba4:	d902      	bls.n	800ebac <memmove+0x10>
 800eba6:	4284      	cmp	r4, r0
 800eba8:	4623      	mov	r3, r4
 800ebaa:	d807      	bhi.n	800ebbc <memmove+0x20>
 800ebac:	1e43      	subs	r3, r0, #1
 800ebae:	42a1      	cmp	r1, r4
 800ebb0:	d008      	beq.n	800ebc4 <memmove+0x28>
 800ebb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ebba:	e7f8      	b.n	800ebae <memmove+0x12>
 800ebbc:	4402      	add	r2, r0
 800ebbe:	4601      	mov	r1, r0
 800ebc0:	428a      	cmp	r2, r1
 800ebc2:	d100      	bne.n	800ebc6 <memmove+0x2a>
 800ebc4:	bd10      	pop	{r4, pc}
 800ebc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ebca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ebce:	e7f7      	b.n	800ebc0 <memmove+0x24>

0800ebd0 <_close_r>:
 800ebd0:	b538      	push	{r3, r4, r5, lr}
 800ebd2:	4d06      	ldr	r5, [pc, #24]	; (800ebec <_close_r+0x1c>)
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	4604      	mov	r4, r0
 800ebd8:	4608      	mov	r0, r1
 800ebda:	602b      	str	r3, [r5, #0]
 800ebdc:	f7f4 fb39 	bl	8003252 <_close>
 800ebe0:	1c43      	adds	r3, r0, #1
 800ebe2:	d102      	bne.n	800ebea <_close_r+0x1a>
 800ebe4:	682b      	ldr	r3, [r5, #0]
 800ebe6:	b103      	cbz	r3, 800ebea <_close_r+0x1a>
 800ebe8:	6023      	str	r3, [r4, #0]
 800ebea:	bd38      	pop	{r3, r4, r5, pc}
 800ebec:	200016ac 	.word	0x200016ac

0800ebf0 <_lseek_r>:
 800ebf0:	b538      	push	{r3, r4, r5, lr}
 800ebf2:	4d07      	ldr	r5, [pc, #28]	; (800ec10 <_lseek_r+0x20>)
 800ebf4:	4604      	mov	r4, r0
 800ebf6:	4608      	mov	r0, r1
 800ebf8:	4611      	mov	r1, r2
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	602a      	str	r2, [r5, #0]
 800ebfe:	461a      	mov	r2, r3
 800ec00:	f7f4 fb4e 	bl	80032a0 <_lseek>
 800ec04:	1c43      	adds	r3, r0, #1
 800ec06:	d102      	bne.n	800ec0e <_lseek_r+0x1e>
 800ec08:	682b      	ldr	r3, [r5, #0]
 800ec0a:	b103      	cbz	r3, 800ec0e <_lseek_r+0x1e>
 800ec0c:	6023      	str	r3, [r4, #0]
 800ec0e:	bd38      	pop	{r3, r4, r5, pc}
 800ec10:	200016ac 	.word	0x200016ac

0800ec14 <_read_r>:
 800ec14:	b538      	push	{r3, r4, r5, lr}
 800ec16:	4d07      	ldr	r5, [pc, #28]	; (800ec34 <_read_r+0x20>)
 800ec18:	4604      	mov	r4, r0
 800ec1a:	4608      	mov	r0, r1
 800ec1c:	4611      	mov	r1, r2
 800ec1e:	2200      	movs	r2, #0
 800ec20:	602a      	str	r2, [r5, #0]
 800ec22:	461a      	mov	r2, r3
 800ec24:	f7f4 fadc 	bl	80031e0 <_read>
 800ec28:	1c43      	adds	r3, r0, #1
 800ec2a:	d102      	bne.n	800ec32 <_read_r+0x1e>
 800ec2c:	682b      	ldr	r3, [r5, #0]
 800ec2e:	b103      	cbz	r3, 800ec32 <_read_r+0x1e>
 800ec30:	6023      	str	r3, [r4, #0]
 800ec32:	bd38      	pop	{r3, r4, r5, pc}
 800ec34:	200016ac 	.word	0x200016ac

0800ec38 <_sbrk_r>:
 800ec38:	b538      	push	{r3, r4, r5, lr}
 800ec3a:	4d06      	ldr	r5, [pc, #24]	; (800ec54 <_sbrk_r+0x1c>)
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	4604      	mov	r4, r0
 800ec40:	4608      	mov	r0, r1
 800ec42:	602b      	str	r3, [r5, #0]
 800ec44:	f7f4 fb3a 	bl	80032bc <_sbrk>
 800ec48:	1c43      	adds	r3, r0, #1
 800ec4a:	d102      	bne.n	800ec52 <_sbrk_r+0x1a>
 800ec4c:	682b      	ldr	r3, [r5, #0]
 800ec4e:	b103      	cbz	r3, 800ec52 <_sbrk_r+0x1a>
 800ec50:	6023      	str	r3, [r4, #0]
 800ec52:	bd38      	pop	{r3, r4, r5, pc}
 800ec54:	200016ac 	.word	0x200016ac

0800ec58 <_write_r>:
 800ec58:	b538      	push	{r3, r4, r5, lr}
 800ec5a:	4d07      	ldr	r5, [pc, #28]	; (800ec78 <_write_r+0x20>)
 800ec5c:	4604      	mov	r4, r0
 800ec5e:	4608      	mov	r0, r1
 800ec60:	4611      	mov	r1, r2
 800ec62:	2200      	movs	r2, #0
 800ec64:	602a      	str	r2, [r5, #0]
 800ec66:	461a      	mov	r2, r3
 800ec68:	f7f4 fad7 	bl	800321a <_write>
 800ec6c:	1c43      	adds	r3, r0, #1
 800ec6e:	d102      	bne.n	800ec76 <_write_r+0x1e>
 800ec70:	682b      	ldr	r3, [r5, #0]
 800ec72:	b103      	cbz	r3, 800ec76 <_write_r+0x1e>
 800ec74:	6023      	str	r3, [r4, #0]
 800ec76:	bd38      	pop	{r3, r4, r5, pc}
 800ec78:	200016ac 	.word	0x200016ac

0800ec7c <__assert_func>:
 800ec7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec7e:	4614      	mov	r4, r2
 800ec80:	461a      	mov	r2, r3
 800ec82:	4b09      	ldr	r3, [pc, #36]	; (800eca8 <__assert_func+0x2c>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	4605      	mov	r5, r0
 800ec88:	68d8      	ldr	r0, [r3, #12]
 800ec8a:	b14c      	cbz	r4, 800eca0 <__assert_func+0x24>
 800ec8c:	4b07      	ldr	r3, [pc, #28]	; (800ecac <__assert_func+0x30>)
 800ec8e:	9100      	str	r1, [sp, #0]
 800ec90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec94:	4906      	ldr	r1, [pc, #24]	; (800ecb0 <__assert_func+0x34>)
 800ec96:	462b      	mov	r3, r5
 800ec98:	f000 f88a 	bl	800edb0 <fiprintf>
 800ec9c:	f000 f8a7 	bl	800edee <abort>
 800eca0:	4b04      	ldr	r3, [pc, #16]	; (800ecb4 <__assert_func+0x38>)
 800eca2:	461c      	mov	r4, r3
 800eca4:	e7f3      	b.n	800ec8e <__assert_func+0x12>
 800eca6:	bf00      	nop
 800eca8:	2000012c 	.word	0x2000012c
 800ecac:	0800fbc7 	.word	0x0800fbc7
 800ecb0:	0800fbd4 	.word	0x0800fbd4
 800ecb4:	0800fc02 	.word	0x0800fc02

0800ecb8 <_calloc_r>:
 800ecb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ecba:	fba1 2402 	umull	r2, r4, r1, r2
 800ecbe:	b94c      	cbnz	r4, 800ecd4 <_calloc_r+0x1c>
 800ecc0:	4611      	mov	r1, r2
 800ecc2:	9201      	str	r2, [sp, #4]
 800ecc4:	f7ff fa42 	bl	800e14c <_malloc_r>
 800ecc8:	9a01      	ldr	r2, [sp, #4]
 800ecca:	4605      	mov	r5, r0
 800eccc:	b930      	cbnz	r0, 800ecdc <_calloc_r+0x24>
 800ecce:	4628      	mov	r0, r5
 800ecd0:	b003      	add	sp, #12
 800ecd2:	bd30      	pop	{r4, r5, pc}
 800ecd4:	220c      	movs	r2, #12
 800ecd6:	6002      	str	r2, [r0, #0]
 800ecd8:	2500      	movs	r5, #0
 800ecda:	e7f8      	b.n	800ecce <_calloc_r+0x16>
 800ecdc:	4621      	mov	r1, r4
 800ecde:	f7fe f9f3 	bl	800d0c8 <memset>
 800ece2:	e7f4      	b.n	800ecce <_calloc_r+0x16>

0800ece4 <_free_r>:
 800ece4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ece6:	2900      	cmp	r1, #0
 800ece8:	d044      	beq.n	800ed74 <_free_r+0x90>
 800ecea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecee:	9001      	str	r0, [sp, #4]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	f1a1 0404 	sub.w	r4, r1, #4
 800ecf6:	bfb8      	it	lt
 800ecf8:	18e4      	addlt	r4, r4, r3
 800ecfa:	f7ff fb55 	bl	800e3a8 <__malloc_lock>
 800ecfe:	4a1e      	ldr	r2, [pc, #120]	; (800ed78 <_free_r+0x94>)
 800ed00:	9801      	ldr	r0, [sp, #4]
 800ed02:	6813      	ldr	r3, [r2, #0]
 800ed04:	b933      	cbnz	r3, 800ed14 <_free_r+0x30>
 800ed06:	6063      	str	r3, [r4, #4]
 800ed08:	6014      	str	r4, [r2, #0]
 800ed0a:	b003      	add	sp, #12
 800ed0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed10:	f7ff bb50 	b.w	800e3b4 <__malloc_unlock>
 800ed14:	42a3      	cmp	r3, r4
 800ed16:	d908      	bls.n	800ed2a <_free_r+0x46>
 800ed18:	6825      	ldr	r5, [r4, #0]
 800ed1a:	1961      	adds	r1, r4, r5
 800ed1c:	428b      	cmp	r3, r1
 800ed1e:	bf01      	itttt	eq
 800ed20:	6819      	ldreq	r1, [r3, #0]
 800ed22:	685b      	ldreq	r3, [r3, #4]
 800ed24:	1949      	addeq	r1, r1, r5
 800ed26:	6021      	streq	r1, [r4, #0]
 800ed28:	e7ed      	b.n	800ed06 <_free_r+0x22>
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	b10b      	cbz	r3, 800ed34 <_free_r+0x50>
 800ed30:	42a3      	cmp	r3, r4
 800ed32:	d9fa      	bls.n	800ed2a <_free_r+0x46>
 800ed34:	6811      	ldr	r1, [r2, #0]
 800ed36:	1855      	adds	r5, r2, r1
 800ed38:	42a5      	cmp	r5, r4
 800ed3a:	d10b      	bne.n	800ed54 <_free_r+0x70>
 800ed3c:	6824      	ldr	r4, [r4, #0]
 800ed3e:	4421      	add	r1, r4
 800ed40:	1854      	adds	r4, r2, r1
 800ed42:	42a3      	cmp	r3, r4
 800ed44:	6011      	str	r1, [r2, #0]
 800ed46:	d1e0      	bne.n	800ed0a <_free_r+0x26>
 800ed48:	681c      	ldr	r4, [r3, #0]
 800ed4a:	685b      	ldr	r3, [r3, #4]
 800ed4c:	6053      	str	r3, [r2, #4]
 800ed4e:	440c      	add	r4, r1
 800ed50:	6014      	str	r4, [r2, #0]
 800ed52:	e7da      	b.n	800ed0a <_free_r+0x26>
 800ed54:	d902      	bls.n	800ed5c <_free_r+0x78>
 800ed56:	230c      	movs	r3, #12
 800ed58:	6003      	str	r3, [r0, #0]
 800ed5a:	e7d6      	b.n	800ed0a <_free_r+0x26>
 800ed5c:	6825      	ldr	r5, [r4, #0]
 800ed5e:	1961      	adds	r1, r4, r5
 800ed60:	428b      	cmp	r3, r1
 800ed62:	bf04      	itt	eq
 800ed64:	6819      	ldreq	r1, [r3, #0]
 800ed66:	685b      	ldreq	r3, [r3, #4]
 800ed68:	6063      	str	r3, [r4, #4]
 800ed6a:	bf04      	itt	eq
 800ed6c:	1949      	addeq	r1, r1, r5
 800ed6e:	6021      	streq	r1, [r4, #0]
 800ed70:	6054      	str	r4, [r2, #4]
 800ed72:	e7ca      	b.n	800ed0a <_free_r+0x26>
 800ed74:	b003      	add	sp, #12
 800ed76:	bd30      	pop	{r4, r5, pc}
 800ed78:	200016a4 	.word	0x200016a4

0800ed7c <__ascii_mbtowc>:
 800ed7c:	b082      	sub	sp, #8
 800ed7e:	b901      	cbnz	r1, 800ed82 <__ascii_mbtowc+0x6>
 800ed80:	a901      	add	r1, sp, #4
 800ed82:	b142      	cbz	r2, 800ed96 <__ascii_mbtowc+0x1a>
 800ed84:	b14b      	cbz	r3, 800ed9a <__ascii_mbtowc+0x1e>
 800ed86:	7813      	ldrb	r3, [r2, #0]
 800ed88:	600b      	str	r3, [r1, #0]
 800ed8a:	7812      	ldrb	r2, [r2, #0]
 800ed8c:	1e10      	subs	r0, r2, #0
 800ed8e:	bf18      	it	ne
 800ed90:	2001      	movne	r0, #1
 800ed92:	b002      	add	sp, #8
 800ed94:	4770      	bx	lr
 800ed96:	4610      	mov	r0, r2
 800ed98:	e7fb      	b.n	800ed92 <__ascii_mbtowc+0x16>
 800ed9a:	f06f 0001 	mvn.w	r0, #1
 800ed9e:	e7f8      	b.n	800ed92 <__ascii_mbtowc+0x16>

0800eda0 <_malloc_usable_size_r>:
 800eda0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eda4:	1f18      	subs	r0, r3, #4
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	bfbc      	itt	lt
 800edaa:	580b      	ldrlt	r3, [r1, r0]
 800edac:	18c0      	addlt	r0, r0, r3
 800edae:	4770      	bx	lr

0800edb0 <fiprintf>:
 800edb0:	b40e      	push	{r1, r2, r3}
 800edb2:	b503      	push	{r0, r1, lr}
 800edb4:	4601      	mov	r1, r0
 800edb6:	ab03      	add	r3, sp, #12
 800edb8:	4805      	ldr	r0, [pc, #20]	; (800edd0 <fiprintf+0x20>)
 800edba:	f853 2b04 	ldr.w	r2, [r3], #4
 800edbe:	6800      	ldr	r0, [r0, #0]
 800edc0:	9301      	str	r3, [sp, #4]
 800edc2:	f000 f845 	bl	800ee50 <_vfiprintf_r>
 800edc6:	b002      	add	sp, #8
 800edc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800edcc:	b003      	add	sp, #12
 800edce:	4770      	bx	lr
 800edd0:	2000012c 	.word	0x2000012c

0800edd4 <__ascii_wctomb>:
 800edd4:	b149      	cbz	r1, 800edea <__ascii_wctomb+0x16>
 800edd6:	2aff      	cmp	r2, #255	; 0xff
 800edd8:	bf85      	ittet	hi
 800edda:	238a      	movhi	r3, #138	; 0x8a
 800eddc:	6003      	strhi	r3, [r0, #0]
 800edde:	700a      	strbls	r2, [r1, #0]
 800ede0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ede4:	bf98      	it	ls
 800ede6:	2001      	movls	r0, #1
 800ede8:	4770      	bx	lr
 800edea:	4608      	mov	r0, r1
 800edec:	4770      	bx	lr

0800edee <abort>:
 800edee:	b508      	push	{r3, lr}
 800edf0:	2006      	movs	r0, #6
 800edf2:	f000 fa89 	bl	800f308 <raise>
 800edf6:	2001      	movs	r0, #1
 800edf8:	f7f4 f9e8 	bl	80031cc <_exit>

0800edfc <__sfputc_r>:
 800edfc:	6893      	ldr	r3, [r2, #8]
 800edfe:	3b01      	subs	r3, #1
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	b410      	push	{r4}
 800ee04:	6093      	str	r3, [r2, #8]
 800ee06:	da08      	bge.n	800ee1a <__sfputc_r+0x1e>
 800ee08:	6994      	ldr	r4, [r2, #24]
 800ee0a:	42a3      	cmp	r3, r4
 800ee0c:	db01      	blt.n	800ee12 <__sfputc_r+0x16>
 800ee0e:	290a      	cmp	r1, #10
 800ee10:	d103      	bne.n	800ee1a <__sfputc_r+0x1e>
 800ee12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee16:	f000 b935 	b.w	800f084 <__swbuf_r>
 800ee1a:	6813      	ldr	r3, [r2, #0]
 800ee1c:	1c58      	adds	r0, r3, #1
 800ee1e:	6010      	str	r0, [r2, #0]
 800ee20:	7019      	strb	r1, [r3, #0]
 800ee22:	4608      	mov	r0, r1
 800ee24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee28:	4770      	bx	lr

0800ee2a <__sfputs_r>:
 800ee2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee2c:	4606      	mov	r6, r0
 800ee2e:	460f      	mov	r7, r1
 800ee30:	4614      	mov	r4, r2
 800ee32:	18d5      	adds	r5, r2, r3
 800ee34:	42ac      	cmp	r4, r5
 800ee36:	d101      	bne.n	800ee3c <__sfputs_r+0x12>
 800ee38:	2000      	movs	r0, #0
 800ee3a:	e007      	b.n	800ee4c <__sfputs_r+0x22>
 800ee3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee40:	463a      	mov	r2, r7
 800ee42:	4630      	mov	r0, r6
 800ee44:	f7ff ffda 	bl	800edfc <__sfputc_r>
 800ee48:	1c43      	adds	r3, r0, #1
 800ee4a:	d1f3      	bne.n	800ee34 <__sfputs_r+0xa>
 800ee4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ee50 <_vfiprintf_r>:
 800ee50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee54:	460d      	mov	r5, r1
 800ee56:	b09d      	sub	sp, #116	; 0x74
 800ee58:	4614      	mov	r4, r2
 800ee5a:	4698      	mov	r8, r3
 800ee5c:	4606      	mov	r6, r0
 800ee5e:	b118      	cbz	r0, 800ee68 <_vfiprintf_r+0x18>
 800ee60:	6a03      	ldr	r3, [r0, #32]
 800ee62:	b90b      	cbnz	r3, 800ee68 <_vfiprintf_r+0x18>
 800ee64:	f7fe f8fa 	bl	800d05c <__sinit>
 800ee68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee6a:	07d9      	lsls	r1, r3, #31
 800ee6c:	d405      	bmi.n	800ee7a <_vfiprintf_r+0x2a>
 800ee6e:	89ab      	ldrh	r3, [r5, #12]
 800ee70:	059a      	lsls	r2, r3, #22
 800ee72:	d402      	bmi.n	800ee7a <_vfiprintf_r+0x2a>
 800ee74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee76:	f7fe f95d 	bl	800d134 <__retarget_lock_acquire_recursive>
 800ee7a:	89ab      	ldrh	r3, [r5, #12]
 800ee7c:	071b      	lsls	r3, r3, #28
 800ee7e:	d501      	bpl.n	800ee84 <_vfiprintf_r+0x34>
 800ee80:	692b      	ldr	r3, [r5, #16]
 800ee82:	b99b      	cbnz	r3, 800eeac <_vfiprintf_r+0x5c>
 800ee84:	4629      	mov	r1, r5
 800ee86:	4630      	mov	r0, r6
 800ee88:	f000 f93a 	bl	800f100 <__swsetup_r>
 800ee8c:	b170      	cbz	r0, 800eeac <_vfiprintf_r+0x5c>
 800ee8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee90:	07dc      	lsls	r4, r3, #31
 800ee92:	d504      	bpl.n	800ee9e <_vfiprintf_r+0x4e>
 800ee94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee98:	b01d      	add	sp, #116	; 0x74
 800ee9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee9e:	89ab      	ldrh	r3, [r5, #12]
 800eea0:	0598      	lsls	r0, r3, #22
 800eea2:	d4f7      	bmi.n	800ee94 <_vfiprintf_r+0x44>
 800eea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eea6:	f7fe f946 	bl	800d136 <__retarget_lock_release_recursive>
 800eeaa:	e7f3      	b.n	800ee94 <_vfiprintf_r+0x44>
 800eeac:	2300      	movs	r3, #0
 800eeae:	9309      	str	r3, [sp, #36]	; 0x24
 800eeb0:	2320      	movs	r3, #32
 800eeb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eeb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800eeba:	2330      	movs	r3, #48	; 0x30
 800eebc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f070 <_vfiprintf_r+0x220>
 800eec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eec4:	f04f 0901 	mov.w	r9, #1
 800eec8:	4623      	mov	r3, r4
 800eeca:	469a      	mov	sl, r3
 800eecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eed0:	b10a      	cbz	r2, 800eed6 <_vfiprintf_r+0x86>
 800eed2:	2a25      	cmp	r2, #37	; 0x25
 800eed4:	d1f9      	bne.n	800eeca <_vfiprintf_r+0x7a>
 800eed6:	ebba 0b04 	subs.w	fp, sl, r4
 800eeda:	d00b      	beq.n	800eef4 <_vfiprintf_r+0xa4>
 800eedc:	465b      	mov	r3, fp
 800eede:	4622      	mov	r2, r4
 800eee0:	4629      	mov	r1, r5
 800eee2:	4630      	mov	r0, r6
 800eee4:	f7ff ffa1 	bl	800ee2a <__sfputs_r>
 800eee8:	3001      	adds	r0, #1
 800eeea:	f000 80a9 	beq.w	800f040 <_vfiprintf_r+0x1f0>
 800eeee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eef0:	445a      	add	r2, fp
 800eef2:	9209      	str	r2, [sp, #36]	; 0x24
 800eef4:	f89a 3000 	ldrb.w	r3, [sl]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	f000 80a1 	beq.w	800f040 <_vfiprintf_r+0x1f0>
 800eefe:	2300      	movs	r3, #0
 800ef00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef08:	f10a 0a01 	add.w	sl, sl, #1
 800ef0c:	9304      	str	r3, [sp, #16]
 800ef0e:	9307      	str	r3, [sp, #28]
 800ef10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef14:	931a      	str	r3, [sp, #104]	; 0x68
 800ef16:	4654      	mov	r4, sl
 800ef18:	2205      	movs	r2, #5
 800ef1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef1e:	4854      	ldr	r0, [pc, #336]	; (800f070 <_vfiprintf_r+0x220>)
 800ef20:	f7f1 f96e 	bl	8000200 <memchr>
 800ef24:	9a04      	ldr	r2, [sp, #16]
 800ef26:	b9d8      	cbnz	r0, 800ef60 <_vfiprintf_r+0x110>
 800ef28:	06d1      	lsls	r1, r2, #27
 800ef2a:	bf44      	itt	mi
 800ef2c:	2320      	movmi	r3, #32
 800ef2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef32:	0713      	lsls	r3, r2, #28
 800ef34:	bf44      	itt	mi
 800ef36:	232b      	movmi	r3, #43	; 0x2b
 800ef38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ef40:	2b2a      	cmp	r3, #42	; 0x2a
 800ef42:	d015      	beq.n	800ef70 <_vfiprintf_r+0x120>
 800ef44:	9a07      	ldr	r2, [sp, #28]
 800ef46:	4654      	mov	r4, sl
 800ef48:	2000      	movs	r0, #0
 800ef4a:	f04f 0c0a 	mov.w	ip, #10
 800ef4e:	4621      	mov	r1, r4
 800ef50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef54:	3b30      	subs	r3, #48	; 0x30
 800ef56:	2b09      	cmp	r3, #9
 800ef58:	d94d      	bls.n	800eff6 <_vfiprintf_r+0x1a6>
 800ef5a:	b1b0      	cbz	r0, 800ef8a <_vfiprintf_r+0x13a>
 800ef5c:	9207      	str	r2, [sp, #28]
 800ef5e:	e014      	b.n	800ef8a <_vfiprintf_r+0x13a>
 800ef60:	eba0 0308 	sub.w	r3, r0, r8
 800ef64:	fa09 f303 	lsl.w	r3, r9, r3
 800ef68:	4313      	orrs	r3, r2
 800ef6a:	9304      	str	r3, [sp, #16]
 800ef6c:	46a2      	mov	sl, r4
 800ef6e:	e7d2      	b.n	800ef16 <_vfiprintf_r+0xc6>
 800ef70:	9b03      	ldr	r3, [sp, #12]
 800ef72:	1d19      	adds	r1, r3, #4
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	9103      	str	r1, [sp, #12]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	bfbb      	ittet	lt
 800ef7c:	425b      	neglt	r3, r3
 800ef7e:	f042 0202 	orrlt.w	r2, r2, #2
 800ef82:	9307      	strge	r3, [sp, #28]
 800ef84:	9307      	strlt	r3, [sp, #28]
 800ef86:	bfb8      	it	lt
 800ef88:	9204      	strlt	r2, [sp, #16]
 800ef8a:	7823      	ldrb	r3, [r4, #0]
 800ef8c:	2b2e      	cmp	r3, #46	; 0x2e
 800ef8e:	d10c      	bne.n	800efaa <_vfiprintf_r+0x15a>
 800ef90:	7863      	ldrb	r3, [r4, #1]
 800ef92:	2b2a      	cmp	r3, #42	; 0x2a
 800ef94:	d134      	bne.n	800f000 <_vfiprintf_r+0x1b0>
 800ef96:	9b03      	ldr	r3, [sp, #12]
 800ef98:	1d1a      	adds	r2, r3, #4
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	9203      	str	r2, [sp, #12]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	bfb8      	it	lt
 800efa2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800efa6:	3402      	adds	r4, #2
 800efa8:	9305      	str	r3, [sp, #20]
 800efaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f080 <_vfiprintf_r+0x230>
 800efae:	7821      	ldrb	r1, [r4, #0]
 800efb0:	2203      	movs	r2, #3
 800efb2:	4650      	mov	r0, sl
 800efb4:	f7f1 f924 	bl	8000200 <memchr>
 800efb8:	b138      	cbz	r0, 800efca <_vfiprintf_r+0x17a>
 800efba:	9b04      	ldr	r3, [sp, #16]
 800efbc:	eba0 000a 	sub.w	r0, r0, sl
 800efc0:	2240      	movs	r2, #64	; 0x40
 800efc2:	4082      	lsls	r2, r0
 800efc4:	4313      	orrs	r3, r2
 800efc6:	3401      	adds	r4, #1
 800efc8:	9304      	str	r3, [sp, #16]
 800efca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efce:	4829      	ldr	r0, [pc, #164]	; (800f074 <_vfiprintf_r+0x224>)
 800efd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800efd4:	2206      	movs	r2, #6
 800efd6:	f7f1 f913 	bl	8000200 <memchr>
 800efda:	2800      	cmp	r0, #0
 800efdc:	d03f      	beq.n	800f05e <_vfiprintf_r+0x20e>
 800efde:	4b26      	ldr	r3, [pc, #152]	; (800f078 <_vfiprintf_r+0x228>)
 800efe0:	bb1b      	cbnz	r3, 800f02a <_vfiprintf_r+0x1da>
 800efe2:	9b03      	ldr	r3, [sp, #12]
 800efe4:	3307      	adds	r3, #7
 800efe6:	f023 0307 	bic.w	r3, r3, #7
 800efea:	3308      	adds	r3, #8
 800efec:	9303      	str	r3, [sp, #12]
 800efee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eff0:	443b      	add	r3, r7
 800eff2:	9309      	str	r3, [sp, #36]	; 0x24
 800eff4:	e768      	b.n	800eec8 <_vfiprintf_r+0x78>
 800eff6:	fb0c 3202 	mla	r2, ip, r2, r3
 800effa:	460c      	mov	r4, r1
 800effc:	2001      	movs	r0, #1
 800effe:	e7a6      	b.n	800ef4e <_vfiprintf_r+0xfe>
 800f000:	2300      	movs	r3, #0
 800f002:	3401      	adds	r4, #1
 800f004:	9305      	str	r3, [sp, #20]
 800f006:	4619      	mov	r1, r3
 800f008:	f04f 0c0a 	mov.w	ip, #10
 800f00c:	4620      	mov	r0, r4
 800f00e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f012:	3a30      	subs	r2, #48	; 0x30
 800f014:	2a09      	cmp	r2, #9
 800f016:	d903      	bls.n	800f020 <_vfiprintf_r+0x1d0>
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d0c6      	beq.n	800efaa <_vfiprintf_r+0x15a>
 800f01c:	9105      	str	r1, [sp, #20]
 800f01e:	e7c4      	b.n	800efaa <_vfiprintf_r+0x15a>
 800f020:	fb0c 2101 	mla	r1, ip, r1, r2
 800f024:	4604      	mov	r4, r0
 800f026:	2301      	movs	r3, #1
 800f028:	e7f0      	b.n	800f00c <_vfiprintf_r+0x1bc>
 800f02a:	ab03      	add	r3, sp, #12
 800f02c:	9300      	str	r3, [sp, #0]
 800f02e:	462a      	mov	r2, r5
 800f030:	4b12      	ldr	r3, [pc, #72]	; (800f07c <_vfiprintf_r+0x22c>)
 800f032:	a904      	add	r1, sp, #16
 800f034:	4630      	mov	r0, r6
 800f036:	f7fd fbb1 	bl	800c79c <_printf_float>
 800f03a:	4607      	mov	r7, r0
 800f03c:	1c78      	adds	r0, r7, #1
 800f03e:	d1d6      	bne.n	800efee <_vfiprintf_r+0x19e>
 800f040:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f042:	07d9      	lsls	r1, r3, #31
 800f044:	d405      	bmi.n	800f052 <_vfiprintf_r+0x202>
 800f046:	89ab      	ldrh	r3, [r5, #12]
 800f048:	059a      	lsls	r2, r3, #22
 800f04a:	d402      	bmi.n	800f052 <_vfiprintf_r+0x202>
 800f04c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f04e:	f7fe f872 	bl	800d136 <__retarget_lock_release_recursive>
 800f052:	89ab      	ldrh	r3, [r5, #12]
 800f054:	065b      	lsls	r3, r3, #25
 800f056:	f53f af1d 	bmi.w	800ee94 <_vfiprintf_r+0x44>
 800f05a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f05c:	e71c      	b.n	800ee98 <_vfiprintf_r+0x48>
 800f05e:	ab03      	add	r3, sp, #12
 800f060:	9300      	str	r3, [sp, #0]
 800f062:	462a      	mov	r2, r5
 800f064:	4b05      	ldr	r3, [pc, #20]	; (800f07c <_vfiprintf_r+0x22c>)
 800f066:	a904      	add	r1, sp, #16
 800f068:	4630      	mov	r0, r6
 800f06a:	f7fd fe3b 	bl	800cce4 <_printf_i>
 800f06e:	e7e4      	b.n	800f03a <_vfiprintf_r+0x1ea>
 800f070:	0800f951 	.word	0x0800f951
 800f074:	0800f95b 	.word	0x0800f95b
 800f078:	0800c79d 	.word	0x0800c79d
 800f07c:	0800ee2b 	.word	0x0800ee2b
 800f080:	0800f957 	.word	0x0800f957

0800f084 <__swbuf_r>:
 800f084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f086:	460e      	mov	r6, r1
 800f088:	4614      	mov	r4, r2
 800f08a:	4605      	mov	r5, r0
 800f08c:	b118      	cbz	r0, 800f096 <__swbuf_r+0x12>
 800f08e:	6a03      	ldr	r3, [r0, #32]
 800f090:	b90b      	cbnz	r3, 800f096 <__swbuf_r+0x12>
 800f092:	f7fd ffe3 	bl	800d05c <__sinit>
 800f096:	69a3      	ldr	r3, [r4, #24]
 800f098:	60a3      	str	r3, [r4, #8]
 800f09a:	89a3      	ldrh	r3, [r4, #12]
 800f09c:	071a      	lsls	r2, r3, #28
 800f09e:	d525      	bpl.n	800f0ec <__swbuf_r+0x68>
 800f0a0:	6923      	ldr	r3, [r4, #16]
 800f0a2:	b31b      	cbz	r3, 800f0ec <__swbuf_r+0x68>
 800f0a4:	6823      	ldr	r3, [r4, #0]
 800f0a6:	6922      	ldr	r2, [r4, #16]
 800f0a8:	1a98      	subs	r0, r3, r2
 800f0aa:	6963      	ldr	r3, [r4, #20]
 800f0ac:	b2f6      	uxtb	r6, r6
 800f0ae:	4283      	cmp	r3, r0
 800f0b0:	4637      	mov	r7, r6
 800f0b2:	dc04      	bgt.n	800f0be <__swbuf_r+0x3a>
 800f0b4:	4621      	mov	r1, r4
 800f0b6:	4628      	mov	r0, r5
 800f0b8:	f7ff f94e 	bl	800e358 <_fflush_r>
 800f0bc:	b9e0      	cbnz	r0, 800f0f8 <__swbuf_r+0x74>
 800f0be:	68a3      	ldr	r3, [r4, #8]
 800f0c0:	3b01      	subs	r3, #1
 800f0c2:	60a3      	str	r3, [r4, #8]
 800f0c4:	6823      	ldr	r3, [r4, #0]
 800f0c6:	1c5a      	adds	r2, r3, #1
 800f0c8:	6022      	str	r2, [r4, #0]
 800f0ca:	701e      	strb	r6, [r3, #0]
 800f0cc:	6962      	ldr	r2, [r4, #20]
 800f0ce:	1c43      	adds	r3, r0, #1
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d004      	beq.n	800f0de <__swbuf_r+0x5a>
 800f0d4:	89a3      	ldrh	r3, [r4, #12]
 800f0d6:	07db      	lsls	r3, r3, #31
 800f0d8:	d506      	bpl.n	800f0e8 <__swbuf_r+0x64>
 800f0da:	2e0a      	cmp	r6, #10
 800f0dc:	d104      	bne.n	800f0e8 <__swbuf_r+0x64>
 800f0de:	4621      	mov	r1, r4
 800f0e0:	4628      	mov	r0, r5
 800f0e2:	f7ff f939 	bl	800e358 <_fflush_r>
 800f0e6:	b938      	cbnz	r0, 800f0f8 <__swbuf_r+0x74>
 800f0e8:	4638      	mov	r0, r7
 800f0ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0ec:	4621      	mov	r1, r4
 800f0ee:	4628      	mov	r0, r5
 800f0f0:	f000 f806 	bl	800f100 <__swsetup_r>
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	d0d5      	beq.n	800f0a4 <__swbuf_r+0x20>
 800f0f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f0fc:	e7f4      	b.n	800f0e8 <__swbuf_r+0x64>
	...

0800f100 <__swsetup_r>:
 800f100:	b538      	push	{r3, r4, r5, lr}
 800f102:	4b2a      	ldr	r3, [pc, #168]	; (800f1ac <__swsetup_r+0xac>)
 800f104:	4605      	mov	r5, r0
 800f106:	6818      	ldr	r0, [r3, #0]
 800f108:	460c      	mov	r4, r1
 800f10a:	b118      	cbz	r0, 800f114 <__swsetup_r+0x14>
 800f10c:	6a03      	ldr	r3, [r0, #32]
 800f10e:	b90b      	cbnz	r3, 800f114 <__swsetup_r+0x14>
 800f110:	f7fd ffa4 	bl	800d05c <__sinit>
 800f114:	89a3      	ldrh	r3, [r4, #12]
 800f116:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f11a:	0718      	lsls	r0, r3, #28
 800f11c:	d422      	bmi.n	800f164 <__swsetup_r+0x64>
 800f11e:	06d9      	lsls	r1, r3, #27
 800f120:	d407      	bmi.n	800f132 <__swsetup_r+0x32>
 800f122:	2309      	movs	r3, #9
 800f124:	602b      	str	r3, [r5, #0]
 800f126:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f12a:	81a3      	strh	r3, [r4, #12]
 800f12c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f130:	e034      	b.n	800f19c <__swsetup_r+0x9c>
 800f132:	0758      	lsls	r0, r3, #29
 800f134:	d512      	bpl.n	800f15c <__swsetup_r+0x5c>
 800f136:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f138:	b141      	cbz	r1, 800f14c <__swsetup_r+0x4c>
 800f13a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f13e:	4299      	cmp	r1, r3
 800f140:	d002      	beq.n	800f148 <__swsetup_r+0x48>
 800f142:	4628      	mov	r0, r5
 800f144:	f7ff fdce 	bl	800ece4 <_free_r>
 800f148:	2300      	movs	r3, #0
 800f14a:	6363      	str	r3, [r4, #52]	; 0x34
 800f14c:	89a3      	ldrh	r3, [r4, #12]
 800f14e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f152:	81a3      	strh	r3, [r4, #12]
 800f154:	2300      	movs	r3, #0
 800f156:	6063      	str	r3, [r4, #4]
 800f158:	6923      	ldr	r3, [r4, #16]
 800f15a:	6023      	str	r3, [r4, #0]
 800f15c:	89a3      	ldrh	r3, [r4, #12]
 800f15e:	f043 0308 	orr.w	r3, r3, #8
 800f162:	81a3      	strh	r3, [r4, #12]
 800f164:	6923      	ldr	r3, [r4, #16]
 800f166:	b94b      	cbnz	r3, 800f17c <__swsetup_r+0x7c>
 800f168:	89a3      	ldrh	r3, [r4, #12]
 800f16a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f16e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f172:	d003      	beq.n	800f17c <__swsetup_r+0x7c>
 800f174:	4621      	mov	r1, r4
 800f176:	4628      	mov	r0, r5
 800f178:	f000 f840 	bl	800f1fc <__smakebuf_r>
 800f17c:	89a0      	ldrh	r0, [r4, #12]
 800f17e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f182:	f010 0301 	ands.w	r3, r0, #1
 800f186:	d00a      	beq.n	800f19e <__swsetup_r+0x9e>
 800f188:	2300      	movs	r3, #0
 800f18a:	60a3      	str	r3, [r4, #8]
 800f18c:	6963      	ldr	r3, [r4, #20]
 800f18e:	425b      	negs	r3, r3
 800f190:	61a3      	str	r3, [r4, #24]
 800f192:	6923      	ldr	r3, [r4, #16]
 800f194:	b943      	cbnz	r3, 800f1a8 <__swsetup_r+0xa8>
 800f196:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f19a:	d1c4      	bne.n	800f126 <__swsetup_r+0x26>
 800f19c:	bd38      	pop	{r3, r4, r5, pc}
 800f19e:	0781      	lsls	r1, r0, #30
 800f1a0:	bf58      	it	pl
 800f1a2:	6963      	ldrpl	r3, [r4, #20]
 800f1a4:	60a3      	str	r3, [r4, #8]
 800f1a6:	e7f4      	b.n	800f192 <__swsetup_r+0x92>
 800f1a8:	2000      	movs	r0, #0
 800f1aa:	e7f7      	b.n	800f19c <__swsetup_r+0x9c>
 800f1ac:	2000012c 	.word	0x2000012c

0800f1b0 <__swhatbuf_r>:
 800f1b0:	b570      	push	{r4, r5, r6, lr}
 800f1b2:	460c      	mov	r4, r1
 800f1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1b8:	2900      	cmp	r1, #0
 800f1ba:	b096      	sub	sp, #88	; 0x58
 800f1bc:	4615      	mov	r5, r2
 800f1be:	461e      	mov	r6, r3
 800f1c0:	da0d      	bge.n	800f1de <__swhatbuf_r+0x2e>
 800f1c2:	89a3      	ldrh	r3, [r4, #12]
 800f1c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f1c8:	f04f 0100 	mov.w	r1, #0
 800f1cc:	bf0c      	ite	eq
 800f1ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f1d2:	2340      	movne	r3, #64	; 0x40
 800f1d4:	2000      	movs	r0, #0
 800f1d6:	6031      	str	r1, [r6, #0]
 800f1d8:	602b      	str	r3, [r5, #0]
 800f1da:	b016      	add	sp, #88	; 0x58
 800f1dc:	bd70      	pop	{r4, r5, r6, pc}
 800f1de:	466a      	mov	r2, sp
 800f1e0:	f000 f848 	bl	800f274 <_fstat_r>
 800f1e4:	2800      	cmp	r0, #0
 800f1e6:	dbec      	blt.n	800f1c2 <__swhatbuf_r+0x12>
 800f1e8:	9901      	ldr	r1, [sp, #4]
 800f1ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f1ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f1f2:	4259      	negs	r1, r3
 800f1f4:	4159      	adcs	r1, r3
 800f1f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1fa:	e7eb      	b.n	800f1d4 <__swhatbuf_r+0x24>

0800f1fc <__smakebuf_r>:
 800f1fc:	898b      	ldrh	r3, [r1, #12]
 800f1fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f200:	079d      	lsls	r5, r3, #30
 800f202:	4606      	mov	r6, r0
 800f204:	460c      	mov	r4, r1
 800f206:	d507      	bpl.n	800f218 <__smakebuf_r+0x1c>
 800f208:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f20c:	6023      	str	r3, [r4, #0]
 800f20e:	6123      	str	r3, [r4, #16]
 800f210:	2301      	movs	r3, #1
 800f212:	6163      	str	r3, [r4, #20]
 800f214:	b002      	add	sp, #8
 800f216:	bd70      	pop	{r4, r5, r6, pc}
 800f218:	ab01      	add	r3, sp, #4
 800f21a:	466a      	mov	r2, sp
 800f21c:	f7ff ffc8 	bl	800f1b0 <__swhatbuf_r>
 800f220:	9900      	ldr	r1, [sp, #0]
 800f222:	4605      	mov	r5, r0
 800f224:	4630      	mov	r0, r6
 800f226:	f7fe ff91 	bl	800e14c <_malloc_r>
 800f22a:	b948      	cbnz	r0, 800f240 <__smakebuf_r+0x44>
 800f22c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f230:	059a      	lsls	r2, r3, #22
 800f232:	d4ef      	bmi.n	800f214 <__smakebuf_r+0x18>
 800f234:	f023 0303 	bic.w	r3, r3, #3
 800f238:	f043 0302 	orr.w	r3, r3, #2
 800f23c:	81a3      	strh	r3, [r4, #12]
 800f23e:	e7e3      	b.n	800f208 <__smakebuf_r+0xc>
 800f240:	89a3      	ldrh	r3, [r4, #12]
 800f242:	6020      	str	r0, [r4, #0]
 800f244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f248:	81a3      	strh	r3, [r4, #12]
 800f24a:	9b00      	ldr	r3, [sp, #0]
 800f24c:	6163      	str	r3, [r4, #20]
 800f24e:	9b01      	ldr	r3, [sp, #4]
 800f250:	6120      	str	r0, [r4, #16]
 800f252:	b15b      	cbz	r3, 800f26c <__smakebuf_r+0x70>
 800f254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f258:	4630      	mov	r0, r6
 800f25a:	f000 f81d 	bl	800f298 <_isatty_r>
 800f25e:	b128      	cbz	r0, 800f26c <__smakebuf_r+0x70>
 800f260:	89a3      	ldrh	r3, [r4, #12]
 800f262:	f023 0303 	bic.w	r3, r3, #3
 800f266:	f043 0301 	orr.w	r3, r3, #1
 800f26a:	81a3      	strh	r3, [r4, #12]
 800f26c:	89a3      	ldrh	r3, [r4, #12]
 800f26e:	431d      	orrs	r5, r3
 800f270:	81a5      	strh	r5, [r4, #12]
 800f272:	e7cf      	b.n	800f214 <__smakebuf_r+0x18>

0800f274 <_fstat_r>:
 800f274:	b538      	push	{r3, r4, r5, lr}
 800f276:	4d07      	ldr	r5, [pc, #28]	; (800f294 <_fstat_r+0x20>)
 800f278:	2300      	movs	r3, #0
 800f27a:	4604      	mov	r4, r0
 800f27c:	4608      	mov	r0, r1
 800f27e:	4611      	mov	r1, r2
 800f280:	602b      	str	r3, [r5, #0]
 800f282:	f7f3 fff2 	bl	800326a <_fstat>
 800f286:	1c43      	adds	r3, r0, #1
 800f288:	d102      	bne.n	800f290 <_fstat_r+0x1c>
 800f28a:	682b      	ldr	r3, [r5, #0]
 800f28c:	b103      	cbz	r3, 800f290 <_fstat_r+0x1c>
 800f28e:	6023      	str	r3, [r4, #0]
 800f290:	bd38      	pop	{r3, r4, r5, pc}
 800f292:	bf00      	nop
 800f294:	200016ac 	.word	0x200016ac

0800f298 <_isatty_r>:
 800f298:	b538      	push	{r3, r4, r5, lr}
 800f29a:	4d06      	ldr	r5, [pc, #24]	; (800f2b4 <_isatty_r+0x1c>)
 800f29c:	2300      	movs	r3, #0
 800f29e:	4604      	mov	r4, r0
 800f2a0:	4608      	mov	r0, r1
 800f2a2:	602b      	str	r3, [r5, #0]
 800f2a4:	f7f3 fff1 	bl	800328a <_isatty>
 800f2a8:	1c43      	adds	r3, r0, #1
 800f2aa:	d102      	bne.n	800f2b2 <_isatty_r+0x1a>
 800f2ac:	682b      	ldr	r3, [r5, #0]
 800f2ae:	b103      	cbz	r3, 800f2b2 <_isatty_r+0x1a>
 800f2b0:	6023      	str	r3, [r4, #0]
 800f2b2:	bd38      	pop	{r3, r4, r5, pc}
 800f2b4:	200016ac 	.word	0x200016ac

0800f2b8 <_raise_r>:
 800f2b8:	291f      	cmp	r1, #31
 800f2ba:	b538      	push	{r3, r4, r5, lr}
 800f2bc:	4604      	mov	r4, r0
 800f2be:	460d      	mov	r5, r1
 800f2c0:	d904      	bls.n	800f2cc <_raise_r+0x14>
 800f2c2:	2316      	movs	r3, #22
 800f2c4:	6003      	str	r3, [r0, #0]
 800f2c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f2ca:	bd38      	pop	{r3, r4, r5, pc}
 800f2cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f2ce:	b112      	cbz	r2, 800f2d6 <_raise_r+0x1e>
 800f2d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f2d4:	b94b      	cbnz	r3, 800f2ea <_raise_r+0x32>
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	f000 f830 	bl	800f33c <_getpid_r>
 800f2dc:	462a      	mov	r2, r5
 800f2de:	4601      	mov	r1, r0
 800f2e0:	4620      	mov	r0, r4
 800f2e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2e6:	f000 b817 	b.w	800f318 <_kill_r>
 800f2ea:	2b01      	cmp	r3, #1
 800f2ec:	d00a      	beq.n	800f304 <_raise_r+0x4c>
 800f2ee:	1c59      	adds	r1, r3, #1
 800f2f0:	d103      	bne.n	800f2fa <_raise_r+0x42>
 800f2f2:	2316      	movs	r3, #22
 800f2f4:	6003      	str	r3, [r0, #0]
 800f2f6:	2001      	movs	r0, #1
 800f2f8:	e7e7      	b.n	800f2ca <_raise_r+0x12>
 800f2fa:	2400      	movs	r4, #0
 800f2fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f300:	4628      	mov	r0, r5
 800f302:	4798      	blx	r3
 800f304:	2000      	movs	r0, #0
 800f306:	e7e0      	b.n	800f2ca <_raise_r+0x12>

0800f308 <raise>:
 800f308:	4b02      	ldr	r3, [pc, #8]	; (800f314 <raise+0xc>)
 800f30a:	4601      	mov	r1, r0
 800f30c:	6818      	ldr	r0, [r3, #0]
 800f30e:	f7ff bfd3 	b.w	800f2b8 <_raise_r>
 800f312:	bf00      	nop
 800f314:	2000012c 	.word	0x2000012c

0800f318 <_kill_r>:
 800f318:	b538      	push	{r3, r4, r5, lr}
 800f31a:	4d07      	ldr	r5, [pc, #28]	; (800f338 <_kill_r+0x20>)
 800f31c:	2300      	movs	r3, #0
 800f31e:	4604      	mov	r4, r0
 800f320:	4608      	mov	r0, r1
 800f322:	4611      	mov	r1, r2
 800f324:	602b      	str	r3, [r5, #0]
 800f326:	f7f3 ff41 	bl	80031ac <_kill>
 800f32a:	1c43      	adds	r3, r0, #1
 800f32c:	d102      	bne.n	800f334 <_kill_r+0x1c>
 800f32e:	682b      	ldr	r3, [r5, #0]
 800f330:	b103      	cbz	r3, 800f334 <_kill_r+0x1c>
 800f332:	6023      	str	r3, [r4, #0]
 800f334:	bd38      	pop	{r3, r4, r5, pc}
 800f336:	bf00      	nop
 800f338:	200016ac 	.word	0x200016ac

0800f33c <_getpid_r>:
 800f33c:	f7f3 bf2e 	b.w	800319c <_getpid>

0800f340 <_init>:
 800f340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f342:	bf00      	nop
 800f344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f346:	bc08      	pop	{r3}
 800f348:	469e      	mov	lr, r3
 800f34a:	4770      	bx	lr

0800f34c <_fini>:
 800f34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f34e:	bf00      	nop
 800f350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f352:	bc08      	pop	{r3}
 800f354:	469e      	mov	lr, r3
 800f356:	4770      	bx	lr
