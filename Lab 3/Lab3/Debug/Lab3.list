
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006324  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  080064e0  080064e0  000164e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d24  08006d24  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006d24  08006d24  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d24  08006d24  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d24  08006d24  00016d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d28  08006d28  00016d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00080570  20000010  08006d3c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20080580  08006d3c  00020580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001660f  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b5a  00000000  00000000  00036707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001348  00000000  00000000  00039268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eb5  00000000  00000000  0003a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c8dd  00000000  00000000  0003b465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000146bd  00000000  00000000  00067d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011a925  00000000  00000000  0007c3ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005290  00000000  00000000  00196d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0019bfb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  0019c01b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0019c115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000010 	.word	0x20000010
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080064c8 	.word	0x080064c8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000014 	.word	0x20000014
 80001f8:	080064c8 	.word	0x080064c8

080001fc <__aeabi_dmul>:
 80001fc:	b570      	push	{r4, r5, r6, lr}
 80001fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000202:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000206:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800020a:	bf1d      	ittte	ne
 800020c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000210:	ea94 0f0c 	teqne	r4, ip
 8000214:	ea95 0f0c 	teqne	r5, ip
 8000218:	f000 f8de 	bleq	80003d8 <__aeabi_dmul+0x1dc>
 800021c:	442c      	add	r4, r5
 800021e:	ea81 0603 	eor.w	r6, r1, r3
 8000222:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000226:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800022a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800022e:	bf18      	it	ne
 8000230:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800023c:	d038      	beq.n	80002b0 <__aeabi_dmul+0xb4>
 800023e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000242:	f04f 0500 	mov.w	r5, #0
 8000246:	fbe1 e502 	umlal	lr, r5, r1, r2
 800024a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800024e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000252:	f04f 0600 	mov.w	r6, #0
 8000256:	fbe1 5603 	umlal	r5, r6, r1, r3
 800025a:	f09c 0f00 	teq	ip, #0
 800025e:	bf18      	it	ne
 8000260:	f04e 0e01 	orrne.w	lr, lr, #1
 8000264:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000268:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800026c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000270:	d204      	bcs.n	800027c <__aeabi_dmul+0x80>
 8000272:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000276:	416d      	adcs	r5, r5
 8000278:	eb46 0606 	adc.w	r6, r6, r6
 800027c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000280:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000284:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000288:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800028c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000290:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000294:	bf88      	it	hi
 8000296:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800029a:	d81e      	bhi.n	80002da <__aeabi_dmul+0xde>
 800029c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002a0:	bf08      	it	eq
 80002a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002a6:	f150 0000 	adcs.w	r0, r0, #0
 80002aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002b4:	ea46 0101 	orr.w	r1, r6, r1
 80002b8:	ea40 0002 	orr.w	r0, r0, r2
 80002bc:	ea81 0103 	eor.w	r1, r1, r3
 80002c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002c4:	bfc2      	ittt	gt
 80002c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ce:	bd70      	popgt	{r4, r5, r6, pc}
 80002d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002d4:	f04f 0e00 	mov.w	lr, #0
 80002d8:	3c01      	subs	r4, #1
 80002da:	f300 80ab 	bgt.w	8000434 <__aeabi_dmul+0x238>
 80002de:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002e2:	bfde      	ittt	le
 80002e4:	2000      	movle	r0, #0
 80002e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ea:	bd70      	pople	{r4, r5, r6, pc}
 80002ec:	f1c4 0400 	rsb	r4, r4, #0
 80002f0:	3c20      	subs	r4, #32
 80002f2:	da35      	bge.n	8000360 <__aeabi_dmul+0x164>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc1b      	bgt.n	8000330 <__aeabi_dmul+0x134>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0520 	rsb	r5, r4, #32
 8000300:	fa00 f305 	lsl.w	r3, r0, r5
 8000304:	fa20 f004 	lsr.w	r0, r0, r4
 8000308:	fa01 f205 	lsl.w	r2, r1, r5
 800030c:	ea40 0002 	orr.w	r0, r0, r2
 8000310:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000314:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	fa21 f604 	lsr.w	r6, r1, r4
 8000320:	eb42 0106 	adc.w	r1, r2, r6
 8000324:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000328:	bf08      	it	eq
 800032a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	f1c4 040c 	rsb	r4, r4, #12
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f304 	lsl.w	r3, r0, r4
 800033c:	fa20 f005 	lsr.w	r0, r0, r5
 8000340:	fa01 f204 	lsl.w	r2, r1, r4
 8000344:	ea40 0002 	orr.w	r0, r0, r2
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	f141 0100 	adc.w	r1, r1, #0
 8000354:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000358:	bf08      	it	eq
 800035a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035e:	bd70      	pop	{r4, r5, r6, pc}
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f205 	lsl.w	r2, r0, r5
 8000368:	ea4e 0e02 	orr.w	lr, lr, r2
 800036c:	fa20 f304 	lsr.w	r3, r0, r4
 8000370:	fa01 f205 	lsl.w	r2, r1, r5
 8000374:	ea43 0302 	orr.w	r3, r3, r2
 8000378:	fa21 f004 	lsr.w	r0, r1, r4
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	fa21 f204 	lsr.w	r2, r1, r4
 8000384:	ea20 0002 	bic.w	r0, r0, r2
 8000388:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800038c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000390:	bf08      	it	eq
 8000392:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000396:	bd70      	pop	{r4, r5, r6, pc}
 8000398:	f094 0f00 	teq	r4, #0
 800039c:	d10f      	bne.n	80003be <__aeabi_dmul+0x1c2>
 800039e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003a2:	0040      	lsls	r0, r0, #1
 80003a4:	eb41 0101 	adc.w	r1, r1, r1
 80003a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ac:	bf08      	it	eq
 80003ae:	3c01      	subeq	r4, #1
 80003b0:	d0f7      	beq.n	80003a2 <__aeabi_dmul+0x1a6>
 80003b2:	ea41 0106 	orr.w	r1, r1, r6
 80003b6:	f095 0f00 	teq	r5, #0
 80003ba:	bf18      	it	ne
 80003bc:	4770      	bxne	lr
 80003be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003c2:	0052      	lsls	r2, r2, #1
 80003c4:	eb43 0303 	adc.w	r3, r3, r3
 80003c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003cc:	bf08      	it	eq
 80003ce:	3d01      	subeq	r5, #1
 80003d0:	d0f7      	beq.n	80003c2 <__aeabi_dmul+0x1c6>
 80003d2:	ea43 0306 	orr.w	r3, r3, r6
 80003d6:	4770      	bx	lr
 80003d8:	ea94 0f0c 	teq	r4, ip
 80003dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003e0:	bf18      	it	ne
 80003e2:	ea95 0f0c 	teqne	r5, ip
 80003e6:	d00c      	beq.n	8000402 <__aeabi_dmul+0x206>
 80003e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ec:	bf18      	it	ne
 80003ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f2:	d1d1      	bne.n	8000398 <__aeabi_dmul+0x19c>
 80003f4:	ea81 0103 	eor.w	r1, r1, r3
 80003f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003fc:	f04f 0000 	mov.w	r0, #0
 8000400:	bd70      	pop	{r4, r5, r6, pc}
 8000402:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000406:	bf06      	itte	eq
 8000408:	4610      	moveq	r0, r2
 800040a:	4619      	moveq	r1, r3
 800040c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000410:	d019      	beq.n	8000446 <__aeabi_dmul+0x24a>
 8000412:	ea94 0f0c 	teq	r4, ip
 8000416:	d102      	bne.n	800041e <__aeabi_dmul+0x222>
 8000418:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800041c:	d113      	bne.n	8000446 <__aeabi_dmul+0x24a>
 800041e:	ea95 0f0c 	teq	r5, ip
 8000422:	d105      	bne.n	8000430 <__aeabi_dmul+0x234>
 8000424:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000428:	bf1c      	itt	ne
 800042a:	4610      	movne	r0, r2
 800042c:	4619      	movne	r1, r3
 800042e:	d10a      	bne.n	8000446 <__aeabi_dmul+0x24a>
 8000430:	ea81 0103 	eor.w	r1, r1, r3
 8000434:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000438:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd70      	pop	{r4, r5, r6, pc}
 8000446:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800044a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800044e:	bd70      	pop	{r4, r5, r6, pc}

08000450 <__aeabi_drsub>:
 8000450:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e002      	b.n	800045c <__adddf3>
 8000456:	bf00      	nop

08000458 <__aeabi_dsub>:
 8000458:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800045c <__adddf3>:
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000462:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000466:	ea94 0f05 	teq	r4, r5
 800046a:	bf08      	it	eq
 800046c:	ea90 0f02 	teqeq	r0, r2
 8000470:	bf1f      	itttt	ne
 8000472:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000476:	ea55 0c02 	orrsne.w	ip, r5, r2
 800047a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800047e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000482:	f000 80e2 	beq.w	800064a <__adddf3+0x1ee>
 8000486:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800048a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800048e:	bfb8      	it	lt
 8000490:	426d      	neglt	r5, r5
 8000492:	dd0c      	ble.n	80004ae <__adddf3+0x52>
 8000494:	442c      	add	r4, r5
 8000496:	ea80 0202 	eor.w	r2, r0, r2
 800049a:	ea81 0303 	eor.w	r3, r1, r3
 800049e:	ea82 0000 	eor.w	r0, r2, r0
 80004a2:	ea83 0101 	eor.w	r1, r3, r1
 80004a6:	ea80 0202 	eor.w	r2, r0, r2
 80004aa:	ea81 0303 	eor.w	r3, r1, r3
 80004ae:	2d36      	cmp	r5, #54	; 0x36
 80004b0:	bf88      	it	hi
 80004b2:	bd30      	pophi	{r4, r5, pc}
 80004b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x70>
 80004c6:	4240      	negs	r0, r0
 80004c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004d8:	d002      	beq.n	80004e0 <__adddf3+0x84>
 80004da:	4252      	negs	r2, r2
 80004dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e0:	ea94 0f05 	teq	r4, r5
 80004e4:	f000 80a7 	beq.w	8000636 <__adddf3+0x1da>
 80004e8:	f1a4 0401 	sub.w	r4, r4, #1
 80004ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f0:	db0d      	blt.n	800050e <__adddf3+0xb2>
 80004f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004f6:	fa22 f205 	lsr.w	r2, r2, r5
 80004fa:	1880      	adds	r0, r0, r2
 80004fc:	f141 0100 	adc.w	r1, r1, #0
 8000500:	fa03 f20e 	lsl.w	r2, r3, lr
 8000504:	1880      	adds	r0, r0, r2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	4159      	adcs	r1, r3
 800050c:	e00e      	b.n	800052c <__adddf3+0xd0>
 800050e:	f1a5 0520 	sub.w	r5, r5, #32
 8000512:	f10e 0e20 	add.w	lr, lr, #32
 8000516:	2a01      	cmp	r2, #1
 8000518:	fa03 fc0e 	lsl.w	ip, r3, lr
 800051c:	bf28      	it	cs
 800051e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	18c0      	adds	r0, r0, r3
 8000528:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000530:	d507      	bpl.n	8000542 <__adddf3+0xe6>
 8000532:	f04f 0e00 	mov.w	lr, #0
 8000536:	f1dc 0c00 	rsbs	ip, ip, #0
 800053a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800053e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000542:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000546:	d31b      	bcc.n	8000580 <__adddf3+0x124>
 8000548:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800054c:	d30c      	bcc.n	8000568 <__adddf3+0x10c>
 800054e:	0849      	lsrs	r1, r1, #1
 8000550:	ea5f 0030 	movs.w	r0, r0, rrx
 8000554:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000558:	f104 0401 	add.w	r4, r4, #1
 800055c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000560:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000564:	f080 809a 	bcs.w	800069c <__adddf3+0x240>
 8000568:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	ea41 0105 	orr.w	r1, r1, r5
 800057e:	bd30      	pop	{r4, r5, pc}
 8000580:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000584:	4140      	adcs	r0, r0
 8000586:	eb41 0101 	adc.w	r1, r1, r1
 800058a:	3c01      	subs	r4, #1
 800058c:	bf28      	it	cs
 800058e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000592:	d2e9      	bcs.n	8000568 <__adddf3+0x10c>
 8000594:	f091 0f00 	teq	r1, #0
 8000598:	bf04      	itt	eq
 800059a:	4601      	moveq	r1, r0
 800059c:	2000      	moveq	r0, #0
 800059e:	fab1 f381 	clz	r3, r1
 80005a2:	bf08      	it	eq
 80005a4:	3320      	addeq	r3, #32
 80005a6:	f1a3 030b 	sub.w	r3, r3, #11
 80005aa:	f1b3 0220 	subs.w	r2, r3, #32
 80005ae:	da0c      	bge.n	80005ca <__adddf3+0x16e>
 80005b0:	320c      	adds	r2, #12
 80005b2:	dd08      	ble.n	80005c6 <__adddf3+0x16a>
 80005b4:	f102 0c14 	add.w	ip, r2, #20
 80005b8:	f1c2 020c 	rsb	r2, r2, #12
 80005bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c0:	fa21 f102 	lsr.w	r1, r1, r2
 80005c4:	e00c      	b.n	80005e0 <__adddf3+0x184>
 80005c6:	f102 0214 	add.w	r2, r2, #20
 80005ca:	bfd8      	it	le
 80005cc:	f1c2 0c20 	rsble	ip, r2, #32
 80005d0:	fa01 f102 	lsl.w	r1, r1, r2
 80005d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005d8:	bfdc      	itt	le
 80005da:	ea41 010c 	orrle.w	r1, r1, ip
 80005de:	4090      	lslle	r0, r2
 80005e0:	1ae4      	subs	r4, r4, r3
 80005e2:	bfa2      	ittt	ge
 80005e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005e8:	4329      	orrge	r1, r5
 80005ea:	bd30      	popge	{r4, r5, pc}
 80005ec:	ea6f 0404 	mvn.w	r4, r4
 80005f0:	3c1f      	subs	r4, #31
 80005f2:	da1c      	bge.n	800062e <__adddf3+0x1d2>
 80005f4:	340c      	adds	r4, #12
 80005f6:	dc0e      	bgt.n	8000616 <__adddf3+0x1ba>
 80005f8:	f104 0414 	add.w	r4, r4, #20
 80005fc:	f1c4 0220 	rsb	r2, r4, #32
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f302 	lsl.w	r3, r1, r2
 8000608:	ea40 0003 	orr.w	r0, r0, r3
 800060c:	fa21 f304 	lsr.w	r3, r1, r4
 8000610:	ea45 0103 	orr.w	r1, r5, r3
 8000614:	bd30      	pop	{r4, r5, pc}
 8000616:	f1c4 040c 	rsb	r4, r4, #12
 800061a:	f1c4 0220 	rsb	r2, r4, #32
 800061e:	fa20 f002 	lsr.w	r0, r0, r2
 8000622:	fa01 f304 	lsl.w	r3, r1, r4
 8000626:	ea40 0003 	orr.w	r0, r0, r3
 800062a:	4629      	mov	r1, r5
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	fa21 f004 	lsr.w	r0, r1, r4
 8000632:	4629      	mov	r1, r5
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	f094 0f00 	teq	r4, #0
 800063a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800063e:	bf06      	itte	eq
 8000640:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000644:	3401      	addeq	r4, #1
 8000646:	3d01      	subne	r5, #1
 8000648:	e74e      	b.n	80004e8 <__adddf3+0x8c>
 800064a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800064e:	bf18      	it	ne
 8000650:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000654:	d029      	beq.n	80006aa <__adddf3+0x24e>
 8000656:	ea94 0f05 	teq	r4, r5
 800065a:	bf08      	it	eq
 800065c:	ea90 0f02 	teqeq	r0, r2
 8000660:	d005      	beq.n	800066e <__adddf3+0x212>
 8000662:	ea54 0c00 	orrs.w	ip, r4, r0
 8000666:	bf04      	itt	eq
 8000668:	4619      	moveq	r1, r3
 800066a:	4610      	moveq	r0, r2
 800066c:	bd30      	pop	{r4, r5, pc}
 800066e:	ea91 0f03 	teq	r1, r3
 8000672:	bf1e      	ittt	ne
 8000674:	2100      	movne	r1, #0
 8000676:	2000      	movne	r0, #0
 8000678:	bd30      	popne	{r4, r5, pc}
 800067a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800067e:	d105      	bne.n	800068c <__adddf3+0x230>
 8000680:	0040      	lsls	r0, r0, #1
 8000682:	4149      	adcs	r1, r1
 8000684:	bf28      	it	cs
 8000686:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800068a:	bd30      	pop	{r4, r5, pc}
 800068c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000690:	bf3c      	itt	cc
 8000692:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000696:	bd30      	popcc	{r4, r5, pc}
 8000698:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800069c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006a4:	f04f 0000 	mov.w	r0, #0
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ae:	bf1a      	itte	ne
 80006b0:	4619      	movne	r1, r3
 80006b2:	4610      	movne	r0, r2
 80006b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006b8:	bf1c      	itt	ne
 80006ba:	460b      	movne	r3, r1
 80006bc:	4602      	movne	r2, r0
 80006be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006c2:	bf06      	itte	eq
 80006c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006c8:	ea91 0f03 	teqeq	r1, r3
 80006cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	bf00      	nop

080006d4 <__aeabi_ui2d>:
 80006d4:	f090 0f00 	teq	r0, #0
 80006d8:	bf04      	itt	eq
 80006da:	2100      	moveq	r1, #0
 80006dc:	4770      	bxeq	lr
 80006de:	b530      	push	{r4, r5, lr}
 80006e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e8:	f04f 0500 	mov.w	r5, #0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e750      	b.n	8000594 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_i2d>:
 80006f4:	f090 0f00 	teq	r0, #0
 80006f8:	bf04      	itt	eq
 80006fa:	2100      	moveq	r1, #0
 80006fc:	4770      	bxeq	lr
 80006fe:	b530      	push	{r4, r5, lr}
 8000700:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000704:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000708:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800070c:	bf48      	it	mi
 800070e:	4240      	negmi	r0, r0
 8000710:	f04f 0100 	mov.w	r1, #0
 8000714:	e73e      	b.n	8000594 <__adddf3+0x138>
 8000716:	bf00      	nop

08000718 <__aeabi_f2d>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800071e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000722:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000726:	bf1f      	itttt	ne
 8000728:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800072c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000730:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000734:	4770      	bxne	lr
 8000736:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800073a:	bf08      	it	eq
 800073c:	4770      	bxeq	lr
 800073e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000742:	bf04      	itt	eq
 8000744:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000748:	4770      	bxeq	lr
 800074a:	b530      	push	{r4, r5, lr}
 800074c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000750:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000754:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000758:	e71c      	b.n	8000594 <__adddf3+0x138>
 800075a:	bf00      	nop

0800075c <__aeabi_ul2d>:
 800075c:	ea50 0201 	orrs.w	r2, r0, r1
 8000760:	bf08      	it	eq
 8000762:	4770      	bxeq	lr
 8000764:	b530      	push	{r4, r5, lr}
 8000766:	f04f 0500 	mov.w	r5, #0
 800076a:	e00a      	b.n	8000782 <__aeabi_l2d+0x16>

0800076c <__aeabi_l2d>:
 800076c:	ea50 0201 	orrs.w	r2, r0, r1
 8000770:	bf08      	it	eq
 8000772:	4770      	bxeq	lr
 8000774:	b530      	push	{r4, r5, lr}
 8000776:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800077a:	d502      	bpl.n	8000782 <__aeabi_l2d+0x16>
 800077c:	4240      	negs	r0, r0
 800077e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000782:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000786:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800078e:	f43f aed8 	beq.w	8000542 <__adddf3+0xe6>
 8000792:	f04f 0203 	mov.w	r2, #3
 8000796:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800079a:	bf18      	it	ne
 800079c:	3203      	addne	r2, #3
 800079e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a2:	bf18      	it	ne
 80007a4:	3203      	addne	r2, #3
 80007a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007aa:	f1c2 0320 	rsb	r3, r2, #32
 80007ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80007b2:	fa20 f002 	lsr.w	r0, r0, r2
 80007b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ba:	ea40 000e 	orr.w	r0, r0, lr
 80007be:	fa21 f102 	lsr.w	r1, r1, r2
 80007c2:	4414      	add	r4, r2
 80007c4:	e6bd      	b.n	8000542 <__adddf3+0xe6>
 80007c6:	bf00      	nop

080007c8 <__aeabi_d2f>:
 80007c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007d0:	bf24      	itt	cs
 80007d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007da:	d90d      	bls.n	80007f8 <__aeabi_d2f+0x30>
 80007dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007f0:	bf08      	it	eq
 80007f2:	f020 0001 	biceq.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007fc:	d121      	bne.n	8000842 <__aeabi_d2f+0x7a>
 80007fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000802:	bfbc      	itt	lt
 8000804:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000808:	4770      	bxlt	lr
 800080a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800080e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000812:	f1c2 0218 	rsb	r2, r2, #24
 8000816:	f1c2 0c20 	rsb	ip, r2, #32
 800081a:	fa10 f30c 	lsls.w	r3, r0, ip
 800081e:	fa20 f002 	lsr.w	r0, r0, r2
 8000822:	bf18      	it	ne
 8000824:	f040 0001 	orrne.w	r0, r0, #1
 8000828:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800082c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000830:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000834:	ea40 000c 	orr.w	r0, r0, ip
 8000838:	fa23 f302 	lsr.w	r3, r3, r2
 800083c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000840:	e7cc      	b.n	80007dc <__aeabi_d2f+0x14>
 8000842:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000846:	d107      	bne.n	8000858 <__aeabi_d2f+0x90>
 8000848:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800084c:	bf1e      	ittt	ne
 800084e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000852:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000856:	4770      	bxne	lr
 8000858:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800085c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000860:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop

08000868 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	80fb      	strh	r3, [r7, #6]

  if (GPIO_Pin == PIN_BUTTON_Pin) {
 8000872:	88fb      	ldrh	r3, [r7, #6]
 8000874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000878:	d118      	bne.n	80008ac <HAL_GPIO_EXTI_Callback+0x44>

	  	if (statusProgram == 0){
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x4c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d10e      	bne.n	80008a0 <HAL_GPIO_EXTI_Callback+0x38>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000882:	2100      	movs	r1, #0
 8000884:	480c      	ldr	r0, [pc, #48]	; (80008b8 <HAL_GPIO_EXTI_Callback+0x50>)
 8000886:	f002 f9f7 	bl	8002c78 <HAL_DAC_Stop_DMA>
			blinking = 1;
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <HAL_GPIO_EXTI_Callback+0x54>)
 800088c:	2201      	movs	r2, #1
 800088e:	601a      	str	r2, [r3, #0]
			HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, voice, lenvoice);
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_GPIO_EXTI_Callback+0x58>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	490b      	ldr	r1, [pc, #44]	; (80008c4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000898:	480b      	ldr	r0, [pc, #44]	; (80008c8 <HAL_GPIO_EXTI_Callback+0x60>)
 800089a:	f002 fdfd 	bl	8003498 <HAL_DFSDM_FilterRegularStart_DMA>
	  	} else {
	  		playback = 1;
	  		statusProgram = 0;
	  	 }
  }
}
 800089e:	e005      	b.n	80008ac <HAL_GPIO_EXTI_Callback+0x44>
	  		playback = 1;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <HAL_GPIO_EXTI_Callback+0x64>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	601a      	str	r2, [r3, #0]
	  		statusProgram = 0;
 80008a6:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	2008054c 	.word	0x2008054c
 80008b8:	20000094 	.word	0x20000094
 80008bc:	20080544 	.word	0x20080544
 80008c0:	20000000 	.word	0x20000000
 80008c4:	200015f8 	.word	0x200015f8
 80008c8:	20000108 	.word	0x20000108
 80008cc:	200015f4 	.word	0x200015f4

080008d0 <HAL_DAC_ConvCpltCallbackCh1>:


// once voice has been played, DAC returns here
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	if (playRecorded == 1){
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <HAL_DAC_ConvCpltCallbackCh1+0x34>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d10c      	bne.n	80008fa <HAL_DAC_ConvCpltCallbackCh1+0x2a>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80008e0:	2100      	movs	r1, #0
 80008e2:	4809      	ldr	r0, [pc, #36]	; (8000908 <HAL_DAC_ConvCpltCallbackCh1+0x38>)
 80008e4:	f002 f9c8 	bl	8002c78 <HAL_DAC_Stop_DMA>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ee:	4807      	ldr	r0, [pc, #28]	; (800090c <HAL_DAC_ConvCpltCallbackCh1+0x3c>)
 80008f0:	f003 fc06 	bl	8004100 <HAL_GPIO_WritePin>
		playRecorded = 0;
 80008f4:	4b03      	ldr	r3, [pc, #12]	; (8000904 <HAL_DAC_ConvCpltCallbackCh1+0x34>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
	}
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20080548 	.word	0x20080548
 8000908:	20000094 	.word	0x20000094
 800090c:	48000400 	.word	0x48000400

08000910 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af02      	add	r7, sp, #8
 8000916:	6078      	str	r0, [r7, #4]

		if (blinking == 1){
 8000918:	4b5f      	ldr	r3, [pc, #380]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d12c      	bne.n	800097a <HAL_TIM_PeriodElapsedCallback+0x6a>

			blinkCount += 2;
 8000920:	4b5e      	ldr	r3, [pc, #376]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	3302      	adds	r3, #2
 8000926:	4a5d      	ldr	r2, [pc, #372]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000928:	6013      	str	r3, [r2, #0]

			if (blinkCount % 10000 == 0){
 800092a:	4b5c      	ldr	r3, [pc, #368]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	4b5c      	ldr	r3, [pc, #368]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000930:	fba3 1302 	umull	r1, r3, r3, r2
 8000934:	0b5b      	lsrs	r3, r3, #13
 8000936:	f242 7110 	movw	r1, #10000	; 0x2710
 800093a:	fb01 f303 	mul.w	r3, r1, r3
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d11a      	bne.n	800097a <HAL_TIM_PeriodElapsedCallback+0x6a>

				if (state == LED_OFF){
 8000944:	4b57      	ldr	r3, [pc, #348]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d109      	bne.n	8000960 <HAL_TIM_PeriodElapsedCallback+0x50>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000952:	4855      	ldr	r0, [pc, #340]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000954:	f003 fbd4 	bl	8004100 <HAL_GPIO_WritePin>
					state = LED_ON;
 8000958:	4b52      	ldr	r3, [pc, #328]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800095a:	2201      	movs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	e00c      	b.n	800097a <HAL_TIM_PeriodElapsedCallback+0x6a>
				} else if (state == LED_ON){
 8000960:	4b50      	ldr	r3, [pc, #320]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d108      	bne.n	800097a <HAL_TIM_PeriodElapsedCallback+0x6a>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800096e:	484e      	ldr	r0, [pc, #312]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000970:	f003 fbc6 	bl	8004100 <HAL_GPIO_WritePin>
					state = LED_OFF;
 8000974:	4b4b      	ldr	r3, [pc, #300]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if (playback == 1){
 800097a:	4b4c      	ldr	r3, [pc, #304]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b01      	cmp	r3, #1
 8000980:	f040 8086 	bne.w	8000a90 <HAL_TIM_PeriodElapsedCallback+0x180>

			timeCounter += 2;
 8000984:	4b4a      	ldr	r3, [pc, #296]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	3302      	adds	r3, #2
 800098a:	4a49      	ldr	r2, [pc, #292]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800098c:	6013      	str	r3, [r2, #0]

			if (timeCounter % 90000 == 0) {
 800098e:	4b48      	ldr	r3, [pc, #288]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	0913      	lsrs	r3, r2, #4
 8000994:	4947      	ldr	r1, [pc, #284]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000996:	fba1 1303 	umull	r1, r3, r1, r3
 800099a:	09db      	lsrs	r3, r3, #7
 800099c:	4946      	ldr	r1, [pc, #280]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800099e:	fb01 f303 	mul.w	r3, r1, r3
 80009a2:	1ad3      	subs	r3, r2, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d173      	bne.n	8000a90 <HAL_TIM_PeriodElapsedCallback+0x180>

				HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80009a8:	2100      	movs	r1, #0
 80009aa:	4844      	ldr	r0, [pc, #272]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80009ac:	f002 f964 	bl	8002c78 <HAL_DAC_Stop_DMA>

				// Switch the DMA source array
				if (waveSelector == 6) {
 80009b0:	4b43      	ldr	r3, [pc, #268]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b06      	cmp	r3, #6
 80009b6:	d110      	bne.n	80009da <HAL_TIM_PeriodElapsedCallback+0xca>
					HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &voiceR, lenvoice, DAC_ALIGN_12B_R);
 80009b8:	4b42      	ldr	r3, [pc, #264]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	2300      	movs	r3, #0
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	4613      	mov	r3, r2
 80009c4:	4a40      	ldr	r2, [pc, #256]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80009c6:	2100      	movs	r1, #0
 80009c8:	483c      	ldr	r0, [pc, #240]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80009ca:	f002 f889 	bl	8002ae0 <HAL_DAC_Start_DMA>
					playRecorded = 1;
 80009ce:	4b3f      	ldr	r3, [pc, #252]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	601a      	str	r2, [r3, #0]
					playback = 0;
 80009d4:	4b35      	ldr	r3, [pc, #212]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
				}
				if (waveSelector == 5) {
 80009da:	4b39      	ldr	r3, [pc, #228]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b05      	cmp	r3, #5
 80009e0:	d109      	bne.n	80009f6 <HAL_TIM_PeriodElapsedCallback+0xe6>
					HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sineWaveF, 640, DAC_ALIGN_12B_R);
 80009e2:	2300      	movs	r3, #0
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	f44f 7320 	mov.w	r3, #640	; 0x280
 80009ea:	4a39      	ldr	r2, [pc, #228]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80009ec:	2100      	movs	r1, #0
 80009ee:	4833      	ldr	r0, [pc, #204]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80009f0:	f002 f876 	bl	8002ae0 <HAL_DAC_Start_DMA>
 80009f4:	e03c      	b.n	8000a70 <HAL_TIM_PeriodElapsedCallback+0x160>
				} else if (waveSelector == 4) {
 80009f6:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	d109      	bne.n	8000a12 <HAL_TIM_PeriodElapsedCallback+0x102>
					HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sineWaveE, 320, DAC_ALIGN_12B_R);
 80009fe:	2300      	movs	r3, #0
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a06:	4a33      	ldr	r2, [pc, #204]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	482c      	ldr	r0, [pc, #176]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000a0c:	f002 f868 	bl	8002ae0 <HAL_DAC_Start_DMA>
 8000a10:	e02e      	b.n	8000a70 <HAL_TIM_PeriodElapsedCallback+0x160>
				} else if (waveSelector == 3) {
 8000a12:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b03      	cmp	r3, #3
 8000a18:	d108      	bne.n	8000a2c <HAL_TIM_PeriodElapsedCallback+0x11c>
					HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sineWaveD, 160, DAC_ALIGN_12B_R);
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	23a0      	movs	r3, #160	; 0xa0
 8000a20:	4a2d      	ldr	r2, [pc, #180]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000a22:	2100      	movs	r1, #0
 8000a24:	4825      	ldr	r0, [pc, #148]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000a26:	f002 f85b 	bl	8002ae0 <HAL_DAC_Start_DMA>
 8000a2a:	e021      	b.n	8000a70 <HAL_TIM_PeriodElapsedCallback+0x160>
				} else if (waveSelector == 2) {
 8000a2c:	4b24      	ldr	r3, [pc, #144]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d108      	bne.n	8000a46 <HAL_TIM_PeriodElapsedCallback+0x136>
					HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sineWaveC, 80, DAC_ALIGN_12B_R);
 8000a34:	2300      	movs	r3, #0
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	2350      	movs	r3, #80	; 0x50
 8000a3a:	4a28      	ldr	r2, [pc, #160]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	481f      	ldr	r0, [pc, #124]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000a40:	f002 f84e 	bl	8002ae0 <HAL_DAC_Start_DMA>
 8000a44:	e014      	b.n	8000a70 <HAL_TIM_PeriodElapsedCallback+0x160>
				} else if (waveSelector == 1) {
 8000a46:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d108      	bne.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0x150>
					HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sineWaveB, 40, DAC_ALIGN_12B_R);
 8000a4e:	2300      	movs	r3, #0
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2328      	movs	r3, #40	; 0x28
 8000a54:	4a22      	ldr	r2, [pc, #136]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4818      	ldr	r0, [pc, #96]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000a5a:	f002 f841 	bl	8002ae0 <HAL_DAC_Start_DMA>
 8000a5e:	e007      	b.n	8000a70 <HAL_TIM_PeriodElapsedCallback+0x160>
				} else {
					HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sineWaveA, 20, DAC_ALIGN_12B_R);
 8000a60:	2300      	movs	r3, #0
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	2314      	movs	r3, #20
 8000a66:	4a1f      	ldr	r2, [pc, #124]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4814      	ldr	r0, [pc, #80]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000a6c:	f002 f838 	bl	8002ae0 <HAL_DAC_Start_DMA>
				}

				waveSelector = (waveSelector + 1) % 7;
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	1c59      	adds	r1, r3, #1
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000a78:	fba3 2301 	umull	r2, r3, r3, r1
 8000a7c:	1aca      	subs	r2, r1, r3
 8000a7e:	0852      	lsrs	r2, r2, #1
 8000a80:	4413      	add	r3, r2
 8000a82:	089a      	lsrs	r2, r3, #2
 8000a84:	4613      	mov	r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	1a9b      	subs	r3, r3, r2
 8000a8a:	1aca      	subs	r2, r1, r3
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000a8e:	601a      	str	r2, [r3, #0]
			}
        }
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20080544 	.word	0x20080544
 8000a9c:	20080540 	.word	0x20080540
 8000aa0:	d1b71759 	.word	0xd1b71759
 8000aa4:	20000240 	.word	0x20000240
 8000aa8:	48000400 	.word	0x48000400
 8000aac:	200015f4 	.word	0x200015f4
 8000ab0:	20080538 	.word	0x20080538
 8000ab4:	05d34edf 	.word	0x05d34edf
 8000ab8:	00015f90 	.word	0x00015f90
 8000abc:	20000094 	.word	0x20000094
 8000ac0:	2008053c 	.word	0x2008053c
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20040d98 	.word	0x20040d98
 8000acc:	20080548 	.word	0x20080548
 8000ad0:	20000bf4 	.word	0x20000bf4
 8000ad4:	200006f4 	.word	0x200006f4
 8000ad8:	20000474 	.word	0x20000474
 8000adc:	20000334 	.word	0x20000334
 8000ae0:	20000294 	.word	0x20000294
 8000ae4:	20000244 	.word	0x20000244
 8000ae8:	24924925 	.word	0x24924925

08000aec <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback (DFSDM_Filter_HandleTypeDef * hdfsdm_filter) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

	int32_t max = -2147483648;
 8000af4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000af8:	61fb      	str	r3, [r7, #28]
	int32_t min = 2147483647;
 8000afa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000afe:	61bb      	str	r3, [r7, #24]

	if(hdfsdm_filter == &hdfsdm1_filter0) {
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a3f      	ldr	r2, [pc, #252]	; (8000c00 <HAL_DFSDM_FilterRegConvCpltCallback+0x114>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d177      	bne.n	8000bf8 <HAL_DFSDM_FilterRegConvCpltCallback+0x10c>

		HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 8000b08:	483d      	ldr	r0, [pc, #244]	; (8000c00 <HAL_DFSDM_FilterRegConvCpltCallback+0x114>)
 8000b0a:	f002 fd47 	bl	800359c <HAL_DFSDM_FilterRegularStop_DMA>

		for(int i = 0; i < lenvoice; i++){
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	e023      	b.n	8000b5c <HAL_DFSDM_FilterRegConvCpltCallback+0x70>

			voice[i] = voice[i] >> 9; // first 8 bits are channel info, needs to be discarded. One more to remove noise
 8000b14:	4a3b      	ldr	r2, [pc, #236]	; (8000c04 <HAL_DFSDM_FilterRegConvCpltCallback+0x118>)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1c:	125a      	asrs	r2, r3, #9
 8000b1e:	4939      	ldr	r1, [pc, #228]	; (8000c04 <HAL_DFSDM_FilterRegConvCpltCallback+0x118>)
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			if(voice[i] > max) max = voice[i];
 8000b26:	4a37      	ldr	r2, [pc, #220]	; (8000c04 <HAL_DFSDM_FilterRegConvCpltCallback+0x118>)
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	da04      	bge.n	8000b3e <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
 8000b34:	4a33      	ldr	r2, [pc, #204]	; (8000c04 <HAL_DFSDM_FilterRegConvCpltCallback+0x118>)
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3c:	61fb      	str	r3, [r7, #28]
			if(voice[i] < min) min = voice[i];
 8000b3e:	4a31      	ldr	r2, [pc, #196]	; (8000c04 <HAL_DFSDM_FilterRegConvCpltCallback+0x118>)
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	dd04      	ble.n	8000b56 <HAL_DFSDM_FilterRegConvCpltCallback+0x6a>
 8000b4c:	4a2d      	ldr	r2, [pc, #180]	; (8000c04 <HAL_DFSDM_FilterRegConvCpltCallback+0x118>)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b54:	61bb      	str	r3, [r7, #24]
		for(int i = 0; i < lenvoice; i++){
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <HAL_DFSDM_FilterRegConvCpltCallback+0x11c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	dbd6      	blt.n	8000b14 <HAL_DFSDM_FilterRegConvCpltCallback+0x28>

		}

		if(min < 0) min = min * (-1);
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	da02      	bge.n	8000b72 <HAL_DFSDM_FilterRegConvCpltCallback+0x86>
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	425b      	negs	r3, r3
 8000b70:	61bb      	str	r3, [r7, #24]

		float scaler = (3000.0 / ((float) min + (float) max)); // maximum for DAC / range of values to find scaling factor
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	ee07 3a90 	vmov	s15, r3
 8000b78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	ee07 3a90 	vmov	s15, r3
 8000b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b8a:	eddf 6a20 	vldr	s13, [pc, #128]	; 8000c0c <HAL_DFSDM_FilterRegConvCpltCallback+0x120>
 8000b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b92:	edc7 7a03 	vstr	s15, [r7, #12]

		for(int i = 0; i < lenvoice; i++){
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	e01c      	b.n	8000bd6 <HAL_DFSDM_FilterRegConvCpltCallback+0xea>
			voice[i] = voice[i] + min; // set minimum mic value to 0
 8000b9c:	4a19      	ldr	r2, [pc, #100]	; (8000c04 <HAL_DFSDM_FilterRegConvCpltCallback+0x118>)
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	441a      	add	r2, r3
 8000ba8:	4916      	ldr	r1, [pc, #88]	; (8000c04 <HAL_DFSDM_FilterRegConvCpltCallback+0x118>)
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			voiceR[i] = (uint32_t) scaler * voice[i]; // scale values to range 0 -> 4096
 8000bb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bb8:	ee17 1a90 	vmov	r1, s15
 8000bbc:	4a11      	ldr	r2, [pc, #68]	; (8000c04 <HAL_DFSDM_FilterRegConvCpltCallback+0x118>)
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc4:	fb03 f201 	mul.w	r2, r3, r1
 8000bc8:	4911      	ldr	r1, [pc, #68]	; (8000c10 <HAL_DFSDM_FilterRegConvCpltCallback+0x124>)
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < lenvoice; i++){
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <HAL_DFSDM_FilterRegConvCpltCallback+0x11c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	dbdd      	blt.n	8000b9c <HAL_DFSDM_FilterRegConvCpltCallback+0xb0>
		}

		blinking = 0;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_DFSDM_FilterRegConvCpltCallback+0x128>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bec:	480a      	ldr	r0, [pc, #40]	; (8000c18 <HAL_DFSDM_FilterRegConvCpltCallback+0x12c>)
 8000bee:	f003 fa87 	bl	8004100 <HAL_GPIO_WritePin>
		statusProgram = 1;
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_DFSDM_FilterRegConvCpltCallback+0x130>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]

	}
}
 8000bf8:	bf00      	nop
 8000bfa:	3720      	adds	r7, #32
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000108 	.word	0x20000108
 8000c04:	200015f8 	.word	0x200015f8
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	453b8000 	.word	0x453b8000
 8000c10:	20040d98 	.word	0x20040d98
 8000c14:	20080544 	.word	0x20080544
 8000c18:	48000400 	.word	0x48000400
 8000c1c:	2008054c 	.word	0x2008054c

08000c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c26:	f000 feac 	bl	8001982 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2a:	f000 f9b5 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2e:	f000 fb91 	bl	8001354 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c32:	f000 fb5d 	bl	80012f0 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c36:	f000 fb0d 	bl	8001254 <MX_TIM2_Init>
  MX_DAC1_Init();
 8000c3a:	f000 fa63 	bl	8001104 <MX_DAC1_Init>
  MX_ADC1_Init();
 8000c3e:	f000 f9fd 	bl	800103c <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000c42:	f000 faa1 	bl	8001188 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */
  //  start timer
  HAL_TIM_Base_Start_IT(&htim2);
 8000c46:	48ca      	ldr	r0, [pc, #808]	; (8000f70 <main+0x350>)
 8000c48:	f004 ff6a 	bl	8005b20 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	float period = 2.0;
 8000c4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c50:	60bb      	str	r3, [r7, #8]
	float pi = 3.14;
 8000c52:	4bc8      	ldr	r3, [pc, #800]	; (8000f74 <main+0x354>)
 8000c54:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < 640; i++) {
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	e182      	b.n	8000f62 <main+0x342>

		if (i < 20) sineWaveA[i] = (uint32_t) roundf((1.0 + arm_sin_f32( (float) (pi * i) / (period * 2))) * 1000);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2b13      	cmp	r3, #19
 8000c60:	dc3a      	bgt.n	8000cd8 <main+0xb8>
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	ee07 3a90 	vmov	s15, r3
 8000c68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c74:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c78:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c7c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000c80:	eeb0 0a66 	vmov.f32	s0, s13
 8000c84:	f005 fb8a 	bl	800639c <arm_sin_f32>
 8000c88:	ee10 3a10 	vmov	r3, s0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fd43 	bl	8000718 <__aeabi_f2d>
 8000c92:	f04f 0200 	mov.w	r2, #0
 8000c96:	4bb8      	ldr	r3, [pc, #736]	; (8000f78 <main+0x358>)
 8000c98:	f7ff fbe0 	bl	800045c <__adddf3>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4610      	mov	r0, r2
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f04f 0200 	mov.w	r2, #0
 8000ca8:	4bb4      	ldr	r3, [pc, #720]	; (8000f7c <main+0x35c>)
 8000caa:	f7ff faa7 	bl	80001fc <__aeabi_dmul>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f7ff fd87 	bl	80007c8 <__aeabi_d2f>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	ee00 3a10 	vmov	s0, r3
 8000cc0:	f005 fbde 	bl	8006480 <roundf>
 8000cc4:	eef0 7a40 	vmov.f32	s15, s0
 8000cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ccc:	ee17 1a90 	vmov	r1, s15
 8000cd0:	4aab      	ldr	r2, [pc, #684]	; (8000f80 <main+0x360>)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (i < 40) sineWaveB[i] = (uint32_t) roundf((1.0 + arm_sin_f32( (float) (pi * i) / (period * 3))) * 1000);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2b27      	cmp	r3, #39	; 0x27
 8000cdc:	dc3c      	bgt.n	8000d58 <main+0x138>
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	ee07 3a90 	vmov	s15, r3
 8000ce4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ce8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cf0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cf4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000cf8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000cfc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d00:	eeb0 0a66 	vmov.f32	s0, s13
 8000d04:	f005 fb4a 	bl	800639c <arm_sin_f32>
 8000d08:	ee10 3a10 	vmov	r3, s0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fd03 	bl	8000718 <__aeabi_f2d>
 8000d12:	f04f 0200 	mov.w	r2, #0
 8000d16:	4b98      	ldr	r3, [pc, #608]	; (8000f78 <main+0x358>)
 8000d18:	f7ff fba0 	bl	800045c <__adddf3>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4610      	mov	r0, r2
 8000d22:	4619      	mov	r1, r3
 8000d24:	f04f 0200 	mov.w	r2, #0
 8000d28:	4b94      	ldr	r3, [pc, #592]	; (8000f7c <main+0x35c>)
 8000d2a:	f7ff fa67 	bl	80001fc <__aeabi_dmul>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	460b      	mov	r3, r1
 8000d32:	4610      	mov	r0, r2
 8000d34:	4619      	mov	r1, r3
 8000d36:	f7ff fd47 	bl	80007c8 <__aeabi_d2f>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	ee00 3a10 	vmov	s0, r3
 8000d40:	f005 fb9e 	bl	8006480 <roundf>
 8000d44:	eef0 7a40 	vmov.f32	s15, s0
 8000d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d4c:	ee17 1a90 	vmov	r1, s15
 8000d50:	4a8c      	ldr	r2, [pc, #560]	; (8000f84 <main+0x364>)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (i < 80) sineWaveC[i] = (uint32_t) roundf((1.0 + arm_sin_f32( (float) (pi * i) / (period * 4))) * 1000);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2b4f      	cmp	r3, #79	; 0x4f
 8000d5c:	dc3c      	bgt.n	8000dd8 <main+0x1b8>
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	ee07 3a90 	vmov	s15, r3
 8000d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d68:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d70:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d74:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000d78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d7c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d80:	eeb0 0a66 	vmov.f32	s0, s13
 8000d84:	f005 fb0a 	bl	800639c <arm_sin_f32>
 8000d88:	ee10 3a10 	vmov	r3, s0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fcc3 	bl	8000718 <__aeabi_f2d>
 8000d92:	f04f 0200 	mov.w	r2, #0
 8000d96:	4b78      	ldr	r3, [pc, #480]	; (8000f78 <main+0x358>)
 8000d98:	f7ff fb60 	bl	800045c <__adddf3>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	4610      	mov	r0, r2
 8000da2:	4619      	mov	r1, r3
 8000da4:	f04f 0200 	mov.w	r2, #0
 8000da8:	4b74      	ldr	r3, [pc, #464]	; (8000f7c <main+0x35c>)
 8000daa:	f7ff fa27 	bl	80001fc <__aeabi_dmul>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4610      	mov	r0, r2
 8000db4:	4619      	mov	r1, r3
 8000db6:	f7ff fd07 	bl	80007c8 <__aeabi_d2f>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	ee00 3a10 	vmov	s0, r3
 8000dc0:	f005 fb5e 	bl	8006480 <roundf>
 8000dc4:	eef0 7a40 	vmov.f32	s15, s0
 8000dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dcc:	ee17 1a90 	vmov	r1, s15
 8000dd0:	4a6d      	ldr	r2, [pc, #436]	; (8000f88 <main+0x368>)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (i < 160) sineWaveD[i] = (uint32_t) roundf((1.0 + arm_sin_f32( (float)(pi * i) / (period * 5))) * 1000);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b9f      	cmp	r3, #159	; 0x9f
 8000ddc:	dc3c      	bgt.n	8000e58 <main+0x238>
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	ee07 3a90 	vmov	s15, r3
 8000de4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000de8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000df0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000df4:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000df8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000dfc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e00:	eeb0 0a66 	vmov.f32	s0, s13
 8000e04:	f005 faca 	bl	800639c <arm_sin_f32>
 8000e08:	ee10 3a10 	vmov	r3, s0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fc83 	bl	8000718 <__aeabi_f2d>
 8000e12:	f04f 0200 	mov.w	r2, #0
 8000e16:	4b58      	ldr	r3, [pc, #352]	; (8000f78 <main+0x358>)
 8000e18:	f7ff fb20 	bl	800045c <__adddf3>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4610      	mov	r0, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 0200 	mov.w	r2, #0
 8000e28:	4b54      	ldr	r3, [pc, #336]	; (8000f7c <main+0x35c>)
 8000e2a:	f7ff f9e7 	bl	80001fc <__aeabi_dmul>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff fcc7 	bl	80007c8 <__aeabi_d2f>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	ee00 3a10 	vmov	s0, r3
 8000e40:	f005 fb1e 	bl	8006480 <roundf>
 8000e44:	eef0 7a40 	vmov.f32	s15, s0
 8000e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e4c:	ee17 1a90 	vmov	r1, s15
 8000e50:	4a4e      	ldr	r2, [pc, #312]	; (8000f8c <main+0x36c>)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (i < 320) sineWaveE[i] = (uint32_t) roundf((1.0 + arm_sin_f32( (float)(pi * i) / (period * 6))) * 1000);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000e5e:	da3c      	bge.n	8000eda <main+0x2ba>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	ee07 3a90 	vmov	s15, r3
 8000e66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e72:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e76:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8000e7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000e7e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e82:	eeb0 0a66 	vmov.f32	s0, s13
 8000e86:	f005 fa89 	bl	800639c <arm_sin_f32>
 8000e8a:	ee10 3a10 	vmov	r3, s0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fc42 	bl	8000718 <__aeabi_f2d>
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <main+0x358>)
 8000e9a:	f7ff fadf 	bl	800045c <__adddf3>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	4b34      	ldr	r3, [pc, #208]	; (8000f7c <main+0x35c>)
 8000eac:	f7ff f9a6 	bl	80001fc <__aeabi_dmul>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f7ff fc86 	bl	80007c8 <__aeabi_d2f>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	ee00 3a10 	vmov	s0, r3
 8000ec2:	f005 fadd 	bl	8006480 <roundf>
 8000ec6:	eef0 7a40 	vmov.f32	s15, s0
 8000eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ece:	ee17 1a90 	vmov	r1, s15
 8000ed2:	4a2f      	ldr	r2, [pc, #188]	; (8000f90 <main+0x370>)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (i < 640) sineWaveF[i] = (uint32_t) roundf((1.0 + arm_sin_f32( (float)(pi * i) / (period * 7))) * 1000);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000ee0:	da3c      	bge.n	8000f5c <main+0x33c>
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	ee07 3a90 	vmov	s15, r3
 8000ee8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eec:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ef0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ef4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ef8:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 8000efc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f00:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f04:	eeb0 0a66 	vmov.f32	s0, s13
 8000f08:	f005 fa48 	bl	800639c <arm_sin_f32>
 8000f0c:	ee10 3a10 	vmov	r3, s0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fc01 	bl	8000718 <__aeabi_f2d>
 8000f16:	f04f 0200 	mov.w	r2, #0
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <main+0x358>)
 8000f1c:	f7ff fa9e 	bl	800045c <__adddf3>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	4610      	mov	r0, r2
 8000f26:	4619      	mov	r1, r3
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <main+0x35c>)
 8000f2e:	f7ff f965 	bl	80001fc <__aeabi_dmul>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4610      	mov	r0, r2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f7ff fc45 	bl	80007c8 <__aeabi_d2f>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	ee00 3a10 	vmov	s0, r3
 8000f44:	f005 fa9c 	bl	8006480 <roundf>
 8000f48:	eef0 7a40 	vmov.f32	s15, s0
 8000f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f50:	ee17 1a90 	vmov	r1, s15
 8000f54:	4a0f      	ldr	r2, [pc, #60]	; (8000f94 <main+0x374>)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 640; i++) {
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000f68:	f6ff ae78 	blt.w	8000c5c <main+0x3c>

    }

  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <main+0x34c>
 8000f6e:	bf00      	nop
 8000f70:	200001f4 	.word	0x200001f4
 8000f74:	4048f5c3 	.word	0x4048f5c3
 8000f78:	3ff00000 	.word	0x3ff00000
 8000f7c:	408f4000 	.word	0x408f4000
 8000f80:	20000244 	.word	0x20000244
 8000f84:	20000294 	.word	0x20000294
 8000f88:	20000334 	.word	0x20000334
 8000f8c:	20000474 	.word	0x20000474
 8000f90:	200006f4 	.word	0x200006f4
 8000f94:	20000bf4 	.word	0x20000bf4

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b096      	sub	sp, #88	; 0x58
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	2244      	movs	r2, #68	; 0x44
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f005 fa3e 	bl	8006428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	463b      	mov	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f003 f8f0 	bl	80041a0 <HAL_PWREx_ControlVoltageScaling>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000fc6:	f000 fa35 	bl	8001434 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000fca:	2310      	movs	r3, #16
 8000fcc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fd6:	2360      	movs	r3, #96	; 0x60
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000fe6:	233c      	movs	r3, #60	; 0x3c
 8000fe8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fea:	2302      	movs	r3, #2
 8000fec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f003 f974 	bl	80042e8 <HAL_RCC_OscConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001006:	f000 fa15 	bl	8001434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100a:	230f      	movs	r3, #15
 800100c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100e:	2303      	movs	r3, #3
 8001010:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800101e:	463b      	mov	r3, r7
 8001020:	2105      	movs	r1, #5
 8001022:	4618      	mov	r0, r3
 8001024:	f003 fd7a 	bl	8004b1c <HAL_RCC_ClockConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800102e:	f000 fa01 	bl	8001434 <Error_Handler>
  }
}
 8001032:	bf00      	nop
 8001034:	3758      	adds	r7, #88	; 0x58
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001042:	463b      	mov	r3, r7
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
 8001050:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <MX_ADC1_Init+0xbc>)
 8001054:	4a29      	ldr	r2, [pc, #164]	; (80010fc <MX_ADC1_Init+0xc0>)
 8001056:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001058:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <MX_ADC1_Init+0xbc>)
 800105a:	2200      	movs	r2, #0
 800105c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800105e:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <MX_ADC1_Init+0xbc>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001064:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <MX_ADC1_Init+0xbc>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800106a:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <MX_ADC1_Init+0xbc>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001070:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <MX_ADC1_Init+0xbc>)
 8001072:	2204      	movs	r2, #4
 8001074:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001076:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <MX_ADC1_Init+0xbc>)
 8001078:	2200      	movs	r2, #0
 800107a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800107c:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <MX_ADC1_Init+0xbc>)
 800107e:	2200      	movs	r2, #0
 8001080:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <MX_ADC1_Init+0xbc>)
 8001084:	2201      	movs	r2, #1
 8001086:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <MX_ADC1_Init+0xbc>)
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_ADC1_Init+0xbc>)
 8001092:	2200      	movs	r2, #0
 8001094:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <MX_ADC1_Init+0xbc>)
 8001098:	2200      	movs	r2, #0
 800109a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800109c:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <MX_ADC1_Init+0xbc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_ADC1_Init+0xbc>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <MX_ADC1_Init+0xbc>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b2:	4811      	ldr	r0, [pc, #68]	; (80010f8 <MX_ADC1_Init+0xbc>)
 80010b4:	f000 fe9e 	bl	8001df4 <HAL_ADC_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80010be:	f000 f9b9 	bl	8001434 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_ADC1_Init+0xc4>)
 80010c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010c6:	2306      	movs	r3, #6
 80010c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ce:	237f      	movs	r3, #127	; 0x7f
 80010d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010d2:	2304      	movs	r3, #4
 80010d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010da:	463b      	mov	r3, r7
 80010dc:	4619      	mov	r1, r3
 80010de:	4806      	ldr	r0, [pc, #24]	; (80010f8 <MX_ADC1_Init+0xbc>)
 80010e0:	f000 ffce 	bl	8002080 <HAL_ADC_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010ea:	f000 f9a3 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000002c 	.word	0x2000002c
 80010fc:	50040000 	.word	0x50040000
 8001100:	c7520000 	.word	0xc7520000

08001104 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800110a:	463b      	mov	r3, r7
 800110c:	2228      	movs	r2, #40	; 0x28
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f005 f989 	bl	8006428 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <MX_DAC1_Init+0x7c>)
 8001118:	4a1a      	ldr	r2, [pc, #104]	; (8001184 <MX_DAC1_Init+0x80>)
 800111a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800111c:	4818      	ldr	r0, [pc, #96]	; (8001180 <MX_DAC1_Init+0x7c>)
 800111e:	f001 fcbc 	bl	8002a9a <HAL_DAC_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001128:	f000 f984 	bl	8001434 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001130:	230a      	movs	r3, #10
 8001132:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001134:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001138:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	480c      	ldr	r0, [pc, #48]	; (8001180 <MX_DAC1_Init+0x7c>)
 800114e:	f001 fded 	bl	8002d2c <HAL_DAC_ConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8001158:	f000 f96c 	bl	8001434 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001160:	463b      	mov	r3, r7
 8001162:	2210      	movs	r2, #16
 8001164:	4619      	mov	r1, r3
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <MX_DAC1_Init+0x7c>)
 8001168:	f001 fde0 	bl	8002d2c <HAL_DAC_ConfigChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_DAC1_Init+0x72>
  {
    Error_Handler();
 8001172:	f000 f95f 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	; 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000094 	.word	0x20000094
 8001184:	40007400 	.word	0x40007400

08001188 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800118c:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <MX_DFSDM1_Init+0xb8>)
 800118e:	4a2d      	ldr	r2, [pc, #180]	; (8001244 <MX_DFSDM1_Init+0xbc>)
 8001190:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001192:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <MX_DFSDM1_Init+0xb8>)
 8001194:	2200      	movs	r2, #0
 8001196:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8001198:	4b29      	ldr	r3, [pc, #164]	; (8001240 <MX_DFSDM1_Init+0xb8>)
 800119a:	2201      	movs	r2, #1
 800119c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800119e:	4b28      	ldr	r3, [pc, #160]	; (8001240 <MX_DFSDM1_Init+0xb8>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80011a4:	4b26      	ldr	r3, [pc, #152]	; (8001240 <MX_DFSDM1_Init+0xb8>)
 80011a6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80011aa:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 59;
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <MX_DFSDM1_Init+0xb8>)
 80011ae:	223b      	movs	r2, #59	; 0x3b
 80011b0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <MX_DFSDM1_Init+0xb8>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80011b8:	4821      	ldr	r0, [pc, #132]	; (8001240 <MX_DFSDM1_Init+0xb8>)
 80011ba:	f002 f84d 	bl	8003258 <HAL_DFSDM_FilterInit>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80011c4:	f000 f936 	bl	8001434 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80011c8:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <MX_DFSDM1_Init+0xc0>)
 80011ca:	4a20      	ldr	r2, [pc, #128]	; (800124c <MX_DFSDM1_Init+0xc4>)
 80011cc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80011ce:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <MX_DFSDM1_Init+0xc0>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80011d4:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <MX_DFSDM1_Init+0xc0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 50;
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <MX_DFSDM1_Init+0xc0>)
 80011dc:	2232      	movs	r2, #50	; 0x32
 80011de:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <MX_DFSDM1_Init+0xc0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MX_DFSDM1_Init+0xc0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80011ec:	4b16      	ldr	r3, [pc, #88]	; (8001248 <MX_DFSDM1_Init+0xc0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <MX_DFSDM1_Init+0xc0>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <MX_DFSDM1_Init+0xc0>)
 80011fa:	2204      	movs	r2, #4
 80011fc:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_DFSDM1_Init+0xc0>)
 8001200:	2200      	movs	r2, #0
 8001202:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_DFSDM1_Init+0xc0>)
 8001206:	2201      	movs	r2, #1
 8001208:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_DFSDM1_Init+0xc0>)
 800120c:	2200      	movs	r2, #0
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001210:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <MX_DFSDM1_Init+0xc0>)
 8001212:	2200      	movs	r2, #0
 8001214:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <MX_DFSDM1_Init+0xc0>)
 8001218:	f001 ff5e 	bl	80030d8 <HAL_DFSDM_ChannelInit>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8001222:	f000 f907 	bl	8001434 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001226:	2201      	movs	r2, #1
 8001228:	4909      	ldr	r1, [pc, #36]	; (8001250 <MX_DFSDM1_Init+0xc8>)
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_DFSDM1_Init+0xb8>)
 800122c:	f002 f8ee 	bl	800340c <HAL_DFSDM_FilterConfigRegChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8001236:	f000 f8fd 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000108 	.word	0x20000108
 8001244:	40016100 	.word	0x40016100
 8001248:	2000015c 	.word	0x2000015c
 800124c:	40016040 	.word	0x40016040
 8001250:	00020004 	.word	0x00020004

08001254 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125a:	f107 0310 	add.w	r3, r7, #16
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001272:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <MX_TIM2_Init+0x98>)
 8001274:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001278:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800127a:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <MX_TIM2_Init+0x98>)
 800127c:	2200      	movs	r2, #0
 800127e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001280:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <MX_TIM2_Init+0x98>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <MX_TIM2_Init+0x98>)
 8001288:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800128c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <MX_TIM2_Init+0x98>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <MX_TIM2_Init+0x98>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800129a:	4814      	ldr	r0, [pc, #80]	; (80012ec <MX_TIM2_Init+0x98>)
 800129c:	f004 fbe8 	bl	8005a70 <HAL_TIM_Base_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012a6:	f000 f8c5 	bl	8001434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	4619      	mov	r1, r3
 80012b6:	480d      	ldr	r0, [pc, #52]	; (80012ec <MX_TIM2_Init+0x98>)
 80012b8:	f004 fda4 	bl	8005e04 <HAL_TIM_ConfigClockSource>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012c2:	f000 f8b7 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012c6:	2320      	movs	r3, #32
 80012c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4619      	mov	r1, r3
 80012d2:	4806      	ldr	r0, [pc, #24]	; (80012ec <MX_TIM2_Init+0x98>)
 80012d4:	f004 ffbc 	bl	8006250 <HAL_TIMEx_MasterConfigSynchronization>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012de:	f000 f8a9 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	3720      	adds	r7, #32
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200001f4 	.word	0x200001f4

080012f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <MX_DMA_Init+0x60>)
 80012f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012fa:	4a15      	ldr	r2, [pc, #84]	; (8001350 <MX_DMA_Init+0x60>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	6493      	str	r3, [r2, #72]	; 0x48
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <MX_DMA_Init+0x60>)
 8001304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <MX_DMA_Init+0x60>)
 8001310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001312:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <MX_DMA_Init+0x60>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6493      	str	r3, [r2, #72]	; 0x48
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <MX_DMA_Init+0x60>)
 800131c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	200b      	movs	r0, #11
 800132c:	f001 fb7f 	bl	8002a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001330:	200b      	movs	r0, #11
 8001332:	f001 fb98 	bl	8002a66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	200c      	movs	r0, #12
 800133c:	f001 fb77 	bl	8002a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001340:	200c      	movs	r0, #12
 8001342:	f001 fb90 	bl	8002a66 <HAL_NVIC_EnableIRQ>

}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000

08001354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <MX_GPIO_Init+0xd4>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	4a2e      	ldr	r2, [pc, #184]	; (8001428 <MX_GPIO_Init+0xd4>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001376:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <MX_GPIO_Init+0xd4>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	4b29      	ldr	r3, [pc, #164]	; (8001428 <MX_GPIO_Init+0xd4>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	4a28      	ldr	r2, [pc, #160]	; (8001428 <MX_GPIO_Init+0xd4>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138e:	4b26      	ldr	r3, [pc, #152]	; (8001428 <MX_GPIO_Init+0xd4>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800139a:	4b23      	ldr	r3, [pc, #140]	; (8001428 <MX_GPIO_Init+0xd4>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	4a22      	ldr	r2, [pc, #136]	; (8001428 <MX_GPIO_Init+0xd4>)
 80013a0:	f043 0310 	orr.w	r3, r3, #16
 80013a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <MX_GPIO_Init+0xd4>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <MX_GPIO_Init+0xd4>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <MX_GPIO_Init+0xd4>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <MX_GPIO_Init+0xd4>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013d0:	4816      	ldr	r0, [pc, #88]	; (800142c <MX_GPIO_Init+0xd8>)
 80013d2:	f002 fe95 	bl	8004100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PIN_BUTTON_Pin */
  GPIO_InitStruct.Pin = PIN_BUTTON_Pin;
 80013d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIN_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4810      	ldr	r0, [pc, #64]	; (8001430 <MX_GPIO_Init+0xdc>)
 80013ee:	f002 fcf5 	bl	8003ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4808      	ldr	r0, [pc, #32]	; (800142c <MX_GPIO_Init+0xd8>)
 800140c:	f002 fce6 	bl	8003ddc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2100      	movs	r1, #0
 8001414:	2028      	movs	r0, #40	; 0x28
 8001416:	f001 fb0a 	bl	8002a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800141a:	2028      	movs	r0, #40	; 0x28
 800141c:	f001 fb23 	bl	8002a66 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001420:	bf00      	nop
 8001422:	3728      	adds	r7, #40	; 0x28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40021000 	.word	0x40021000
 800142c:	48000400 	.word	0x48000400
 8001430:	48000800 	.word	0x48000800

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143c:	e7fe      	b.n	800143c <Error_Handler+0x8>
	...

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <HAL_MspInit+0x44>)
 8001448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144a:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <HAL_MspInit+0x44>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6613      	str	r3, [r2, #96]	; 0x60
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <HAL_MspInit+0x44>)
 8001454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_MspInit+0x44>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	4a08      	ldr	r2, [pc, #32]	; (8001484 <HAL_MspInit+0x44>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	6593      	str	r3, [r2, #88]	; 0x58
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_MspInit+0x44>)
 800146c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000

08001488 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b0a8      	sub	sp, #160	; 0xa0
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2294      	movs	r2, #148	; 0x94
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f004 ffc5 	bl	8006428 <memset>
  if(hadc->Instance==ADC1)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a19      	ldr	r2, [pc, #100]	; (8001508 <HAL_ADC_MspInit+0x80>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d12b      	bne.n	8001500 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014ac:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80014ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80014b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80014b6:	2301      	movs	r3, #1
 80014b8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014ba:	2301      	movs	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80014be:	2310      	movs	r3, #16
 80014c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014ca:	2302      	movs	r3, #2
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80014ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	4618      	mov	r0, r3
 80014da:	f003 fdb1 	bl	8005040 <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 80014e4:	f7ff ffa6 	bl	8001434 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <HAL_ADC_MspInit+0x84>)
 80014ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ec:	4a07      	ldr	r2, [pc, #28]	; (800150c <HAL_ADC_MspInit+0x84>)
 80014ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_ADC_MspInit+0x84>)
 80014f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001500:	bf00      	nop
 8001502:	37a0      	adds	r7, #160	; 0xa0
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	50040000 	.word	0x50040000
 800150c:	40021000 	.word	0x40021000

08001510 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a2b      	ldr	r2, [pc, #172]	; (80015dc <HAL_DAC_MspInit+0xcc>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d14f      	bne.n	80015d2 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001532:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <HAL_DAC_MspInit+0xd0>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001536:	4a2a      	ldr	r2, [pc, #168]	; (80015e0 <HAL_DAC_MspInit+0xd0>)
 8001538:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800153c:	6593      	str	r3, [r2, #88]	; 0x58
 800153e:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <HAL_DAC_MspInit+0xd0>)
 8001540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001542:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <HAL_DAC_MspInit+0xd0>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	4a24      	ldr	r2, [pc, #144]	; (80015e0 <HAL_DAC_MspInit+0xd0>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001556:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <HAL_DAC_MspInit+0xd0>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC1_Pin|GPIO_PIN_5;
 8001562:	2330      	movs	r3, #48	; 0x30
 8001564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001566:	2303      	movs	r3, #3
 8001568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001578:	f002 fc30 	bl	8003ddc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <HAL_DAC_MspInit+0xd4>)
 800157e:	4a1a      	ldr	r2, [pc, #104]	; (80015e8 <HAL_DAC_MspInit+0xd8>)
 8001580:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <HAL_DAC_MspInit+0xd4>)
 8001584:	2206      	movs	r2, #6
 8001586:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <HAL_DAC_MspInit+0xd4>)
 800158a:	2210      	movs	r2, #16
 800158c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_DAC_MspInit+0xd4>)
 8001590:	2200      	movs	r2, #0
 8001592:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <HAL_DAC_MspInit+0xd4>)
 8001596:	2280      	movs	r2, #128	; 0x80
 8001598:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_DAC_MspInit+0xd4>)
 800159c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <HAL_DAC_MspInit+0xd4>)
 80015a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015a8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_DAC_MspInit+0xd4>)
 80015ac:	2220      	movs	r2, #32
 80015ae:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <HAL_DAC_MspInit+0xd4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80015b6:	480b      	ldr	r0, [pc, #44]	; (80015e4 <HAL_DAC_MspInit+0xd4>)
 80015b8:	f002 f942 	bl	8003840 <HAL_DMA_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80015c2:	f7ff ff37 	bl	8001434 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <HAL_DAC_MspInit+0xd4>)
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <HAL_DAC_MspInit+0xd4>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	; 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40007400 	.word	0x40007400
 80015e0:	40021000 	.word	0x40021000
 80015e4:	200000a8 	.word	0x200000a8
 80015e8:	40020008 	.word	0x40020008

080015ec <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b0ae      	sub	sp, #184	; 0xb8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	2294      	movs	r2, #148	; 0x94
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f004 ff0b 	bl	8006428 <memset>
  if(DFSDM1_Init == 0)
 8001612:	4b45      	ldr	r3, [pc, #276]	; (8001728 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d14b      	bne.n	80016b2 <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800161a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800161e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001626:	f107 0310 	add.w	r3, r7, #16
 800162a:	4618      	mov	r0, r3
 800162c:	f003 fd08 	bl	8005040 <HAL_RCCEx_PeriphCLKConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8001636:	f7ff fefd 	bl	8001434 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800163a:	4b3c      	ldr	r3, [pc, #240]	; (800172c <HAL_DFSDM_FilterMspInit+0x140>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	4a3a      	ldr	r2, [pc, #232]	; (800172c <HAL_DFSDM_FilterMspInit+0x140>)
 8001642:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001644:	4b39      	ldr	r3, [pc, #228]	; (800172c <HAL_DFSDM_FilterMspInit+0x140>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d10b      	bne.n	8001664 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800164c:	4b38      	ldr	r3, [pc, #224]	; (8001730 <HAL_DFSDM_FilterMspInit+0x144>)
 800164e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001650:	4a37      	ldr	r2, [pc, #220]	; (8001730 <HAL_DFSDM_FilterMspInit+0x144>)
 8001652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001656:	6613      	str	r3, [r2, #96]	; 0x60
 8001658:	4b35      	ldr	r3, [pc, #212]	; (8001730 <HAL_DFSDM_FilterMspInit+0x144>)
 800165a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001664:	4b32      	ldr	r3, [pc, #200]	; (8001730 <HAL_DFSDM_FilterMspInit+0x144>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001668:	4a31      	ldr	r2, [pc, #196]	; (8001730 <HAL_DFSDM_FilterMspInit+0x144>)
 800166a:	f043 0310 	orr.w	r3, r3, #16
 800166e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001670:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <HAL_DFSDM_FilterMspInit+0x144>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001674:	f003 0310 	and.w	r3, r3, #16
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800167c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001680:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001696:	2306      	movs	r3, #6
 8001698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800169c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016a0:	4619      	mov	r1, r3
 80016a2:	4824      	ldr	r0, [pc, #144]	; (8001734 <HAL_DFSDM_FilterMspInit+0x148>)
 80016a4:	f002 fb9a 	bl	8003ddc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <HAL_DFSDM_FilterMspInit+0x13c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	4a1e      	ldr	r2, [pc, #120]	; (8001728 <HAL_DFSDM_FilterMspInit+0x13c>)
 80016b0:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a20      	ldr	r2, [pc, #128]	; (8001738 <HAL_DFSDM_FilterMspInit+0x14c>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d130      	bne.n	800171e <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel2;
 80016bc:	4b1f      	ldr	r3, [pc, #124]	; (800173c <HAL_DFSDM_FilterMspInit+0x150>)
 80016be:	4a20      	ldr	r2, [pc, #128]	; (8001740 <HAL_DFSDM_FilterMspInit+0x154>)
 80016c0:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 80016c2:	4b1e      	ldr	r3, [pc, #120]	; (800173c <HAL_DFSDM_FilterMspInit+0x150>)
 80016c4:	2256      	movs	r2, #86	; 0x56
 80016c6:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016c8:	4b1c      	ldr	r3, [pc, #112]	; (800173c <HAL_DFSDM_FilterMspInit+0x150>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ce:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_DFSDM_FilterMspInit+0x150>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_DFSDM_FilterMspInit+0x150>)
 80016d6:	2280      	movs	r2, #128	; 0x80
 80016d8:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_DFSDM_FilterMspInit+0x150>)
 80016dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e0:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <HAL_DFSDM_FilterMspInit+0x150>)
 80016e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016e8:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <HAL_DFSDM_FilterMspInit+0x150>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_DFSDM_FilterMspInit+0x150>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80016f6:	4811      	ldr	r0, [pc, #68]	; (800173c <HAL_DFSDM_FilterMspInit+0x150>)
 80016f8:	f002 f8a2 	bl	8003840 <HAL_DMA_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8001702:	f7ff fe97 	bl	8001434 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a0c      	ldr	r2, [pc, #48]	; (800173c <HAL_DFSDM_FilterMspInit+0x150>)
 800170a:	62da      	str	r2, [r3, #44]	; 0x2c
 800170c:	4a0b      	ldr	r2, [pc, #44]	; (800173c <HAL_DFSDM_FilterMspInit+0x150>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a09      	ldr	r2, [pc, #36]	; (800173c <HAL_DFSDM_FilterMspInit+0x150>)
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
 8001718:	4a08      	ldr	r2, [pc, #32]	; (800173c <HAL_DFSDM_FilterMspInit+0x150>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800171e:	bf00      	nop
 8001720:	37b8      	adds	r7, #184	; 0xb8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20080554 	.word	0x20080554
 800172c:	20080550 	.word	0x20080550
 8001730:	40021000 	.word	0x40021000
 8001734:	48001000 	.word	0x48001000
 8001738:	40016100 	.word	0x40016100
 800173c:	20000194 	.word	0x20000194
 8001740:	4002001c 	.word	0x4002001c

08001744 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b0ae      	sub	sp, #184	; 0xb8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	2294      	movs	r2, #148	; 0x94
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f004 fe5f 	bl	8006428 <memset>
  if(DFSDM1_Init == 0)
 800176a:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <HAL_DFSDM_ChannelMspInit+0xd0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d14b      	bne.n	800180a <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001776:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800177e:	f107 0310 	add.w	r3, r7, #16
 8001782:	4618      	mov	r0, r3
 8001784:	f003 fc5c 	bl	8005040 <HAL_RCCEx_PeriphCLKConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800178e:	f7ff fe51 	bl	8001434 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001792:	4b21      	ldr	r3, [pc, #132]	; (8001818 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	3301      	adds	r3, #1
 8001798:	4a1f      	ldr	r2, [pc, #124]	; (8001818 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800179a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800179c:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d10b      	bne.n	80017bc <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80017a4:	4b1d      	ldr	r3, [pc, #116]	; (800181c <HAL_DFSDM_ChannelMspInit+0xd8>)
 80017a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a8:	4a1c      	ldr	r2, [pc, #112]	; (800181c <HAL_DFSDM_ChannelMspInit+0xd8>)
 80017aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ae:	6613      	str	r3, [r2, #96]	; 0x60
 80017b0:	4b1a      	ldr	r3, [pc, #104]	; (800181c <HAL_DFSDM_ChannelMspInit+0xd8>)
 80017b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <HAL_DFSDM_ChannelMspInit+0xd8>)
 80017be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c0:	4a16      	ldr	r2, [pc, #88]	; (800181c <HAL_DFSDM_ChannelMspInit+0xd8>)
 80017c2:	f043 0310 	orr.w	r3, r3, #16
 80017c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <HAL_DFSDM_ChannelMspInit+0xd8>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017cc:	f003 0310 	and.w	r3, r3, #16
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80017d4:	f44f 7320 	mov.w	r3, #640	; 0x280
 80017d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80017ee:	2306      	movs	r3, #6
 80017f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4809      	ldr	r0, [pc, #36]	; (8001820 <HAL_DFSDM_ChannelMspInit+0xdc>)
 80017fc:	f002 faee 	bl	8003ddc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	4a03      	ldr	r2, [pc, #12]	; (8001814 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001808:	6013      	str	r3, [r2, #0]
  }

}
 800180a:	bf00      	nop
 800180c:	37b8      	adds	r7, #184	; 0xb8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20080554 	.word	0x20080554
 8001818:	20080550 	.word	0x20080550
 800181c:	40021000 	.word	0x40021000
 8001820:	48001000 	.word	0x48001000

08001824 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001834:	d113      	bne.n	800185e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_TIM_Base_MspInit+0x44>)
 8001838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183a:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <HAL_TIM_Base_MspInit+0x44>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6593      	str	r3, [r2, #88]	; 0x58
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_TIM_Base_MspInit+0x44>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	201c      	movs	r0, #28
 8001854:	f001 f8eb 	bl	8002a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001858:	201c      	movs	r0, #28
 800185a:	f001 f904 	bl	8002a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <NMI_Handler+0x4>

08001872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <MemManage_Handler+0x4>

0800187e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler+0x4>

0800188a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b8:	f000 f8b8 	bl	8001a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <DMA1_Channel1_IRQHandler+0x10>)
 80018c6:	f002 f93a 	bl	8003b3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200000a8 	.word	0x200000a8

080018d4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <DMA1_Channel2_IRQHandler+0x10>)
 80018da:	f002 f930 	bl	8003b3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000194 	.word	0x20000194

080018e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <TIM2_IRQHandler+0x10>)
 80018ee:	f004 f987 	bl	8005c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200001f4 	.word	0x200001f4

080018fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIN_BUTTON_Pin);
 8001900:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001904:	f002 fc14 	bl	8004130 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}

0800190c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <SystemInit+0x20>)
 8001912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <SystemInit+0x20>)
 8001918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800191c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001968 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001934:	f7ff ffea 	bl	800190c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001938:	480c      	ldr	r0, [pc, #48]	; (800196c <LoopForever+0x6>)
  ldr r1, =_edata
 800193a:	490d      	ldr	r1, [pc, #52]	; (8001970 <LoopForever+0xa>)
  ldr r2, =_sidata
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <LoopForever+0xe>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001950:	4c0a      	ldr	r4, [pc, #40]	; (800197c <LoopForever+0x16>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800195e:	f004 fd6b 	bl	8006438 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001962:	f7ff f95d 	bl	8000c20 <main>

08001966 <LoopForever>:

LoopForever:
    b LoopForever
 8001966:	e7fe      	b.n	8001966 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001968:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800196c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001970:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001974:	08006d2c 	.word	0x08006d2c
  ldr r2, =_sbss
 8001978:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800197c:	20080580 	.word	0x20080580

08001980 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001980:	e7fe      	b.n	8001980 <ADC1_IRQHandler>

08001982 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800198c:	2003      	movs	r0, #3
 800198e:	f001 f843 	bl	8002a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001992:	2000      	movs	r0, #0
 8001994:	f000 f80e 	bl	80019b4 <HAL_InitTick>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	71fb      	strb	r3, [r7, #7]
 80019a2:	e001      	b.n	80019a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019a4:	f7ff fd4c 	bl	8001440 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019a8:	79fb      	ldrb	r3, [r7, #7]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019c0:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <HAL_InitTick+0x6c>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d023      	beq.n	8001a10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019c8:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <HAL_InitTick+0x70>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <HAL_InitTick+0x6c>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f001 f84f 	bl	8002a82 <HAL_SYSTICK_Config>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10f      	bne.n	8001a0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b0f      	cmp	r3, #15
 80019ee:	d809      	bhi.n	8001a04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f0:	2200      	movs	r2, #0
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019f8:	f001 f819 	bl	8002a2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019fc:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <HAL_InitTick+0x74>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	e007      	b.n	8001a14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	73fb      	strb	r3, [r7, #15]
 8001a08:	e004      	b.n	8001a14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	73fb      	strb	r3, [r7, #15]
 8001a0e:	e001      	b.n	8001a14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	2000000c 	.word	0x2000000c
 8001a24:	20000004 	.word	0x20000004
 8001a28:	20000008 	.word	0x20000008

08001a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_IncTick+0x20>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_IncTick+0x24>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <HAL_IncTick+0x24>)
 8001a3e:	6013      	str	r3, [r2, #0]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	2000000c 	.word	0x2000000c
 8001a50:	20080558 	.word	0x20080558

08001a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_GetTick+0x14>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20080558 	.word	0x20080558

08001a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a74:	f7ff ffee 	bl	8001a54 <HAL_GetTick>
 8001a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a84:	d005      	beq.n	8001a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_Delay+0x44>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a92:	bf00      	nop
 8001a94:	f7ff ffde 	bl	8001a54 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d8f7      	bhi.n	8001a94 <HAL_Delay+0x28>
  {
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000000c 	.word	0x2000000c

08001ab4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	609a      	str	r2, [r3, #8]
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	609a      	str	r2, [r3, #8]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3360      	adds	r3, #96	; 0x60
 8001b2e:	461a      	mov	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <LL_ADC_SetOffset+0x44>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b54:	bf00      	nop
 8001b56:	371c      	adds	r7, #28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	03fff000 	.word	0x03fff000

08001b64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3360      	adds	r3, #96	; 0x60
 8001b72:	461a      	mov	r2, r3
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3360      	adds	r3, #96	; 0x60
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bba:	bf00      	nop
 8001bbc:	371c      	adds	r7, #28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	615a      	str	r2, [r3, #20]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3330      	adds	r3, #48	; 0x30
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	4413      	add	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	211f      	movs	r1, #31
 8001c18:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	401a      	ands	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	0e9b      	lsrs	r3, r3, #26
 8001c24:	f003 011f 	and.w	r1, r3, #31
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	431a      	orrs	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c38:	bf00      	nop
 8001c3a:	371c      	adds	r7, #28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	3314      	adds	r3, #20
 8001c54:	461a      	mov	r2, r3
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	0e5b      	lsrs	r3, r3, #25
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	4413      	add	r3, r2
 8001c62:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	0d1b      	lsrs	r3, r3, #20
 8001c6c:	f003 031f 	and.w	r3, r3, #31
 8001c70:	2107      	movs	r1, #7
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	401a      	ands	r2, r3
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	0d1b      	lsrs	r3, r3, #20
 8001c7e:	f003 031f 	and.w	r3, r3, #31
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	fa01 f303 	lsl.w	r3, r1, r3
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c8e:	bf00      	nop
 8001c90:	371c      	adds	r7, #28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0318 	and.w	r3, r3, #24
 8001cbe:	4908      	ldr	r1, [pc, #32]	; (8001ce0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cc0:	40d9      	lsrs	r1, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	400b      	ands	r3, r1
 8001cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	0007ffff 	.word	0x0007ffff

08001ce4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001cf4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6093      	str	r3, [r2, #8]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d1c:	d101      	bne.n	8001d22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d6c:	d101      	bne.n	8001d72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <LL_ADC_IsEnabled+0x18>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <LL_ADC_IsEnabled+0x1a>
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d101      	bne.n	8001dbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d101      	bne.n	8001de4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001de0:	2301      	movs	r3, #1
 8001de2:	e000      	b.n	8001de6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e129      	b.n	8002062 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d109      	bne.n	8001e30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff fb33 	bl	8001488 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff67 	bl	8001d08 <LL_ADC_IsDeepPowerDownEnabled>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d004      	beq.n	8001e4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff4d 	bl	8001ce4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ff82 	bl	8001d58 <LL_ADC_IsInternalRegulatorEnabled>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d115      	bne.n	8001e86 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ff66 	bl	8001d30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e64:	4b81      	ldr	r3, [pc, #516]	; (800206c <HAL_ADC_Init+0x278>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	099b      	lsrs	r3, r3, #6
 8001e6a:	4a81      	ldr	r2, [pc, #516]	; (8002070 <HAL_ADC_Init+0x27c>)
 8001e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e70:	099b      	lsrs	r3, r3, #6
 8001e72:	3301      	adds	r3, #1
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e78:	e002      	b.n	8001e80 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f9      	bne.n	8001e7a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff ff64 	bl	8001d58 <LL_ADC_IsInternalRegulatorEnabled>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10d      	bne.n	8001eb2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9a:	f043 0210 	orr.w	r2, r3, #16
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea6:	f043 0201 	orr.w	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ff75 	bl	8001da6 <LL_ADC_REG_IsConversionOngoing>
 8001ebc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f040 80c2 	bne.w	8002050 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f040 80be 	bne.w	8002050 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001edc:	f043 0202 	orr.w	r2, r3, #2
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff49 	bl	8001d80 <LL_ADC_IsEnabled>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10b      	bne.n	8001f0c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ef4:	485f      	ldr	r0, [pc, #380]	; (8002074 <HAL_ADC_Init+0x280>)
 8001ef6:	f7ff ff43 	bl	8001d80 <LL_ADC_IsEnabled>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d105      	bne.n	8001f0c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4619      	mov	r1, r3
 8001f06:	485c      	ldr	r0, [pc, #368]	; (8002078 <HAL_ADC_Init+0x284>)
 8001f08:	f7ff fdd4 	bl	8001ab4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	7e5b      	ldrb	r3, [r3, #25]
 8001f10:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f16:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f1c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f22:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f2a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d106      	bne.n	8001f48 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	045b      	lsls	r3, r3, #17
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d009      	beq.n	8001f64 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f54:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	4b44      	ldr	r3, [pc, #272]	; (800207c <HAL_ADC_Init+0x288>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6812      	ldr	r2, [r2, #0]
 8001f72:	69b9      	ldr	r1, [r7, #24]
 8001f74:	430b      	orrs	r3, r1
 8001f76:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff25 	bl	8001dcc <LL_ADC_INJ_IsConversionOngoing>
 8001f82:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d140      	bne.n	800200c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d13d      	bne.n	800200c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7e1b      	ldrb	r3, [r3, #24]
 8001f98:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f9a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fa2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fb2:	f023 0306 	bic.w	r3, r3, #6
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	69b9      	ldr	r1, [r7, #24]
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d118      	bne.n	8001ffc <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001fd4:	f023 0304 	bic.w	r3, r3, #4
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fe0:	4311      	orrs	r1, r2
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fe6:	4311      	orrs	r1, r2
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fec:	430a      	orrs	r2, r1
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0201 	orr.w	r2, r2, #1
 8001ff8:	611a      	str	r2, [r3, #16]
 8001ffa:	e007      	b.n	800200c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d10c      	bne.n	800202e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f023 010f 	bic.w	r1, r3, #15
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	1e5a      	subs	r2, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
 800202c:	e007      	b.n	800203e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 020f 	bic.w	r2, r2, #15
 800203c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	f023 0303 	bic.w	r3, r3, #3
 8002046:	f043 0201 	orr.w	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	659a      	str	r2, [r3, #88]	; 0x58
 800204e:	e007      	b.n	8002060 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	f043 0210 	orr.w	r2, r3, #16
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002060:	7ffb      	ldrb	r3, [r7, #31]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3720      	adds	r7, #32
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000004 	.word	0x20000004
 8002070:	053e2d63 	.word	0x053e2d63
 8002074:	50040000 	.word	0x50040000
 8002078:	50040300 	.word	0x50040300
 800207c:	fff0c007 	.word	0xfff0c007

08002080 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b0b6      	sub	sp, #216	; 0xd8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002090:	2300      	movs	r3, #0
 8002092:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800209a:	2b01      	cmp	r3, #1
 800209c:	d101      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x22>
 800209e:	2302      	movs	r3, #2
 80020a0:	e3d5      	b.n	800284e <HAL_ADC_ConfigChannel+0x7ce>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fe79 	bl	8001da6 <LL_ADC_REG_IsConversionOngoing>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f040 83ba 	bne.w	8002830 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b05      	cmp	r3, #5
 80020ca:	d824      	bhi.n	8002116 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	3b02      	subs	r3, #2
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d81b      	bhi.n	800210e <HAL_ADC_ConfigChannel+0x8e>
 80020d6:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <HAL_ADC_ConfigChannel+0x5c>)
 80020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020dc:	080020ed 	.word	0x080020ed
 80020e0:	080020f5 	.word	0x080020f5
 80020e4:	080020fd 	.word	0x080020fd
 80020e8:	08002105 	.word	0x08002105
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80020ec:	230c      	movs	r3, #12
 80020ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80020f2:	e010      	b.n	8002116 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80020f4:	2312      	movs	r3, #18
 80020f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80020fa:	e00c      	b.n	8002116 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80020fc:	2318      	movs	r3, #24
 80020fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002102:	e008      	b.n	8002116 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002104:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800210c:	e003      	b.n	8002116 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800210e:	2306      	movs	r3, #6
 8002110:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002114:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002124:	f7ff fd62 	bl	8001bec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fe3a 	bl	8001da6 <LL_ADC_REG_IsConversionOngoing>
 8002132:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fe46 	bl	8001dcc <LL_ADC_INJ_IsConversionOngoing>
 8002140:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002144:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002148:	2b00      	cmp	r3, #0
 800214a:	f040 81bf 	bne.w	80024cc <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800214e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002152:	2b00      	cmp	r3, #0
 8002154:	f040 81ba 	bne.w	80024cc <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002160:	d10f      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2200      	movs	r2, #0
 800216c:	4619      	mov	r1, r3
 800216e:	f7ff fd69 	bl	8001c44 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fd23 	bl	8001bc6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002180:	e00e      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	6819      	ldr	r1, [r3, #0]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	461a      	mov	r2, r3
 8002190:	f7ff fd58 	bl	8001c44 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fd13 	bl	8001bc6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	695a      	ldr	r2, [r3, #20]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	08db      	lsrs	r3, r3, #3
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d00a      	beq.n	80021d8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6919      	ldr	r1, [r3, #16]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021d2:	f7ff fca3 	bl	8001b1c <LL_ADC_SetOffset>
 80021d6:	e179      	b.n	80024cc <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fcc0 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10a      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x184>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fcb5 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 80021fa:	4603      	mov	r3, r0
 80021fc:	0e9b      	lsrs	r3, r3, #26
 80021fe:	f003 021f 	and.w	r2, r3, #31
 8002202:	e01e      	b.n	8002242 <HAL_ADC_ConfigChannel+0x1c2>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2100      	movs	r1, #0
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fcaa 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 8002210:	4603      	mov	r3, r0
 8002212:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002222:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002226:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800222a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002232:	2320      	movs	r3, #32
 8002234:	e004      	b.n	8002240 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002236:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224a:	2b00      	cmp	r3, #0
 800224c:	d105      	bne.n	800225a <HAL_ADC_ConfigChannel+0x1da>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	0e9b      	lsrs	r3, r3, #26
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	e018      	b.n	800228c <HAL_ADC_ConfigChannel+0x20c>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800226e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002276:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800227e:	2320      	movs	r3, #32
 8002280:	e004      	b.n	800228c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002282:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800228c:	429a      	cmp	r2, r3
 800228e:	d106      	bne.n	800229e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2200      	movs	r2, #0
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fc79 	bl	8001b90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2101      	movs	r1, #1
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fc5d 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10a      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x24a>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2101      	movs	r1, #1
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fc52 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 80022c0:	4603      	mov	r3, r0
 80022c2:	0e9b      	lsrs	r3, r3, #26
 80022c4:	f003 021f 	and.w	r2, r3, #31
 80022c8:	e01e      	b.n	8002308 <HAL_ADC_ConfigChannel+0x288>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2101      	movs	r1, #1
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fc47 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80022e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80022f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80022f8:	2320      	movs	r3, #32
 80022fa:	e004      	b.n	8002306 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80022fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	b2db      	uxtb	r3, r3
 8002306:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002310:	2b00      	cmp	r3, #0
 8002312:	d105      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x2a0>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	0e9b      	lsrs	r3, r3, #26
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	e018      	b.n	8002352 <HAL_ADC_ConfigChannel+0x2d2>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002334:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800233c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002344:	2320      	movs	r3, #32
 8002346:	e004      	b.n	8002352 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800234c:	fab3 f383 	clz	r3, r3
 8002350:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002352:	429a      	cmp	r2, r3
 8002354:	d106      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2200      	movs	r2, #0
 800235c:	2101      	movs	r1, #1
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fc16 	bl	8001b90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2102      	movs	r1, #2
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fbfa 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 8002370:	4603      	mov	r3, r0
 8002372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10a      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x310>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2102      	movs	r1, #2
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fbef 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 8002386:	4603      	mov	r3, r0
 8002388:	0e9b      	lsrs	r3, r3, #26
 800238a:	f003 021f 	and.w	r2, r3, #31
 800238e:	e01e      	b.n	80023ce <HAL_ADC_ConfigChannel+0x34e>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2102      	movs	r1, #2
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fbe4 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 800239c:	4603      	mov	r3, r0
 800239e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80023ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80023b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80023be:	2320      	movs	r3, #32
 80023c0:	e004      	b.n	80023cc <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80023c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d105      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x366>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	0e9b      	lsrs	r3, r3, #26
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	e014      	b.n	8002410 <HAL_ADC_ConfigChannel+0x390>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023ee:	fa93 f3a3 	rbit	r3, r3
 80023f2:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80023f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80023fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002402:	2320      	movs	r3, #32
 8002404:	e004      	b.n	8002410 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002406:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002410:	429a      	cmp	r2, r3
 8002412:	d106      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2200      	movs	r2, #0
 800241a:	2102      	movs	r1, #2
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fbb7 	bl	8001b90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2103      	movs	r1, #3
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fb9b 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 800242e:	4603      	mov	r3, r0
 8002430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10a      	bne.n	800244e <HAL_ADC_ConfigChannel+0x3ce>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2103      	movs	r1, #3
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fb90 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 8002444:	4603      	mov	r3, r0
 8002446:	0e9b      	lsrs	r3, r3, #26
 8002448:	f003 021f 	and.w	r2, r3, #31
 800244c:	e017      	b.n	800247e <HAL_ADC_ConfigChannel+0x3fe>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2103      	movs	r1, #3
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fb85 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 800245a:	4603      	mov	r3, r0
 800245c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002468:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800246a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002470:	2320      	movs	r3, #32
 8002472:	e003      	b.n	800247c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002486:	2b00      	cmp	r3, #0
 8002488:	d105      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x416>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	0e9b      	lsrs	r3, r3, #26
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	e011      	b.n	80024ba <HAL_ADC_ConfigChannel+0x43a>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80024a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024a6:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80024a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80024ae:	2320      	movs	r3, #32
 80024b0:	e003      	b.n	80024ba <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80024b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d106      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2200      	movs	r2, #0
 80024c4:	2103      	movs	r1, #3
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fb62 	bl	8001b90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fc55 	bl	8001d80 <LL_ADC_IsEnabled>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f040 813f 	bne.w	800275c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	6819      	ldr	r1, [r3, #0]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	461a      	mov	r2, r3
 80024ec:	f7ff fbd6 	bl	8001c9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4a8e      	ldr	r2, [pc, #568]	; (8002730 <HAL_ADC_ConfigChannel+0x6b0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	f040 8130 	bne.w	800275c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10b      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x4a4>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	0e9b      	lsrs	r3, r3, #26
 8002512:	3301      	adds	r3, #1
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	2b09      	cmp	r3, #9
 800251a:	bf94      	ite	ls
 800251c:	2301      	movls	r3, #1
 800251e:	2300      	movhi	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	e019      	b.n	8002558 <HAL_ADC_ConfigChannel+0x4d8>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800252c:	fa93 f3a3 	rbit	r3, r3
 8002530:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002534:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800253c:	2320      	movs	r3, #32
 800253e:	e003      	b.n	8002548 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002542:	fab3 f383 	clz	r3, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	3301      	adds	r3, #1
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	2b09      	cmp	r3, #9
 8002550:	bf94      	ite	ls
 8002552:	2301      	movls	r3, #1
 8002554:	2300      	movhi	r3, #0
 8002556:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002558:	2b00      	cmp	r3, #0
 800255a:	d079      	beq.n	8002650 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002564:	2b00      	cmp	r3, #0
 8002566:	d107      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x4f8>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0e9b      	lsrs	r3, r3, #26
 800256e:	3301      	adds	r3, #1
 8002570:	069b      	lsls	r3, r3, #26
 8002572:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002576:	e015      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x524>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002588:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800258a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002590:	2320      	movs	r3, #32
 8002592:	e003      	b.n	800259c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	3301      	adds	r3, #1
 800259e:	069b      	lsls	r3, r3, #26
 80025a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d109      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x544>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0e9b      	lsrs	r3, r3, #26
 80025b6:	3301      	adds	r3, #1
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	2101      	movs	r1, #1
 80025be:	fa01 f303 	lsl.w	r3, r1, r3
 80025c2:	e017      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x574>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80025d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80025d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80025dc:	2320      	movs	r3, #32
 80025de:	e003      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80025e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	3301      	adds	r3, #1
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	2101      	movs	r1, #1
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	ea42 0103 	orr.w	r1, r2, r3
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10a      	bne.n	800261a <HAL_ADC_ConfigChannel+0x59a>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	0e9b      	lsrs	r3, r3, #26
 800260a:	3301      	adds	r3, #1
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	4613      	mov	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4413      	add	r3, r2
 8002616:	051b      	lsls	r3, r3, #20
 8002618:	e018      	b.n	800264c <HAL_ADC_ConfigChannel+0x5cc>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002622:	fa93 f3a3 	rbit	r3, r3
 8002626:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800262c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002632:	2320      	movs	r3, #32
 8002634:	e003      	b.n	800263e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002638:	fab3 f383 	clz	r3, r3
 800263c:	b2db      	uxtb	r3, r3
 800263e:	3301      	adds	r3, #1
 8002640:	f003 021f 	and.w	r2, r3, #31
 8002644:	4613      	mov	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4413      	add	r3, r2
 800264a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800264c:	430b      	orrs	r3, r1
 800264e:	e080      	b.n	8002752 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002658:	2b00      	cmp	r3, #0
 800265a:	d107      	bne.n	800266c <HAL_ADC_ConfigChannel+0x5ec>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	0e9b      	lsrs	r3, r3, #26
 8002662:	3301      	adds	r3, #1
 8002664:	069b      	lsls	r3, r3, #26
 8002666:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800266a:	e015      	b.n	8002698 <HAL_ADC_ConfigChannel+0x618>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002674:	fa93 f3a3 	rbit	r3, r3
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800267e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002684:	2320      	movs	r3, #32
 8002686:	e003      	b.n	8002690 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	3301      	adds	r3, #1
 8002692:	069b      	lsls	r3, r3, #26
 8002694:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d109      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x638>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	0e9b      	lsrs	r3, r3, #26
 80026aa:	3301      	adds	r3, #1
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	2101      	movs	r1, #1
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	e017      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x668>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	61bb      	str	r3, [r7, #24]
  return result;
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80026d0:	2320      	movs	r3, #32
 80026d2:	e003      	b.n	80026dc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	3301      	adds	r3, #1
 80026de:	f003 031f 	and.w	r3, r3, #31
 80026e2:	2101      	movs	r1, #1
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	ea42 0103 	orr.w	r1, r2, r3
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10d      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x694>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	0e9b      	lsrs	r3, r3, #26
 80026fe:	3301      	adds	r3, #1
 8002700:	f003 021f 	and.w	r2, r3, #31
 8002704:	4613      	mov	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4413      	add	r3, r2
 800270a:	3b1e      	subs	r3, #30
 800270c:	051b      	lsls	r3, r3, #20
 800270e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002712:	e01d      	b.n	8002750 <HAL_ADC_ConfigChannel+0x6d0>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	60fb      	str	r3, [r7, #12]
  return result;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d103      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800272c:	2320      	movs	r3, #32
 800272e:	e005      	b.n	800273c <HAL_ADC_ConfigChannel+0x6bc>
 8002730:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	3301      	adds	r3, #1
 800273e:	f003 021f 	and.w	r2, r3, #31
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	3b1e      	subs	r3, #30
 800274a:	051b      	lsls	r3, r3, #20
 800274c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002750:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002756:	4619      	mov	r1, r3
 8002758:	f7ff fa74 	bl	8001c44 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b3d      	ldr	r3, [pc, #244]	; (8002858 <HAL_ADC_ConfigChannel+0x7d8>)
 8002762:	4013      	ands	r3, r2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d06c      	beq.n	8002842 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002768:	483c      	ldr	r0, [pc, #240]	; (800285c <HAL_ADC_ConfigChannel+0x7dc>)
 800276a:	f7ff f9c9 	bl	8001b00 <LL_ADC_GetCommonPathInternalCh>
 800276e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a3a      	ldr	r2, [pc, #232]	; (8002860 <HAL_ADC_ConfigChannel+0x7e0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d127      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800277c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d121      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a35      	ldr	r2, [pc, #212]	; (8002864 <HAL_ADC_ConfigChannel+0x7e4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d157      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002792:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002796:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800279a:	4619      	mov	r1, r3
 800279c:	482f      	ldr	r0, [pc, #188]	; (800285c <HAL_ADC_ConfigChannel+0x7dc>)
 800279e:	f7ff f99c 	bl	8001ada <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027a2:	4b31      	ldr	r3, [pc, #196]	; (8002868 <HAL_ADC_ConfigChannel+0x7e8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	099b      	lsrs	r3, r3, #6
 80027a8:	4a30      	ldr	r2, [pc, #192]	; (800286c <HAL_ADC_ConfigChannel+0x7ec>)
 80027aa:	fba2 2303 	umull	r2, r3, r2, r3
 80027ae:	099b      	lsrs	r3, r3, #6
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	4613      	mov	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027bc:	e002      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f9      	bne.n	80027be <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027ca:	e03a      	b.n	8002842 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a27      	ldr	r2, [pc, #156]	; (8002870 <HAL_ADC_ConfigChannel+0x7f0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d113      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10d      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a1f      	ldr	r2, [pc, #124]	; (8002864 <HAL_ADC_ConfigChannel+0x7e4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d12a      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f4:	4619      	mov	r1, r3
 80027f6:	4819      	ldr	r0, [pc, #100]	; (800285c <HAL_ADC_ConfigChannel+0x7dc>)
 80027f8:	f7ff f96f 	bl	8001ada <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027fc:	e021      	b.n	8002842 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <HAL_ADC_ConfigChannel+0x7f4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d11c      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002808:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800280c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d116      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a12      	ldr	r2, [pc, #72]	; (8002864 <HAL_ADC_ConfigChannel+0x7e4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d111      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800281e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002822:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002826:	4619      	mov	r1, r3
 8002828:	480c      	ldr	r0, [pc, #48]	; (800285c <HAL_ADC_ConfigChannel+0x7dc>)
 800282a:	f7ff f956 	bl	8001ada <LL_ADC_SetCommonPathInternalCh>
 800282e:	e008      	b.n	8002842 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002834:	f043 0220 	orr.w	r2, r3, #32
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800284a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800284e:	4618      	mov	r0, r3
 8002850:	37d8      	adds	r7, #216	; 0xd8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	80080000 	.word	0x80080000
 800285c:	50040300 	.word	0x50040300
 8002860:	c7520000 	.word	0xc7520000
 8002864:	50040000 	.word	0x50040000
 8002868:	20000004 	.word	0x20000004
 800286c:	053e2d63 	.word	0x053e2d63
 8002870:	cb840000 	.word	0xcb840000
 8002874:	80000001 	.word	0x80000001

08002878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002888:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <__NVIC_SetPriorityGrouping+0x44>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002894:	4013      	ands	r3, r2
 8002896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028aa:	4a04      	ldr	r2, [pc, #16]	; (80028bc <__NVIC_SetPriorityGrouping+0x44>)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	60d3      	str	r3, [r2, #12]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <__NVIC_GetPriorityGrouping+0x18>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	f003 0307 	and.w	r3, r3, #7
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	db0b      	blt.n	8002906 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	f003 021f 	and.w	r2, r3, #31
 80028f4:	4907      	ldr	r1, [pc, #28]	; (8002914 <__NVIC_EnableIRQ+0x38>)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	2001      	movs	r0, #1
 80028fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000e100 	.word	0xe000e100

08002918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	6039      	str	r1, [r7, #0]
 8002922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	2b00      	cmp	r3, #0
 800292a:	db0a      	blt.n	8002942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	490c      	ldr	r1, [pc, #48]	; (8002964 <__NVIC_SetPriority+0x4c>)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	0112      	lsls	r2, r2, #4
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	440b      	add	r3, r1
 800293c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002940:	e00a      	b.n	8002958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4908      	ldr	r1, [pc, #32]	; (8002968 <__NVIC_SetPriority+0x50>)
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	3b04      	subs	r3, #4
 8002950:	0112      	lsls	r2, r2, #4
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	440b      	add	r3, r1
 8002956:	761a      	strb	r2, [r3, #24]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000e100 	.word	0xe000e100
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296c:	b480      	push	{r7}
 800296e:	b089      	sub	sp, #36	; 0x24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f1c3 0307 	rsb	r3, r3, #7
 8002986:	2b04      	cmp	r3, #4
 8002988:	bf28      	it	cs
 800298a:	2304      	movcs	r3, #4
 800298c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3304      	adds	r3, #4
 8002992:	2b06      	cmp	r3, #6
 8002994:	d902      	bls.n	800299c <NVIC_EncodePriority+0x30>
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3b03      	subs	r3, #3
 800299a:	e000      	b.n	800299e <NVIC_EncodePriority+0x32>
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43da      	mvns	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	401a      	ands	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	43d9      	mvns	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c4:	4313      	orrs	r3, r2
         );
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3724      	adds	r7, #36	; 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e4:	d301      	bcc.n	80029ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029e6:	2301      	movs	r3, #1
 80029e8:	e00f      	b.n	8002a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ea:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <SysTick_Config+0x40>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029f2:	210f      	movs	r1, #15
 80029f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029f8:	f7ff ff8e 	bl	8002918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <SysTick_Config+0x40>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a02:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <SysTick_Config+0x40>)
 8002a04:	2207      	movs	r2, #7
 8002a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	e000e010 	.word	0xe000e010

08002a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ff29 	bl	8002878 <__NVIC_SetPriorityGrouping>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a40:	f7ff ff3e 	bl	80028c0 <__NVIC_GetPriorityGrouping>
 8002a44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	6978      	ldr	r0, [r7, #20]
 8002a4c:	f7ff ff8e 	bl	800296c <NVIC_EncodePriority>
 8002a50:	4602      	mov	r2, r0
 8002a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff5d 	bl	8002918 <__NVIC_SetPriority>
}
 8002a5e:	bf00      	nop
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff ff31 	bl	80028dc <__NVIC_EnableIRQ>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ffa2 	bl	80029d4 <SysTick_Config>
 8002a90:	4603      	mov	r3, r0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e014      	b.n	8002ad6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	791b      	ldrb	r3, [r3, #4]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d105      	bne.n	8002ac2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7fe fd27 	bl	8001510 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	795b      	ldrb	r3, [r3, #5]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_DAC_Start_DMA+0x1e>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e0ab      	b.n	8002c56 <HAL_DAC_Start_DMA+0x176>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2202      	movs	r2, #2
 8002b08:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d12f      	bne.n	8002b70 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	4a52      	ldr	r2, [pc, #328]	; (8002c60 <HAL_DAC_Start_DMA+0x180>)
 8002b16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4a51      	ldr	r2, [pc, #324]	; (8002c64 <HAL_DAC_Start_DMA+0x184>)
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a50      	ldr	r2, [pc, #320]	; (8002c68 <HAL_DAC_Start_DMA+0x188>)
 8002b26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b36:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d013      	beq.n	8002b66 <HAL_DAC_Start_DMA+0x86>
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d845      	bhi.n	8002bd0 <HAL_DAC_Start_DMA+0xf0>
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_DAC_Start_DMA+0x72>
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d005      	beq.n	8002b5c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002b50:	e03e      	b.n	8002bd0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3308      	adds	r3, #8
 8002b58:	613b      	str	r3, [r7, #16]
        break;
 8002b5a:	e03c      	b.n	8002bd6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	330c      	adds	r3, #12
 8002b62:	613b      	str	r3, [r7, #16]
        break;
 8002b64:	e037      	b.n	8002bd6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3310      	adds	r3, #16
 8002b6c:	613b      	str	r3, [r7, #16]
        break;
 8002b6e:	e032      	b.n	8002bd6 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4a3d      	ldr	r2, [pc, #244]	; (8002c6c <HAL_DAC_Start_DMA+0x18c>)
 8002b76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4a3c      	ldr	r2, [pc, #240]	; (8002c70 <HAL_DAC_Start_DMA+0x190>)
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4a3b      	ldr	r2, [pc, #236]	; (8002c74 <HAL_DAC_Start_DMA+0x194>)
 8002b86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b96:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d013      	beq.n	8002bc6 <HAL_DAC_Start_DMA+0xe6>
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d817      	bhi.n	8002bd4 <HAL_DAC_Start_DMA+0xf4>
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_DAC_Start_DMA+0xd2>
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d005      	beq.n	8002bbc <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002bb0:	e010      	b.n	8002bd4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3314      	adds	r3, #20
 8002bb8:	613b      	str	r3, [r7, #16]
        break;
 8002bba:	e00c      	b.n	8002bd6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3318      	adds	r3, #24
 8002bc2:	613b      	str	r3, [r7, #16]
        break;
 8002bc4:	e007      	b.n	8002bd6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	331c      	adds	r3, #28
 8002bcc:	613b      	str	r3, [r7, #16]
        break;
 8002bce:	e002      	b.n	8002bd6 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002bd0:	bf00      	nop
 8002bd2:	e000      	b.n	8002bd6 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002bd4:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d111      	bne.n	8002c00 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6898      	ldr	r0, [r3, #8]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	f000 fecb 	bl	8003990 <HAL_DMA_Start_IT>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	75fb      	strb	r3, [r7, #23]
 8002bfe:	e010      	b.n	8002c22 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c0e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	68d8      	ldr	r0, [r3, #12]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	f000 feb9 	bl	8003990 <HAL_DMA_Start_IT>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10c      	bne.n	8002c48 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6819      	ldr	r1, [r3, #0]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	e005      	b.n	8002c54 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	f043 0204 	orr.w	r2, r3, #4
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	08002fc5 	.word	0x08002fc5
 8002c64:	08002fe7 	.word	0x08002fe7
 8002c68:	08003003 	.word	0x08003003
 8002c6c:	0800306d 	.word	0x0800306d
 8002c70:	0800308f 	.word	0x0800308f
 8002c74:	080030ab 	.word	0x080030ab

08002c78 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6819      	ldr	r1, [r3, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43da      	mvns	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	400a      	ands	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6819      	ldr	r1, [r3, #0]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2201      	movs	r2, #1
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	400a      	ands	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10d      	bne.n	8002cde <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fedd 	bl	8003a86 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e00c      	b.n	8002cf8 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 fecf 	bl	8003a86 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002cf6:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	795b      	ldrb	r3, [r3, #5]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_DAC_ConfigChannel+0x1c>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e137      	b.n	8002fb8 <HAL_DAC_ConfigChannel+0x28c>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2202      	movs	r2, #2
 8002d52:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	f040 8081 	bne.w	8002e60 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002d5e:	f7fe fe79 	bl	8001a54 <HAL_GetTick>
 8002d62:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d140      	bne.n	8002dec <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d6a:	e018      	b.n	8002d9e <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d6c:	f7fe fe72 	bl	8001a54 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d911      	bls.n	8002d9e <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	f043 0208 	orr.w	r2, r3, #8
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2203      	movs	r2, #3
 8002d98:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e10c      	b.n	8002fb8 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1df      	bne.n	8002d6c <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002dac:	2001      	movs	r0, #1
 8002dae:	f7fe fe5d 	bl	8001a6c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	69d2      	ldr	r2, [r2, #28]
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40
 8002dbc:	e023      	b.n	8002e06 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002dbe:	f7fe fe49 	bl	8001a54 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d90f      	bls.n	8002dec <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	da0a      	bge.n	8002dec <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f043 0208 	orr.w	r2, r3, #8
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2203      	movs	r2, #3
 8002de6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e0e5      	b.n	8002fb8 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	dbe3      	blt.n	8002dbe <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002df6:	2001      	movs	r0, #1
 8002df8:	f7fe fe38 	bl	8001a6c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	69d2      	ldr	r2, [r2, #28]
 8002e04:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f003 0310 	and.w	r3, r3, #16
 8002e12:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002e16:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	ea02 0103 	and.w	r1, r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	6a1a      	ldr	r2, [r3, #32]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	21ff      	movs	r1, #255	; 0xff
 8002e42:	fa01 f303 	lsl.w	r3, r1, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	ea02 0103 	and.w	r1, r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	409a      	lsls	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d11d      	bne.n	8002ea4 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	221f      	movs	r2, #31
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	69fa      	ldr	r2, [r7, #28]
 8002ea2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eaa:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	2207      	movs	r2, #7
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	69fa      	ldr	r2, [r7, #28]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	69fa      	ldr	r2, [r7, #28]
 8002eea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6819      	ldr	r1, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43da      	mvns	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	400a      	ands	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69fa      	ldr	r2, [r7, #28]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	69fa      	ldr	r2, [r7, #28]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f48:	d104      	bne.n	8002f54 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f50:	61fb      	str	r3, [r7, #28]
 8002f52:	e018      	b.n	8002f86 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d104      	bne.n	8002f66 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f62:	61fb      	str	r3, [r7, #28]
 8002f64:	e00f      	b.n	8002f86 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002f66:	f001 ff9f 	bl	8004ea8 <HAL_RCC_GetHCLKFreq>
 8002f6a:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4a14      	ldr	r2, [pc, #80]	; (8002fc0 <HAL_DAC_ConfigChannel+0x294>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d904      	bls.n	8002f7e <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	e003      	b.n	8002f86 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f84:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6819      	ldr	r1, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	22c0      	movs	r2, #192	; 0xc0
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43da      	mvns	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	400a      	ands	r2, r1
 8002fa8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3720      	adds	r7, #32
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	04c4b400 	.word	0x04c4b400

08002fc4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f7fd fc7c 	bl	80008d0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	711a      	strb	r2, [r3, #4]
}
 8002fde:	bf00      	nop
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b084      	sub	sp, #16
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f7ff fe84 	bl	8002d02 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b084      	sub	sp, #16
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f043 0204 	orr.w	r2, r3, #4
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f7ff fe7a 	bl	8002d16 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	711a      	strb	r2, [r3, #4]
}
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003078:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f7ff ffd8 	bl	8003030 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	711a      	strb	r2, [r3, #4]
}
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f7ff ffd1 	bl	8003044 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	f043 0204 	orr.w	r2, r3, #4
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f7ff ffc7 	bl	8003058 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	711a      	strb	r2, [r3, #4]
}
 80030d0:	bf00      	nop
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e0ac      	b.n	8003244 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fab6 	bl	8003660 <DFSDM_GetChannelFromInstance>
 80030f4:	4603      	mov	r3, r0
 80030f6:	4a55      	ldr	r2, [pc, #340]	; (800324c <HAL_DFSDM_ChannelInit+0x174>)
 80030f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e09f      	b.n	8003244 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7fe fb1d 	bl	8001744 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800310a:	4b51      	ldr	r3, [pc, #324]	; (8003250 <HAL_DFSDM_ChannelInit+0x178>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	3301      	adds	r3, #1
 8003110:	4a4f      	ldr	r2, [pc, #316]	; (8003250 <HAL_DFSDM_ChannelInit+0x178>)
 8003112:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003114:	4b4e      	ldr	r3, [pc, #312]	; (8003250 <HAL_DFSDM_ChannelInit+0x178>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d125      	bne.n	8003168 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800311c:	4b4d      	ldr	r3, [pc, #308]	; (8003254 <HAL_DFSDM_ChannelInit+0x17c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a4c      	ldr	r2, [pc, #304]	; (8003254 <HAL_DFSDM_ChannelInit+0x17c>)
 8003122:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003126:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003128:	4b4a      	ldr	r3, [pc, #296]	; (8003254 <HAL_DFSDM_ChannelInit+0x17c>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	4948      	ldr	r1, [pc, #288]	; (8003254 <HAL_DFSDM_ChannelInit+0x17c>)
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003136:	4b47      	ldr	r3, [pc, #284]	; (8003254 <HAL_DFSDM_ChannelInit+0x17c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a46      	ldr	r2, [pc, #280]	; (8003254 <HAL_DFSDM_ChannelInit+0x17c>)
 800313c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003140:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	791b      	ldrb	r3, [r3, #4]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d108      	bne.n	800315c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800314a:	4b42      	ldr	r3, [pc, #264]	; (8003254 <HAL_DFSDM_ChannelInit+0x17c>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	3b01      	subs	r3, #1
 8003154:	041b      	lsls	r3, r3, #16
 8003156:	493f      	ldr	r1, [pc, #252]	; (8003254 <HAL_DFSDM_ChannelInit+0x17c>)
 8003158:	4313      	orrs	r3, r2
 800315a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800315c:	4b3d      	ldr	r3, [pc, #244]	; (8003254 <HAL_DFSDM_ChannelInit+0x17c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a3c      	ldr	r2, [pc, #240]	; (8003254 <HAL_DFSDM_ChannelInit+0x17c>)
 8003162:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003166:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003176:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6819      	ldr	r1, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003186:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800318c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 020f 	bic.w	r2, r2, #15
 80031a4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6819      	ldr	r1, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80031cc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6899      	ldr	r1, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	3b01      	subs	r3, #1
 80031de:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f002 0207 	and.w	r2, r2, #7
 80031f8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003224:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fa14 	bl	8003660 <DFSDM_GetChannelFromInstance>
 8003238:	4602      	mov	r2, r0
 800323a:	4904      	ldr	r1, [pc, #16]	; (800324c <HAL_DFSDM_ChannelInit+0x174>)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20080560 	.word	0x20080560
 8003250:	2008055c 	.word	0x2008055c
 8003254:	40016000 	.word	0x40016000

08003258 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0ca      	b.n	8003400 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a66      	ldr	r2, [pc, #408]	; (8003408 <HAL_DFSDM_FilterInit+0x1b0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d109      	bne.n	8003288 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003278:	2b01      	cmp	r3, #1
 800327a:	d003      	beq.n	8003284 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0bb      	b.n	8003400 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7fe f9a3 	bl	80015ec <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80032b4:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	7a1b      	ldrb	r3, [r3, #8]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d108      	bne.n	80032d0 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	e007      	b.n	80032e0 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80032de:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	7a5b      	ldrb	r3, [r3, #9]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d108      	bne.n	80032fa <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	e007      	b.n	800330a <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003308:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003318:	f023 0308 	bic.w	r3, r3, #8
 800331c:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d108      	bne.n	8003338 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6819      	ldr	r1, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	695a      	ldr	r2, [r3, #20]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	7c1b      	ldrb	r3, [r3, #16]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d108      	bne.n	8003352 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0210 	orr.w	r2, r2, #16
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	e007      	b.n	8003362 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0210 	bic.w	r2, r2, #16
 8003360:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	7c5b      	ldrb	r3, [r3, #17]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d108      	bne.n	800337c <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0220 	orr.w	r2, r2, #32
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e007      	b.n	800338c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0220 	bic.w	r2, r2, #32
 800338a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800339a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800339e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6959      	ldr	r1, [r3, #20]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80033b2:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80033ba:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699a      	ldr	r2, [r3, #24]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	7c1a      	ldrb	r2, [r3, #16]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0201 	orr.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40016100 	.word	0x40016100

0800340c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003422:	2b00      	cmp	r3, #0
 8003424:	d02e      	beq.n	8003484 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800342c:	2bff      	cmp	r3, #255	; 0xff
 800342e:	d029      	beq.n	8003484 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800343e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003442:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d10d      	bne.n	8003466 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003458:	431a      	orrs	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	e00a      	b.n	800347c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	021b      	lsls	r3, r3, #8
 8003470:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	631a      	str	r2, [r3, #48]	; 0x30
 8003482:	e001      	b.n	8003488 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003488:	7dfb      	ldrb	r3, [r7, #23]
}
 800348a:	4618      	mov	r0, r3
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	75fb      	strb	r3, [r7, #23]
 80034b8:	e064      	b.n	8003584 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034c8:	d002      	beq.n	80034d0 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	75fb      	strb	r3, [r7, #23]
 80034ce:	e059      	b.n	8003584 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10e      	bne.n	80034f6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10a      	bne.n	80034f6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d105      	bne.n	80034f6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d002      	beq.n	80034f6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	75fb      	strb	r3, [r7, #23]
 80034f4:	e046      	b.n	8003584 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10b      	bne.n	8003516 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003502:	2b00      	cmp	r3, #0
 8003504:	d107      	bne.n	8003516 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800350c:	2b20      	cmp	r3, #32
 800350e:	d102      	bne.n	8003516 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	75fb      	strb	r3, [r7, #23]
 8003514:	e036      	b.n	8003584 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800351c:	2b01      	cmp	r3, #1
 800351e:	d004      	beq.n	800352a <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003526:	2b03      	cmp	r3, #3
 8003528:	d12a      	bne.n	8003580 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	4a18      	ldr	r2, [pc, #96]	; (8003590 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8003530:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003536:	4a17      	ldr	r2, [pc, #92]	; (8003594 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8003538:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353e:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003540:	2b20      	cmp	r3, #32
 8003542:	d101      	bne.n	8003548 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8003544:	4a14      	ldr	r2, [pc, #80]	; (8003598 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8003546:	e000      	b.n	800354a <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8003548:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	331c      	adds	r3, #28
 800355a:	4619      	mov	r1, r3
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f000 fa16 	bl	8003990 <HAL_DMA_Start_IT>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d006      	beq.n	8003578 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	22ff      	movs	r2, #255	; 0xff
 800356e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003576:	e005      	b.n	8003584 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f8bd 	bl	80036f8 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800357e:	e001      	b.n	8003584 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003584:	7dfb      	ldrb	r3, [r7, #23]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	08003621 	.word	0x08003621
 8003594:	0800363d 	.word	0x0800363d
 8003598:	08003605 	.word	0x08003605

0800359c <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d007      	beq.n	80035c2 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d002      	beq.n	80035c2 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	73fb      	strb	r3, [r7, #15]
 80035c0:	e007      	b.n	80035d2 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fa5d 	bl	8003a86 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f8e9 	bl	80037a4 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f7ff ffe2 	bl	80035dc <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8003618:	bf00      	nop
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f7fd fa5c 	bl	8000aec <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2203      	movs	r2, #3
 800364e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f7ff ffcd 	bl	80035f0 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8003656:	bf00      	nop
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a1c      	ldr	r2, [pc, #112]	; (80036dc <DFSDM_GetChannelFromInstance+0x7c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d102      	bne.n	8003676 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	e02b      	b.n	80036ce <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a19      	ldr	r2, [pc, #100]	; (80036e0 <DFSDM_GetChannelFromInstance+0x80>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d102      	bne.n	8003684 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800367e:	2301      	movs	r3, #1
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	e024      	b.n	80036ce <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a17      	ldr	r2, [pc, #92]	; (80036e4 <DFSDM_GetChannelFromInstance+0x84>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d102      	bne.n	8003692 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800368c:	2302      	movs	r3, #2
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	e01d      	b.n	80036ce <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a14      	ldr	r2, [pc, #80]	; (80036e8 <DFSDM_GetChannelFromInstance+0x88>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d102      	bne.n	80036a0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800369a:	2304      	movs	r3, #4
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	e016      	b.n	80036ce <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a12      	ldr	r2, [pc, #72]	; (80036ec <DFSDM_GetChannelFromInstance+0x8c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d102      	bne.n	80036ae <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80036a8:	2305      	movs	r3, #5
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	e00f      	b.n	80036ce <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a0f      	ldr	r2, [pc, #60]	; (80036f0 <DFSDM_GetChannelFromInstance+0x90>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d102      	bne.n	80036bc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80036b6:	2306      	movs	r3, #6
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	e008      	b.n	80036ce <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a0d      	ldr	r2, [pc, #52]	; (80036f4 <DFSDM_GetChannelFromInstance+0x94>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d102      	bne.n	80036ca <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80036c4:	2307      	movs	r3, #7
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	e001      	b.n	80036ce <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80036ca:	2303      	movs	r3, #3
 80036cc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80036ce:	68fb      	ldr	r3, [r7, #12]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	40016000 	.word	0x40016000
 80036e0:	40016020 	.word	0x40016020
 80036e4:	40016040 	.word	0x40016040
 80036e8:	40016080 	.word	0x40016080
 80036ec:	400160a0 	.word	0x400160a0
 80036f0:	400160c0 	.word	0x400160c0
 80036f4:	400160e0 	.word	0x400160e0

080036f8 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003704:	2b00      	cmp	r3, #0
 8003706:	d108      	bne.n	800371a <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	e033      	b.n	8003782 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0201 	bic.w	r2, r2, #1
 8003728:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003738:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003750:	2b03      	cmp	r3, #3
 8003752:	d116      	bne.n	8003782 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003758:	2b00      	cmp	r3, #0
 800375a:	d107      	bne.n	800376c <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0202 	orr.w	r2, r2, #2
 800376a:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003772:	2b01      	cmp	r3, #1
 8003774:	d102      	bne.n	800377c <DFSDM_RegConvStart+0x84>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	e000      	b.n	800377e <DFSDM_RegConvStart+0x86>
 800377c:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <DFSDM_RegConvStart+0x98>
 800378c:	2202      	movs	r2, #2
 800378e:	e000      	b.n	8003792 <DFSDM_RegConvStart+0x9a>
 8003790:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d107      	bne.n	80037d4 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80037d2:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d116      	bne.n	800381c <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d107      	bne.n	8003806 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0202 	orr.w	r2, r2, #2
 8003804:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 800380c:	2b01      	cmp	r3, #1
 800380e:	d102      	bne.n	8003816 <DFSDM_RegConvStop+0x72>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003814:	e000      	b.n	8003818 <DFSDM_RegConvStop+0x74>
 8003816:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8003822:	2b02      	cmp	r3, #2
 8003824:	d101      	bne.n	800382a <DFSDM_RegConvStop+0x86>
 8003826:	2201      	movs	r2, #1
 8003828:	e000      	b.n	800382c <DFSDM_RegConvStop+0x88>
 800382a:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
	...

08003840 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e08d      	b.n	800396e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	4b47      	ldr	r3, [pc, #284]	; (8003978 <HAL_DMA_Init+0x138>)
 800385a:	429a      	cmp	r2, r3
 800385c:	d80f      	bhi.n	800387e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	4b45      	ldr	r3, [pc, #276]	; (800397c <HAL_DMA_Init+0x13c>)
 8003866:	4413      	add	r3, r2
 8003868:	4a45      	ldr	r2, [pc, #276]	; (8003980 <HAL_DMA_Init+0x140>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	091b      	lsrs	r3, r3, #4
 8003870:	009a      	lsls	r2, r3, #2
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a42      	ldr	r2, [pc, #264]	; (8003984 <HAL_DMA_Init+0x144>)
 800387a:	641a      	str	r2, [r3, #64]	; 0x40
 800387c:	e00e      	b.n	800389c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	4b40      	ldr	r3, [pc, #256]	; (8003988 <HAL_DMA_Init+0x148>)
 8003886:	4413      	add	r3, r2
 8003888:	4a3d      	ldr	r2, [pc, #244]	; (8003980 <HAL_DMA_Init+0x140>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	091b      	lsrs	r3, r3, #4
 8003890:	009a      	lsls	r2, r3, #2
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a3c      	ldr	r2, [pc, #240]	; (800398c <HAL_DMA_Init+0x14c>)
 800389a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80038b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80038c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fa12 	bl	8003d18 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038fc:	d102      	bne.n	8003904 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003918:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d010      	beq.n	8003944 <HAL_DMA_Init+0x104>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b04      	cmp	r3, #4
 8003928:	d80c      	bhi.n	8003944 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fa32 	bl	8003d94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	e008      	b.n	8003956 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40020407 	.word	0x40020407
 800397c:	bffdfff8 	.word	0xbffdfff8
 8003980:	cccccccd 	.word	0xcccccccd
 8003984:	40020000 	.word	0x40020000
 8003988:	bffdfbf8 	.word	0xbffdfbf8
 800398c:	40020400 	.word	0x40020400

08003990 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_DMA_Start_IT+0x20>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e066      	b.n	8003a7e <HAL_DMA_Start_IT+0xee>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d155      	bne.n	8003a70 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0201 	bic.w	r2, r2, #1
 80039e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	68b9      	ldr	r1, [r7, #8]
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 f957 	bl	8003c9c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d008      	beq.n	8003a08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 020e 	orr.w	r2, r2, #14
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	e00f      	b.n	8003a28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0204 	bic.w	r2, r2, #4
 8003a16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 020a 	orr.w	r2, r2, #10
 8003a26:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d007      	beq.n	8003a46 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a44:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d007      	beq.n	8003a5e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a5c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0201 	orr.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	e005      	b.n	8003a7c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b085      	sub	sp, #20
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d008      	beq.n	8003ab0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2204      	movs	r2, #4
 8003aa2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e040      	b.n	8003b32 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 020e 	bic.w	r2, r2, #14
 8003abe:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ace:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae4:	f003 021c 	and.w	r2, r3, #28
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	2101      	movs	r1, #1
 8003aee:	fa01 f202 	lsl.w	r2, r1, r2
 8003af2:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003afc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00c      	beq.n	8003b20 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b14:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b1e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5a:	f003 031c 	and.w	r3, r3, #28
 8003b5e:	2204      	movs	r2, #4
 8003b60:	409a      	lsls	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4013      	ands	r3, r2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d026      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x7a>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d021      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d107      	bne.n	8003b92 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0204 	bic.w	r2, r2, #4
 8003b90:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	f003 021c 	and.w	r2, r3, #28
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	2104      	movs	r1, #4
 8003ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d071      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003bb6:	e06c      	b.n	8003c92 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbc:	f003 031c 	and.w	r3, r3, #28
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d02e      	beq.n	8003c2a <HAL_DMA_IRQHandler+0xec>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d029      	beq.n	8003c2a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10b      	bne.n	8003bfc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 020a 	bic.w	r2, r2, #10
 8003bf2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c00:	f003 021c 	and.w	r2, r3, #28
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	2102      	movs	r1, #2
 8003c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c0e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d038      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003c28:	e033      	b.n	8003c92 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	f003 031c 	and.w	r3, r3, #28
 8003c32:	2208      	movs	r2, #8
 8003c34:	409a      	lsls	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d02a      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x156>
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d025      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 020e 	bic.w	r2, r2, #14
 8003c56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5c:	f003 021c 	and.w	r2, r3, #28
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	2101      	movs	r1, #1
 8003c66:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d004      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
}
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cb2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d004      	beq.n	8003cc6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003cc4:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	f003 021c 	and.w	r2, r3, #28
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b10      	cmp	r3, #16
 8003ce8:	d108      	bne.n	8003cfc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cfa:	e007      	b.n	8003d0c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	60da      	str	r2, [r3, #12]
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	461a      	mov	r2, r3
 8003d26:	4b17      	ldr	r3, [pc, #92]	; (8003d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d80a      	bhi.n	8003d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d30:	089b      	lsrs	r3, r3, #2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d38:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6493      	str	r3, [r2, #72]	; 0x48
 8003d40:	e007      	b.n	8003d52 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	089b      	lsrs	r3, r3, #2
 8003d48:	009a      	lsls	r2, r3, #2
 8003d4a:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003d4c:	4413      	add	r3, r2
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	3b08      	subs	r3, #8
 8003d5a:	4a0c      	ldr	r2, [pc, #48]	; (8003d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a0a      	ldr	r2, [pc, #40]	; (8003d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003d68:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f003 031f 	and.w	r3, r3, #31
 8003d70:	2201      	movs	r2, #1
 8003d72:	409a      	lsls	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d78:	bf00      	nop
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	40020407 	.word	0x40020407
 8003d88:	4002081c 	.word	0x4002081c
 8003d8c:	cccccccd 	.word	0xcccccccd
 8003d90:	40020880 	.word	0x40020880

08003d94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	461a      	mov	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a08      	ldr	r2, [pc, #32]	; (8003dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003db6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	1000823f 	.word	0x1000823f
 8003dd8:	40020940 	.word	0x40020940

08003ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dea:	e166      	b.n	80040ba <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	2101      	movs	r1, #1
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	fa01 f303 	lsl.w	r3, r1, r3
 8003df8:	4013      	ands	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 8158 	beq.w	80040b4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 0303 	and.w	r3, r3, #3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d005      	beq.n	8003e1c <HAL_GPIO_Init+0x40>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d130      	bne.n	8003e7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	2203      	movs	r2, #3
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	4013      	ands	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e52:	2201      	movs	r2, #1
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	091b      	lsrs	r3, r3, #4
 8003e68:	f003 0201 	and.w	r2, r3, #1
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d017      	beq.n	8003eba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	2203      	movs	r2, #3
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d123      	bne.n	8003f0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	08da      	lsrs	r2, r3, #3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3208      	adds	r2, #8
 8003ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	220f      	movs	r2, #15
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	691a      	ldr	r2, [r3, #16]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	08da      	lsrs	r2, r3, #3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3208      	adds	r2, #8
 8003f08:	6939      	ldr	r1, [r7, #16]
 8003f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	2203      	movs	r2, #3
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	4013      	ands	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 0203 	and.w	r2, r3, #3
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 80b2 	beq.w	80040b4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f50:	4b61      	ldr	r3, [pc, #388]	; (80040d8 <HAL_GPIO_Init+0x2fc>)
 8003f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f54:	4a60      	ldr	r2, [pc, #384]	; (80040d8 <HAL_GPIO_Init+0x2fc>)
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	6613      	str	r3, [r2, #96]	; 0x60
 8003f5c:	4b5e      	ldr	r3, [pc, #376]	; (80040d8 <HAL_GPIO_Init+0x2fc>)
 8003f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	60bb      	str	r3, [r7, #8]
 8003f66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f68:	4a5c      	ldr	r2, [pc, #368]	; (80040dc <HAL_GPIO_Init+0x300>)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	089b      	lsrs	r3, r3, #2
 8003f6e:	3302      	adds	r3, #2
 8003f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f003 0303 	and.w	r3, r3, #3
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	220f      	movs	r2, #15
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f92:	d02b      	beq.n	8003fec <HAL_GPIO_Init+0x210>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a52      	ldr	r2, [pc, #328]	; (80040e0 <HAL_GPIO_Init+0x304>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d025      	beq.n	8003fe8 <HAL_GPIO_Init+0x20c>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a51      	ldr	r2, [pc, #324]	; (80040e4 <HAL_GPIO_Init+0x308>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d01f      	beq.n	8003fe4 <HAL_GPIO_Init+0x208>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a50      	ldr	r2, [pc, #320]	; (80040e8 <HAL_GPIO_Init+0x30c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d019      	beq.n	8003fe0 <HAL_GPIO_Init+0x204>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a4f      	ldr	r2, [pc, #316]	; (80040ec <HAL_GPIO_Init+0x310>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d013      	beq.n	8003fdc <HAL_GPIO_Init+0x200>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a4e      	ldr	r2, [pc, #312]	; (80040f0 <HAL_GPIO_Init+0x314>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00d      	beq.n	8003fd8 <HAL_GPIO_Init+0x1fc>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a4d      	ldr	r2, [pc, #308]	; (80040f4 <HAL_GPIO_Init+0x318>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d007      	beq.n	8003fd4 <HAL_GPIO_Init+0x1f8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a4c      	ldr	r2, [pc, #304]	; (80040f8 <HAL_GPIO_Init+0x31c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d101      	bne.n	8003fd0 <HAL_GPIO_Init+0x1f4>
 8003fcc:	2307      	movs	r3, #7
 8003fce:	e00e      	b.n	8003fee <HAL_GPIO_Init+0x212>
 8003fd0:	2308      	movs	r3, #8
 8003fd2:	e00c      	b.n	8003fee <HAL_GPIO_Init+0x212>
 8003fd4:	2306      	movs	r3, #6
 8003fd6:	e00a      	b.n	8003fee <HAL_GPIO_Init+0x212>
 8003fd8:	2305      	movs	r3, #5
 8003fda:	e008      	b.n	8003fee <HAL_GPIO_Init+0x212>
 8003fdc:	2304      	movs	r3, #4
 8003fde:	e006      	b.n	8003fee <HAL_GPIO_Init+0x212>
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e004      	b.n	8003fee <HAL_GPIO_Init+0x212>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e002      	b.n	8003fee <HAL_GPIO_Init+0x212>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e000      	b.n	8003fee <HAL_GPIO_Init+0x212>
 8003fec:	2300      	movs	r3, #0
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	f002 0203 	and.w	r2, r2, #3
 8003ff4:	0092      	lsls	r2, r2, #2
 8003ff6:	4093      	lsls	r3, r2
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ffe:	4937      	ldr	r1, [pc, #220]	; (80040dc <HAL_GPIO_Init+0x300>)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	089b      	lsrs	r3, r3, #2
 8004004:	3302      	adds	r3, #2
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800400c:	4b3b      	ldr	r3, [pc, #236]	; (80040fc <HAL_GPIO_Init+0x320>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	43db      	mvns	r3, r3
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4013      	ands	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004030:	4a32      	ldr	r2, [pc, #200]	; (80040fc <HAL_GPIO_Init+0x320>)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004036:	4b31      	ldr	r3, [pc, #196]	; (80040fc <HAL_GPIO_Init+0x320>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	43db      	mvns	r3, r3
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4013      	ands	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800405a:	4a28      	ldr	r2, [pc, #160]	; (80040fc <HAL_GPIO_Init+0x320>)
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004060:	4b26      	ldr	r3, [pc, #152]	; (80040fc <HAL_GPIO_Init+0x320>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	43db      	mvns	r3, r3
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4013      	ands	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004084:	4a1d      	ldr	r2, [pc, #116]	; (80040fc <HAL_GPIO_Init+0x320>)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800408a:	4b1c      	ldr	r3, [pc, #112]	; (80040fc <HAL_GPIO_Init+0x320>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	43db      	mvns	r3, r3
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4013      	ands	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040ae:	4a13      	ldr	r2, [pc, #76]	; (80040fc <HAL_GPIO_Init+0x320>)
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	3301      	adds	r3, #1
 80040b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	fa22 f303 	lsr.w	r3, r2, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f47f ae91 	bne.w	8003dec <HAL_GPIO_Init+0x10>
  }
}
 80040ca:	bf00      	nop
 80040cc:	bf00      	nop
 80040ce:	371c      	adds	r7, #28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	40021000 	.word	0x40021000
 80040dc:	40010000 	.word	0x40010000
 80040e0:	48000400 	.word	0x48000400
 80040e4:	48000800 	.word	0x48000800
 80040e8:	48000c00 	.word	0x48000c00
 80040ec:	48001000 	.word	0x48001000
 80040f0:	48001400 	.word	0x48001400
 80040f4:	48001800 	.word	0x48001800
 80040f8:	48001c00 	.word	0x48001c00
 80040fc:	40010400 	.word	0x40010400

08004100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	807b      	strh	r3, [r7, #2]
 800410c:	4613      	mov	r3, r2
 800410e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004110:	787b      	ldrb	r3, [r7, #1]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004116:	887a      	ldrh	r2, [r7, #2]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800411c:	e002      	b.n	8004124 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800411e:	887a      	ldrh	r2, [r7, #2]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800413a:	4b08      	ldr	r3, [pc, #32]	; (800415c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	4013      	ands	r3, r2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d006      	beq.n	8004154 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004146:	4a05      	ldr	r2, [pc, #20]	; (800415c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004148:	88fb      	ldrh	r3, [r7, #6]
 800414a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800414c:	88fb      	ldrh	r3, [r7, #6]
 800414e:	4618      	mov	r0, r3
 8004150:	f7fc fb8a 	bl	8000868 <HAL_GPIO_EXTI_Callback>
  }
}
 8004154:	bf00      	nop
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40010400 	.word	0x40010400

08004160 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004164:	4b0d      	ldr	r3, [pc, #52]	; (800419c <HAL_PWREx_GetVoltageRange+0x3c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800416c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004170:	d102      	bne.n	8004178 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004176:	e00b      	b.n	8004190 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004178:	4b08      	ldr	r3, [pc, #32]	; (800419c <HAL_PWREx_GetVoltageRange+0x3c>)
 800417a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800417e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004186:	d102      	bne.n	800418e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004188:	f44f 7300 	mov.w	r3, #512	; 0x200
 800418c:	e000      	b.n	8004190 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800418e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004190:	4618      	mov	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	40007000 	.word	0x40007000

080041a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d141      	bne.n	8004232 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041ae:	4b4b      	ldr	r3, [pc, #300]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ba:	d131      	bne.n	8004220 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041bc:	4b47      	ldr	r3, [pc, #284]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041c2:	4a46      	ldr	r2, [pc, #280]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041cc:	4b43      	ldr	r3, [pc, #268]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041d4:	4a41      	ldr	r2, [pc, #260]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80041dc:	4b40      	ldr	r3, [pc, #256]	; (80042e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2232      	movs	r2, #50	; 0x32
 80041e2:	fb02 f303 	mul.w	r3, r2, r3
 80041e6:	4a3f      	ldr	r2, [pc, #252]	; (80042e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041e8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ec:	0c9b      	lsrs	r3, r3, #18
 80041ee:	3301      	adds	r3, #1
 80041f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041f2:	e002      	b.n	80041fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041fa:	4b38      	ldr	r3, [pc, #224]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004206:	d102      	bne.n	800420e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f2      	bne.n	80041f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800420e:	4b33      	ldr	r3, [pc, #204]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800421a:	d158      	bne.n	80042ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e057      	b.n	80042d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004220:	4b2e      	ldr	r3, [pc, #184]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004226:	4a2d      	ldr	r2, [pc, #180]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800422c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004230:	e04d      	b.n	80042ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004238:	d141      	bne.n	80042be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800423a:	4b28      	ldr	r3, [pc, #160]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004246:	d131      	bne.n	80042ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004248:	4b24      	ldr	r3, [pc, #144]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800424a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800424e:	4a23      	ldr	r2, [pc, #140]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004254:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004258:	4b20      	ldr	r3, [pc, #128]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004260:	4a1e      	ldr	r2, [pc, #120]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004266:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004268:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2232      	movs	r2, #50	; 0x32
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	4a1c      	ldr	r2, [pc, #112]	; (80042e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	0c9b      	lsrs	r3, r3, #18
 800427a:	3301      	adds	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800427e:	e002      	b.n	8004286 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3b01      	subs	r3, #1
 8004284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004286:	4b15      	ldr	r3, [pc, #84]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004292:	d102      	bne.n	800429a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f2      	bne.n	8004280 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800429a:	4b10      	ldr	r3, [pc, #64]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a6:	d112      	bne.n	80042ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e011      	b.n	80042d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b2:	4a0a      	ldr	r2, [pc, #40]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80042bc:	e007      	b.n	80042ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042be:	4b07      	ldr	r3, [pc, #28]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042c6:	4a05      	ldr	r2, [pc, #20]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042cc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	40007000 	.word	0x40007000
 80042e0:	20000004 	.word	0x20000004
 80042e4:	431bde83 	.word	0x431bde83

080042e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d102      	bne.n	80042fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	f000 bc08 	b.w	8004b0c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042fc:	4b96      	ldr	r3, [pc, #600]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 030c 	and.w	r3, r3, #12
 8004304:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004306:	4b94      	ldr	r3, [pc, #592]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80e4 	beq.w	80044e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d007      	beq.n	8004334 <HAL_RCC_OscConfig+0x4c>
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	2b0c      	cmp	r3, #12
 8004328:	f040 808b 	bne.w	8004442 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2b01      	cmp	r3, #1
 8004330:	f040 8087 	bne.w	8004442 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004334:	4b88      	ldr	r3, [pc, #544]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCC_OscConfig+0x64>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e3df      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1a      	ldr	r2, [r3, #32]
 8004350:	4b81      	ldr	r3, [pc, #516]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b00      	cmp	r3, #0
 800435a:	d004      	beq.n	8004366 <HAL_RCC_OscConfig+0x7e>
 800435c:	4b7e      	ldr	r3, [pc, #504]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004364:	e005      	b.n	8004372 <HAL_RCC_OscConfig+0x8a>
 8004366:	4b7c      	ldr	r3, [pc, #496]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800436c:	091b      	lsrs	r3, r3, #4
 800436e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004372:	4293      	cmp	r3, r2
 8004374:	d223      	bcs.n	80043be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	4618      	mov	r0, r3
 800437c:	f000 fda0 	bl	8004ec0 <RCC_SetFlashLatencyFromMSIRange>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e3c0      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800438a:	4b73      	ldr	r3, [pc, #460]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a72      	ldr	r2, [pc, #456]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004390:	f043 0308 	orr.w	r3, r3, #8
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	4b70      	ldr	r3, [pc, #448]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	496d      	ldr	r1, [pc, #436]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043a8:	4b6b      	ldr	r3, [pc, #428]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	021b      	lsls	r3, r3, #8
 80043b6:	4968      	ldr	r1, [pc, #416]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	604b      	str	r3, [r1, #4]
 80043bc:	e025      	b.n	800440a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043be:	4b66      	ldr	r3, [pc, #408]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a65      	ldr	r2, [pc, #404]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80043c4:	f043 0308 	orr.w	r3, r3, #8
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	4b63      	ldr	r3, [pc, #396]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	4960      	ldr	r1, [pc, #384]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043dc:	4b5e      	ldr	r3, [pc, #376]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	021b      	lsls	r3, r3, #8
 80043ea:	495b      	ldr	r1, [pc, #364]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d109      	bne.n	800440a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fd60 	bl	8004ec0 <RCC_SetFlashLatencyFromMSIRange>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e380      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800440a:	f000 fcc1 	bl	8004d90 <HAL_RCC_GetSysClockFreq>
 800440e:	4602      	mov	r2, r0
 8004410:	4b51      	ldr	r3, [pc, #324]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	4950      	ldr	r1, [pc, #320]	; (800455c <HAL_RCC_OscConfig+0x274>)
 800441c:	5ccb      	ldrb	r3, [r1, r3]
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	fa22 f303 	lsr.w	r3, r2, r3
 8004426:	4a4e      	ldr	r2, [pc, #312]	; (8004560 <HAL_RCC_OscConfig+0x278>)
 8004428:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800442a:	4b4e      	ldr	r3, [pc, #312]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f7fd fac0 	bl	80019b4 <HAL_InitTick>
 8004434:	4603      	mov	r3, r0
 8004436:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d052      	beq.n	80044e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	e364      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d032      	beq.n	80044b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800444a:	4b43      	ldr	r3, [pc, #268]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a42      	ldr	r2, [pc, #264]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004456:	f7fd fafd 	bl	8001a54 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800445e:	f7fd faf9 	bl	8001a54 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e34d      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004470:	4b39      	ldr	r3, [pc, #228]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800447c:	4b36      	ldr	r3, [pc, #216]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a35      	ldr	r2, [pc, #212]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004482:	f043 0308 	orr.w	r3, r3, #8
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	4b33      	ldr	r3, [pc, #204]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	4930      	ldr	r1, [pc, #192]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004496:	4313      	orrs	r3, r2
 8004498:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800449a:	4b2f      	ldr	r3, [pc, #188]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	492b      	ldr	r1, [pc, #172]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	604b      	str	r3, [r1, #4]
 80044ae:	e01a      	b.n	80044e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044b0:	4b29      	ldr	r3, [pc, #164]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a28      	ldr	r2, [pc, #160]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80044b6:	f023 0301 	bic.w	r3, r3, #1
 80044ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044bc:	f7fd faca 	bl	8001a54 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044c4:	f7fd fac6 	bl	8001a54 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e31a      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044d6:	4b20      	ldr	r3, [pc, #128]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f0      	bne.n	80044c4 <HAL_RCC_OscConfig+0x1dc>
 80044e2:	e000      	b.n	80044e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d073      	beq.n	80045da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d005      	beq.n	8004504 <HAL_RCC_OscConfig+0x21c>
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	2b0c      	cmp	r3, #12
 80044fc:	d10e      	bne.n	800451c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b03      	cmp	r3, #3
 8004502:	d10b      	bne.n	800451c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004504:	4b14      	ldr	r3, [pc, #80]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d063      	beq.n	80045d8 <HAL_RCC_OscConfig+0x2f0>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d15f      	bne.n	80045d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e2f7      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004524:	d106      	bne.n	8004534 <HAL_RCC_OscConfig+0x24c>
 8004526:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a0b      	ldr	r2, [pc, #44]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 800452c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	e025      	b.n	8004580 <HAL_RCC_OscConfig+0x298>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800453c:	d114      	bne.n	8004568 <HAL_RCC_OscConfig+0x280>
 800453e:	4b06      	ldr	r3, [pc, #24]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a05      	ldr	r2, [pc, #20]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	4b03      	ldr	r3, [pc, #12]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a02      	ldr	r2, [pc, #8]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	e013      	b.n	8004580 <HAL_RCC_OscConfig+0x298>
 8004558:	40021000 	.word	0x40021000
 800455c:	080064e0 	.word	0x080064e0
 8004560:	20000004 	.word	0x20000004
 8004564:	20000008 	.word	0x20000008
 8004568:	4ba0      	ldr	r3, [pc, #640]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a9f      	ldr	r2, [pc, #636]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 800456e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	4b9d      	ldr	r3, [pc, #628]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a9c      	ldr	r2, [pc, #624]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 800457a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800457e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d013      	beq.n	80045b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004588:	f7fd fa64 	bl	8001a54 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004590:	f7fd fa60 	bl	8001a54 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b64      	cmp	r3, #100	; 0x64
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e2b4      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045a2:	4b92      	ldr	r3, [pc, #584]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0x2a8>
 80045ae:	e014      	b.n	80045da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fd fa50 	bl	8001a54 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b8:	f7fd fa4c 	bl	8001a54 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b64      	cmp	r3, #100	; 0x64
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e2a0      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045ca:	4b88      	ldr	r3, [pc, #544]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x2d0>
 80045d6:	e000      	b.n	80045da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d060      	beq.n	80046a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	d005      	beq.n	80045f8 <HAL_RCC_OscConfig+0x310>
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	2b0c      	cmp	r3, #12
 80045f0:	d119      	bne.n	8004626 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d116      	bne.n	8004626 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045f8:	4b7c      	ldr	r3, [pc, #496]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <HAL_RCC_OscConfig+0x328>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e27d      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004610:	4b76      	ldr	r3, [pc, #472]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	061b      	lsls	r3, r3, #24
 800461e:	4973      	ldr	r1, [pc, #460]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004620:	4313      	orrs	r3, r2
 8004622:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004624:	e040      	b.n	80046a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d023      	beq.n	8004676 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800462e:	4b6f      	ldr	r3, [pc, #444]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a6e      	ldr	r2, [pc, #440]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463a:	f7fd fa0b 	bl	8001a54 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004642:	f7fd fa07 	bl	8001a54 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e25b      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004654:	4b65      	ldr	r3, [pc, #404]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0f0      	beq.n	8004642 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004660:	4b62      	ldr	r3, [pc, #392]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	061b      	lsls	r3, r3, #24
 800466e:	495f      	ldr	r1, [pc, #380]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004670:	4313      	orrs	r3, r2
 8004672:	604b      	str	r3, [r1, #4]
 8004674:	e018      	b.n	80046a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004676:	4b5d      	ldr	r3, [pc, #372]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a5c      	ldr	r2, [pc, #368]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 800467c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004682:	f7fd f9e7 	bl	8001a54 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800468a:	f7fd f9e3 	bl	8001a54 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e237      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800469c:	4b53      	ldr	r3, [pc, #332]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f0      	bne.n	800468a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d03c      	beq.n	800472e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d01c      	beq.n	80046f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046bc:	4b4b      	ldr	r3, [pc, #300]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80046be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046c2:	4a4a      	ldr	r2, [pc, #296]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80046c4:	f043 0301 	orr.w	r3, r3, #1
 80046c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046cc:	f7fd f9c2 	bl	8001a54 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d4:	f7fd f9be 	bl	8001a54 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e212      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046e6:	4b41      	ldr	r3, [pc, #260]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80046e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0ef      	beq.n	80046d4 <HAL_RCC_OscConfig+0x3ec>
 80046f4:	e01b      	b.n	800472e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046f6:	4b3d      	ldr	r3, [pc, #244]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80046f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046fc:	4a3b      	ldr	r2, [pc, #236]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80046fe:	f023 0301 	bic.w	r3, r3, #1
 8004702:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004706:	f7fd f9a5 	bl	8001a54 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800470e:	f7fd f9a1 	bl	8001a54 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e1f5      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004720:	4b32      	ldr	r3, [pc, #200]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1ef      	bne.n	800470e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0304 	and.w	r3, r3, #4
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 80a6 	beq.w	8004888 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800473c:	2300      	movs	r3, #0
 800473e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004740:	4b2a      	ldr	r3, [pc, #168]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10d      	bne.n	8004768 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800474c:	4b27      	ldr	r3, [pc, #156]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 800474e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004750:	4a26      	ldr	r2, [pc, #152]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004756:	6593      	str	r3, [r2, #88]	; 0x58
 8004758:	4b24      	ldr	r3, [pc, #144]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 800475a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004760:	60bb      	str	r3, [r7, #8]
 8004762:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004764:	2301      	movs	r3, #1
 8004766:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004768:	4b21      	ldr	r3, [pc, #132]	; (80047f0 <HAL_RCC_OscConfig+0x508>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004770:	2b00      	cmp	r3, #0
 8004772:	d118      	bne.n	80047a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004774:	4b1e      	ldr	r3, [pc, #120]	; (80047f0 <HAL_RCC_OscConfig+0x508>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1d      	ldr	r2, [pc, #116]	; (80047f0 <HAL_RCC_OscConfig+0x508>)
 800477a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800477e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004780:	f7fd f968 	bl	8001a54 <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004788:	f7fd f964 	bl	8001a54 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e1b8      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800479a:	4b15      	ldr	r3, [pc, #84]	; (80047f0 <HAL_RCC_OscConfig+0x508>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0f0      	beq.n	8004788 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d108      	bne.n	80047c0 <HAL_RCC_OscConfig+0x4d8>
 80047ae:	4b0f      	ldr	r3, [pc, #60]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80047b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b4:	4a0d      	ldr	r2, [pc, #52]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047be:	e029      	b.n	8004814 <HAL_RCC_OscConfig+0x52c>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b05      	cmp	r3, #5
 80047c6:	d115      	bne.n	80047f4 <HAL_RCC_OscConfig+0x50c>
 80047c8:	4b08      	ldr	r3, [pc, #32]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ce:	4a07      	ldr	r2, [pc, #28]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80047d0:	f043 0304 	orr.w	r3, r3, #4
 80047d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047d8:	4b04      	ldr	r3, [pc, #16]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	4a03      	ldr	r2, [pc, #12]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80047e0:	f043 0301 	orr.w	r3, r3, #1
 80047e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047e8:	e014      	b.n	8004814 <HAL_RCC_OscConfig+0x52c>
 80047ea:	bf00      	nop
 80047ec:	40021000 	.word	0x40021000
 80047f0:	40007000 	.word	0x40007000
 80047f4:	4b9d      	ldr	r3, [pc, #628]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fa:	4a9c      	ldr	r2, [pc, #624]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 80047fc:	f023 0301 	bic.w	r3, r3, #1
 8004800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004804:	4b99      	ldr	r3, [pc, #612]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480a:	4a98      	ldr	r2, [pc, #608]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 800480c:	f023 0304 	bic.w	r3, r3, #4
 8004810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d016      	beq.n	800484a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481c:	f7fd f91a 	bl	8001a54 <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004822:	e00a      	b.n	800483a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004824:	f7fd f916 	bl	8001a54 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004832:	4293      	cmp	r3, r2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e168      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800483a:	4b8c      	ldr	r3, [pc, #560]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0ed      	beq.n	8004824 <HAL_RCC_OscConfig+0x53c>
 8004848:	e015      	b.n	8004876 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484a:	f7fd f903 	bl	8001a54 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004850:	e00a      	b.n	8004868 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004852:	f7fd f8ff 	bl	8001a54 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004860:	4293      	cmp	r3, r2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e151      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004868:	4b80      	ldr	r3, [pc, #512]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 800486a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1ed      	bne.n	8004852 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004876:	7ffb      	ldrb	r3, [r7, #31]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d105      	bne.n	8004888 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800487c:	4b7b      	ldr	r3, [pc, #492]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 800487e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004880:	4a7a      	ldr	r2, [pc, #488]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 8004882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004886:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d03c      	beq.n	800490e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01c      	beq.n	80048d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800489c:	4b73      	ldr	r3, [pc, #460]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 800489e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048a2:	4a72      	ldr	r2, [pc, #456]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 80048a4:	f043 0301 	orr.w	r3, r3, #1
 80048a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ac:	f7fd f8d2 	bl	8001a54 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048b4:	f7fd f8ce 	bl	8001a54 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e122      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048c6:	4b69      	ldr	r3, [pc, #420]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 80048c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0ef      	beq.n	80048b4 <HAL_RCC_OscConfig+0x5cc>
 80048d4:	e01b      	b.n	800490e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048d6:	4b65      	ldr	r3, [pc, #404]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 80048d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048dc:	4a63      	ldr	r2, [pc, #396]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e6:	f7fd f8b5 	bl	8001a54 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ee:	f7fd f8b1 	bl	8001a54 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e105      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004900:	4b5a      	ldr	r3, [pc, #360]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 8004902:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1ef      	bne.n	80048ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 80f9 	beq.w	8004b0a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	2b02      	cmp	r3, #2
 800491e:	f040 80cf 	bne.w	8004ac0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004922:	4b52      	ldr	r3, [pc, #328]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f003 0203 	and.w	r2, r3, #3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	429a      	cmp	r2, r3
 8004934:	d12c      	bne.n	8004990 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	3b01      	subs	r3, #1
 8004942:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004944:	429a      	cmp	r2, r3
 8004946:	d123      	bne.n	8004990 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004952:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004954:	429a      	cmp	r2, r3
 8004956:	d11b      	bne.n	8004990 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004964:	429a      	cmp	r2, r3
 8004966:	d113      	bne.n	8004990 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004972:	085b      	lsrs	r3, r3, #1
 8004974:	3b01      	subs	r3, #1
 8004976:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004978:	429a      	cmp	r2, r3
 800497a:	d109      	bne.n	8004990 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	085b      	lsrs	r3, r3, #1
 8004988:	3b01      	subs	r3, #1
 800498a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800498c:	429a      	cmp	r2, r3
 800498e:	d071      	beq.n	8004a74 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	2b0c      	cmp	r3, #12
 8004994:	d068      	beq.n	8004a68 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004996:	4b35      	ldr	r3, [pc, #212]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d105      	bne.n	80049ae <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80049a2:	4b32      	ldr	r3, [pc, #200]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e0ac      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049b2:	4b2e      	ldr	r3, [pc, #184]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a2d      	ldr	r2, [pc, #180]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 80049b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049be:	f7fd f849 	bl	8001a54 <HAL_GetTick>
 80049c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c4:	e008      	b.n	80049d8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c6:	f7fd f845 	bl	8001a54 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e099      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049d8:	4b24      	ldr	r3, [pc, #144]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1f0      	bne.n	80049c6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049e4:	4b21      	ldr	r3, [pc, #132]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	4b21      	ldr	r3, [pc, #132]	; (8004a70 <HAL_RCC_OscConfig+0x788>)
 80049ea:	4013      	ands	r3, r2
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049f4:	3a01      	subs	r2, #1
 80049f6:	0112      	lsls	r2, r2, #4
 80049f8:	4311      	orrs	r1, r2
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049fe:	0212      	lsls	r2, r2, #8
 8004a00:	4311      	orrs	r1, r2
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a06:	0852      	lsrs	r2, r2, #1
 8004a08:	3a01      	subs	r2, #1
 8004a0a:	0552      	lsls	r2, r2, #21
 8004a0c:	4311      	orrs	r1, r2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a12:	0852      	lsrs	r2, r2, #1
 8004a14:	3a01      	subs	r2, #1
 8004a16:	0652      	lsls	r2, r2, #25
 8004a18:	4311      	orrs	r1, r2
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a1e:	06d2      	lsls	r2, r2, #27
 8004a20:	430a      	orrs	r2, r1
 8004a22:	4912      	ldr	r1, [pc, #72]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a28:	4b10      	ldr	r3, [pc, #64]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a0f      	ldr	r2, [pc, #60]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 8004a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a34:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	4a0c      	ldr	r2, [pc, #48]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 8004a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a40:	f7fd f808 	bl	8001a54 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a48:	f7fd f804 	bl	8001a54 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e058      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a5a:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0f0      	beq.n	8004a48 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a66:	e050      	b.n	8004b0a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e04f      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a74:	4b27      	ldr	r3, [pc, #156]	; (8004b14 <HAL_RCC_OscConfig+0x82c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d144      	bne.n	8004b0a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a80:	4b24      	ldr	r3, [pc, #144]	; (8004b14 <HAL_RCC_OscConfig+0x82c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a23      	ldr	r2, [pc, #140]	; (8004b14 <HAL_RCC_OscConfig+0x82c>)
 8004a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a8c:	4b21      	ldr	r3, [pc, #132]	; (8004b14 <HAL_RCC_OscConfig+0x82c>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	4a20      	ldr	r2, [pc, #128]	; (8004b14 <HAL_RCC_OscConfig+0x82c>)
 8004a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a98:	f7fc ffdc 	bl	8001a54 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa0:	f7fc ffd8 	bl	8001a54 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e02c      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab2:	4b18      	ldr	r3, [pc, #96]	; (8004b14 <HAL_RCC_OscConfig+0x82c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x7b8>
 8004abe:	e024      	b.n	8004b0a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	2b0c      	cmp	r3, #12
 8004ac4:	d01f      	beq.n	8004b06 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac6:	4b13      	ldr	r3, [pc, #76]	; (8004b14 <HAL_RCC_OscConfig+0x82c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a12      	ldr	r2, [pc, #72]	; (8004b14 <HAL_RCC_OscConfig+0x82c>)
 8004acc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad2:	f7fc ffbf 	bl	8001a54 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ada:	f7fc ffbb 	bl	8001a54 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e00f      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aec:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <HAL_RCC_OscConfig+0x82c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f0      	bne.n	8004ada <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004af8:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <HAL_RCC_OscConfig+0x82c>)
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	4905      	ldr	r1, [pc, #20]	; (8004b14 <HAL_RCC_OscConfig+0x82c>)
 8004afe:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <HAL_RCC_OscConfig+0x830>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	60cb      	str	r3, [r1, #12]
 8004b04:	e001      	b.n	8004b0a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3720      	adds	r7, #32
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40021000 	.word	0x40021000
 8004b18:	feeefffc 	.word	0xfeeefffc

08004b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e11d      	b.n	8004d70 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b34:	4b90      	ldr	r3, [pc, #576]	; (8004d78 <HAL_RCC_ClockConfig+0x25c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d910      	bls.n	8004b64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b42:	4b8d      	ldr	r3, [pc, #564]	; (8004d78 <HAL_RCC_ClockConfig+0x25c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f023 020f 	bic.w	r2, r3, #15
 8004b4a:	498b      	ldr	r1, [pc, #556]	; (8004d78 <HAL_RCC_ClockConfig+0x25c>)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b52:	4b89      	ldr	r3, [pc, #548]	; (8004d78 <HAL_RCC_ClockConfig+0x25c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d001      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e105      	b.n	8004d70 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d010      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	4b81      	ldr	r3, [pc, #516]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d908      	bls.n	8004b92 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b80:	4b7e      	ldr	r3, [pc, #504]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	497b      	ldr	r1, [pc, #492]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d079      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d11e      	bne.n	8004be4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba6:	4b75      	ldr	r3, [pc, #468]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e0dc      	b.n	8004d70 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004bb6:	f000 f9dd 	bl	8004f74 <RCC_GetSysClockFreqFromPLLSource>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	4a70      	ldr	r2, [pc, #448]	; (8004d80 <HAL_RCC_ClockConfig+0x264>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d946      	bls.n	8004c50 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004bc2:	4b6e      	ldr	r3, [pc, #440]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d140      	bne.n	8004c50 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bce:	4b6b      	ldr	r3, [pc, #428]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bd6:	4a69      	ldr	r2, [pc, #420]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bdc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004bde:	2380      	movs	r3, #128	; 0x80
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	e035      	b.n	8004c50 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d107      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bec:	4b63      	ldr	r3, [pc, #396]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d115      	bne.n	8004c24 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0b9      	b.n	8004d70 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d107      	bne.n	8004c14 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c04:	4b5d      	ldr	r3, [pc, #372]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d109      	bne.n	8004c24 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e0ad      	b.n	8004d70 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c14:	4b59      	ldr	r3, [pc, #356]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e0a5      	b.n	8004d70 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004c24:	f000 f8b4 	bl	8004d90 <HAL_RCC_GetSysClockFreq>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	4a55      	ldr	r2, [pc, #340]	; (8004d80 <HAL_RCC_ClockConfig+0x264>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d90f      	bls.n	8004c50 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004c30:	4b52      	ldr	r3, [pc, #328]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d109      	bne.n	8004c50 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c3c:	4b4f      	ldr	r3, [pc, #316]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c44:	4a4d      	ldr	r2, [pc, #308]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c4c:	2380      	movs	r3, #128	; 0x80
 8004c4e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c50:	4b4a      	ldr	r3, [pc, #296]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f023 0203 	bic.w	r2, r3, #3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	4947      	ldr	r1, [pc, #284]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c62:	f7fc fef7 	bl	8001a54 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c68:	e00a      	b.n	8004c80 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c6a:	f7fc fef3 	bl	8001a54 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e077      	b.n	8004d70 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c80:	4b3e      	ldr	r3, [pc, #248]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f003 020c 	and.w	r2, r3, #12
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d1eb      	bne.n	8004c6a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2b80      	cmp	r3, #128	; 0x80
 8004c96:	d105      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c98:	4b38      	ldr	r3, [pc, #224]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	4a37      	ldr	r2, [pc, #220]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ca2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d010      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	4b31      	ldr	r3, [pc, #196]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d208      	bcs.n	8004cd2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc0:	4b2e      	ldr	r3, [pc, #184]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	492b      	ldr	r1, [pc, #172]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cd2:	4b29      	ldr	r3, [pc, #164]	; (8004d78 <HAL_RCC_ClockConfig+0x25c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d210      	bcs.n	8004d02 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce0:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <HAL_RCC_ClockConfig+0x25c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f023 020f 	bic.w	r2, r3, #15
 8004ce8:	4923      	ldr	r1, [pc, #140]	; (8004d78 <HAL_RCC_ClockConfig+0x25c>)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf0:	4b21      	ldr	r3, [pc, #132]	; (8004d78 <HAL_RCC_ClockConfig+0x25c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d001      	beq.n	8004d02 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e036      	b.n	8004d70 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d008      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d0e:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	4918      	ldr	r1, [pc, #96]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d009      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d2c:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4910      	ldr	r1, [pc, #64]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d40:	f000 f826 	bl	8004d90 <HAL_RCC_GetSysClockFreq>
 8004d44:	4602      	mov	r2, r0
 8004d46:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <HAL_RCC_ClockConfig+0x260>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	091b      	lsrs	r3, r3, #4
 8004d4c:	f003 030f 	and.w	r3, r3, #15
 8004d50:	490c      	ldr	r1, [pc, #48]	; (8004d84 <HAL_RCC_ClockConfig+0x268>)
 8004d52:	5ccb      	ldrb	r3, [r1, r3]
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5c:	4a0a      	ldr	r2, [pc, #40]	; (8004d88 <HAL_RCC_ClockConfig+0x26c>)
 8004d5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d60:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <HAL_RCC_ClockConfig+0x270>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fc fe25 	bl	80019b4 <HAL_InitTick>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	73fb      	strb	r3, [r7, #15]

  return status;
 8004d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40022000 	.word	0x40022000
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	04c4b400 	.word	0x04c4b400
 8004d84:	080064e0 	.word	0x080064e0
 8004d88:	20000004 	.word	0x20000004
 8004d8c:	20000008 	.word	0x20000008

08004d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b089      	sub	sp, #36	; 0x24
 8004d94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	61fb      	str	r3, [r7, #28]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d9e:	4b3e      	ldr	r3, [pc, #248]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004da8:	4b3b      	ldr	r3, [pc, #236]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	2b0c      	cmp	r3, #12
 8004dbc:	d121      	bne.n	8004e02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d11e      	bne.n	8004e02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dc4:	4b34      	ldr	r3, [pc, #208]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d107      	bne.n	8004de0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004dd0:	4b31      	ldr	r3, [pc, #196]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dd6:	0a1b      	lsrs	r3, r3, #8
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	61fb      	str	r3, [r7, #28]
 8004dde:	e005      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004de0:	4b2d      	ldr	r3, [pc, #180]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	091b      	lsrs	r3, r3, #4
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004dec:	4a2b      	ldr	r2, [pc, #172]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10d      	bne.n	8004e18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e00:	e00a      	b.n	8004e18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d102      	bne.n	8004e0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e08:	4b25      	ldr	r3, [pc, #148]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e0a:	61bb      	str	r3, [r7, #24]
 8004e0c:	e004      	b.n	8004e18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d101      	bne.n	8004e18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e14:	4b23      	ldr	r3, [pc, #140]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	2b0c      	cmp	r3, #12
 8004e1c:	d134      	bne.n	8004e88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e1e:	4b1e      	ldr	r3, [pc, #120]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d003      	beq.n	8004e36 <HAL_RCC_GetSysClockFreq+0xa6>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d003      	beq.n	8004e3c <HAL_RCC_GetSysClockFreq+0xac>
 8004e34:	e005      	b.n	8004e42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e36:	4b1a      	ldr	r3, [pc, #104]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e38:	617b      	str	r3, [r7, #20]
      break;
 8004e3a:	e005      	b.n	8004e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e3c:	4b19      	ldr	r3, [pc, #100]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e3e:	617b      	str	r3, [r7, #20]
      break;
 8004e40:	e002      	b.n	8004e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	617b      	str	r3, [r7, #20]
      break;
 8004e46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e48:	4b13      	ldr	r3, [pc, #76]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	091b      	lsrs	r3, r3, #4
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	3301      	adds	r3, #1
 8004e54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e56:	4b10      	ldr	r3, [pc, #64]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	0a1b      	lsrs	r3, r3, #8
 8004e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	fb03 f202 	mul.w	r2, r3, r2
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e6e:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	0e5b      	lsrs	r3, r3, #25
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	3301      	adds	r3, #1
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e88:	69bb      	ldr	r3, [r7, #24]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3724      	adds	r7, #36	; 0x24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	080064f0 	.word	0x080064f0
 8004ea0:	00f42400 	.word	0x00f42400
 8004ea4:	007a1200 	.word	0x007a1200

08004ea8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eac:	4b03      	ldr	r3, [pc, #12]	; (8004ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8004eae:	681b      	ldr	r3, [r3, #0]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	20000004 	.word	0x20000004

08004ec0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ec8:	2300      	movs	r3, #0
 8004eca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ecc:	4b27      	ldr	r3, [pc, #156]	; (8004f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ed8:	f7ff f942 	bl	8004160 <HAL_PWREx_GetVoltageRange>
 8004edc:	6178      	str	r0, [r7, #20]
 8004ede:	e014      	b.n	8004f0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ee0:	4b22      	ldr	r3, [pc, #136]	; (8004f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee4:	4a21      	ldr	r2, [pc, #132]	; (8004f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eea:	6593      	str	r3, [r2, #88]	; 0x58
 8004eec:	4b1f      	ldr	r3, [pc, #124]	; (8004f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ef8:	f7ff f932 	bl	8004160 <HAL_PWREx_GetVoltageRange>
 8004efc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004efe:	4b1b      	ldr	r3, [pc, #108]	; (8004f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f02:	4a1a      	ldr	r2, [pc, #104]	; (8004f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f10:	d10b      	bne.n	8004f2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b80      	cmp	r3, #128	; 0x80
 8004f16:	d913      	bls.n	8004f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2ba0      	cmp	r3, #160	; 0xa0
 8004f1c:	d902      	bls.n	8004f24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f1e:	2302      	movs	r3, #2
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	e00d      	b.n	8004f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f24:	2301      	movs	r3, #1
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	e00a      	b.n	8004f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f2e:	d902      	bls.n	8004f36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004f30:	2302      	movs	r3, #2
 8004f32:	613b      	str	r3, [r7, #16]
 8004f34:	e004      	b.n	8004f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b70      	cmp	r3, #112	; 0x70
 8004f3a:	d101      	bne.n	8004f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f40:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f023 020f 	bic.w	r2, r3, #15
 8004f48:	4909      	ldr	r1, [pc, #36]	; (8004f70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f50:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 030f 	and.w	r3, r3, #15
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d001      	beq.n	8004f62 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	40022000 	.word	0x40022000

08004f74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f7a:	4b2d      	ldr	r3, [pc, #180]	; (8005030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d00b      	beq.n	8004fa2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d825      	bhi.n	8004fdc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d008      	beq.n	8004fa8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d11f      	bne.n	8004fdc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004f9c:	4b25      	ldr	r3, [pc, #148]	; (8005034 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004f9e:	613b      	str	r3, [r7, #16]
    break;
 8004fa0:	e01f      	b.n	8004fe2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004fa2:	4b25      	ldr	r3, [pc, #148]	; (8005038 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004fa4:	613b      	str	r3, [r7, #16]
    break;
 8004fa6:	e01c      	b.n	8004fe2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fa8:	4b21      	ldr	r3, [pc, #132]	; (8005030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0308 	and.w	r3, r3, #8
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d107      	bne.n	8004fc4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fb4:	4b1e      	ldr	r3, [pc, #120]	; (8005030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fba:	0a1b      	lsrs	r3, r3, #8
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	e005      	b.n	8004fd0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fc4:	4b1a      	ldr	r3, [pc, #104]	; (8005030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	091b      	lsrs	r3, r3, #4
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004fd0:	4a1a      	ldr	r2, [pc, #104]	; (800503c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd8:	613b      	str	r3, [r7, #16]
    break;
 8004fda:	e002      	b.n	8004fe2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]
    break;
 8004fe0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fe2:	4b13      	ldr	r3, [pc, #76]	; (8005030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	091b      	lsrs	r3, r3, #4
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	3301      	adds	r3, #1
 8004fee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ff0:	4b0f      	ldr	r3, [pc, #60]	; (8005030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	0a1b      	lsrs	r3, r3, #8
 8004ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	fb03 f202 	mul.w	r2, r3, r2
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	fbb2 f3f3 	udiv	r3, r2, r3
 8005006:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005008:	4b09      	ldr	r3, [pc, #36]	; (8005030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	0e5b      	lsrs	r3, r3, #25
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	3301      	adds	r3, #1
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005020:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005022:	683b      	ldr	r3, [r7, #0]
}
 8005024:	4618      	mov	r0, r3
 8005026:	371c      	adds	r7, #28
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	40021000 	.word	0x40021000
 8005034:	00f42400 	.word	0x00f42400
 8005038:	007a1200 	.word	0x007a1200
 800503c:	080064f0 	.word	0x080064f0

08005040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005048:	2300      	movs	r3, #0
 800504a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800504c:	2300      	movs	r3, #0
 800504e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005058:	2b00      	cmp	r3, #0
 800505a:	d040      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005060:	2b80      	cmp	r3, #128	; 0x80
 8005062:	d02a      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005064:	2b80      	cmp	r3, #128	; 0x80
 8005066:	d825      	bhi.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005068:	2b60      	cmp	r3, #96	; 0x60
 800506a:	d026      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800506c:	2b60      	cmp	r3, #96	; 0x60
 800506e:	d821      	bhi.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005070:	2b40      	cmp	r3, #64	; 0x40
 8005072:	d006      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005074:	2b40      	cmp	r3, #64	; 0x40
 8005076:	d81d      	bhi.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005078:	2b00      	cmp	r3, #0
 800507a:	d009      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800507c:	2b20      	cmp	r3, #32
 800507e:	d010      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005080:	e018      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005082:	4b89      	ldr	r3, [pc, #548]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	4a88      	ldr	r2, [pc, #544]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800508c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800508e:	e015      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3304      	adds	r3, #4
 8005094:	2100      	movs	r1, #0
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fb02 	bl	80056a0 <RCCEx_PLLSAI1_Config>
 800509c:	4603      	mov	r3, r0
 800509e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050a0:	e00c      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	3320      	adds	r3, #32
 80050a6:	2100      	movs	r1, #0
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 fbed 	bl	8005888 <RCCEx_PLLSAI2_Config>
 80050ae:	4603      	mov	r3, r0
 80050b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050b2:	e003      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	74fb      	strb	r3, [r7, #19]
      break;
 80050b8:	e000      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80050ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050bc:	7cfb      	ldrb	r3, [r7, #19]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10b      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050c2:	4b79      	ldr	r3, [pc, #484]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050c8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050d0:	4975      	ldr	r1, [pc, #468]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80050d8:	e001      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050da:	7cfb      	ldrb	r3, [r7, #19]
 80050dc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d047      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f2:	d030      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80050f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f8:	d82a      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80050fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050fe:	d02a      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005100:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005104:	d824      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800510a:	d008      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800510c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005110:	d81e      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800511a:	d010      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800511c:	e018      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800511e:	4b62      	ldr	r3, [pc, #392]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	4a61      	ldr	r2, [pc, #388]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005128:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800512a:	e015      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3304      	adds	r3, #4
 8005130:	2100      	movs	r1, #0
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fab4 	bl	80056a0 <RCCEx_PLLSAI1_Config>
 8005138:	4603      	mov	r3, r0
 800513a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800513c:	e00c      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3320      	adds	r3, #32
 8005142:	2100      	movs	r1, #0
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fb9f 	bl	8005888 <RCCEx_PLLSAI2_Config>
 800514a:	4603      	mov	r3, r0
 800514c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800514e:	e003      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	74fb      	strb	r3, [r7, #19]
      break;
 8005154:	e000      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005158:	7cfb      	ldrb	r3, [r7, #19]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10b      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800515e:	4b52      	ldr	r3, [pc, #328]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005160:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516c:	494e      	ldr	r1, [pc, #312]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005174:	e001      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005176:	7cfb      	ldrb	r3, [r7, #19]
 8005178:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 809f 	beq.w	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005188:	2300      	movs	r3, #0
 800518a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800518c:	4b46      	ldr	r3, [pc, #280]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800518e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005198:	2301      	movs	r3, #1
 800519a:	e000      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800519c:	2300      	movs	r3, #0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00d      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051a2:	4b41      	ldr	r3, [pc, #260]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a6:	4a40      	ldr	r2, [pc, #256]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ac:	6593      	str	r3, [r2, #88]	; 0x58
 80051ae:	4b3e      	ldr	r3, [pc, #248]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b6:	60bb      	str	r3, [r7, #8]
 80051b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ba:	2301      	movs	r3, #1
 80051bc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051be:	4b3b      	ldr	r3, [pc, #236]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a3a      	ldr	r2, [pc, #232]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80051c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051ca:	f7fc fc43 	bl	8001a54 <HAL_GetTick>
 80051ce:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051d0:	e009      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d2:	f7fc fc3f 	bl	8001a54 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d902      	bls.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	74fb      	strb	r3, [r7, #19]
        break;
 80051e4:	e005      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051e6:	4b31      	ldr	r3, [pc, #196]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0ef      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80051f2:	7cfb      	ldrb	r3, [r7, #19]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d15b      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051f8:	4b2b      	ldr	r3, [pc, #172]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005202:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01f      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	429a      	cmp	r2, r3
 8005214:	d019      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005216:	4b24      	ldr	r3, [pc, #144]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005220:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005222:	4b21      	ldr	r3, [pc, #132]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005228:	4a1f      	ldr	r2, [pc, #124]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800522a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005232:	4b1d      	ldr	r3, [pc, #116]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005238:	4a1b      	ldr	r2, [pc, #108]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800523a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005242:	4a19      	ldr	r2, [pc, #100]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d016      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005254:	f7fc fbfe 	bl	8001a54 <HAL_GetTick>
 8005258:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800525a:	e00b      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800525c:	f7fc fbfa 	bl	8001a54 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	f241 3288 	movw	r2, #5000	; 0x1388
 800526a:	4293      	cmp	r3, r2
 800526c:	d902      	bls.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	74fb      	strb	r3, [r7, #19]
            break;
 8005272:	e006      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005274:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0ec      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005282:	7cfb      	ldrb	r3, [r7, #19]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10c      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005288:	4b07      	ldr	r3, [pc, #28]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800528a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005298:	4903      	ldr	r1, [pc, #12]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052a0:	e008      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052a2:	7cfb      	ldrb	r3, [r7, #19]
 80052a4:	74bb      	strb	r3, [r7, #18]
 80052a6:	e005      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80052a8:	40021000 	.word	0x40021000
 80052ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b0:	7cfb      	ldrb	r3, [r7, #19]
 80052b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052b4:	7c7b      	ldrb	r3, [r7, #17]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d105      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052ba:	4ba0      	ldr	r3, [pc, #640]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052be:	4a9f      	ldr	r2, [pc, #636]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052d2:	4b9a      	ldr	r3, [pc, #616]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d8:	f023 0203 	bic.w	r2, r3, #3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e0:	4996      	ldr	r1, [pc, #600]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052f4:	4b91      	ldr	r3, [pc, #580]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fa:	f023 020c 	bic.w	r2, r3, #12
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	498e      	ldr	r1, [pc, #568]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005304:	4313      	orrs	r3, r2
 8005306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005316:	4b89      	ldr	r3, [pc, #548]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005324:	4985      	ldr	r1, [pc, #532]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005338:	4b80      	ldr	r3, [pc, #512]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800533a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005346:	497d      	ldr	r1, [pc, #500]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0310 	and.w	r3, r3, #16
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800535a:	4b78      	ldr	r3, [pc, #480]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800535c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005360:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005368:	4974      	ldr	r1, [pc, #464]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800537c:	4b6f      	ldr	r3, [pc, #444]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800537e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005382:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800538a:	496c      	ldr	r1, [pc, #432]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800539e:	4b67      	ldr	r3, [pc, #412]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ac:	4963      	ldr	r1, [pc, #396]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00a      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053c0:	4b5e      	ldr	r3, [pc, #376]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053ce:	495b      	ldr	r1, [pc, #364]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053e2:	4b56      	ldr	r3, [pc, #344]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f0:	4952      	ldr	r1, [pc, #328]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00a      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005404:	4b4d      	ldr	r3, [pc, #308]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005412:	494a      	ldr	r1, [pc, #296]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005414:	4313      	orrs	r3, r2
 8005416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005426:	4b45      	ldr	r3, [pc, #276]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005434:	4941      	ldr	r1, [pc, #260]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005436:	4313      	orrs	r3, r2
 8005438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00a      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005448:	4b3c      	ldr	r3, [pc, #240]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800544a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800544e:	f023 0203 	bic.w	r2, r3, #3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005456:	4939      	ldr	r1, [pc, #228]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005458:	4313      	orrs	r3, r2
 800545a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d028      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800546a:	4b34      	ldr	r3, [pc, #208]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800546c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005470:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005478:	4930      	ldr	r1, [pc, #192]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005488:	d106      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800548a:	4b2c      	ldr	r3, [pc, #176]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	4a2b      	ldr	r2, [pc, #172]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005494:	60d3      	str	r3, [r2, #12]
 8005496:	e011      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800549c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054a0:	d10c      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3304      	adds	r3, #4
 80054a6:	2101      	movs	r1, #1
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 f8f9 	bl	80056a0 <RCCEx_PLLSAI1_Config>
 80054ae:	4603      	mov	r3, r0
 80054b0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80054b2:	7cfb      	ldrb	r3, [r7, #19]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80054b8:	7cfb      	ldrb	r3, [r7, #19]
 80054ba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d04d      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054d0:	d108      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80054d2:	4b1a      	ldr	r3, [pc, #104]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054d8:	4a18      	ldr	r2, [pc, #96]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054de:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80054e2:	e012      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80054e4:	4b15      	ldr	r3, [pc, #84]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054ea:	4a14      	ldr	r2, [pc, #80]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054f0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80054f4:	4b11      	ldr	r3, [pc, #68]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005502:	490e      	ldr	r1, [pc, #56]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800550e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005512:	d106      	bne.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005514:	4b09      	ldr	r3, [pc, #36]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	4a08      	ldr	r2, [pc, #32]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800551a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800551e:	60d3      	str	r3, [r2, #12]
 8005520:	e020      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005526:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800552a:	d109      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800552c:	4b03      	ldr	r3, [pc, #12]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	4a02      	ldr	r2, [pc, #8]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005536:	60d3      	str	r3, [r2, #12]
 8005538:	e014      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800553a:	bf00      	nop
 800553c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005548:	d10c      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3304      	adds	r3, #4
 800554e:	2101      	movs	r1, #1
 8005550:	4618      	mov	r0, r3
 8005552:	f000 f8a5 	bl	80056a0 <RCCEx_PLLSAI1_Config>
 8005556:	4603      	mov	r3, r0
 8005558:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800555a:	7cfb      	ldrb	r3, [r7, #19]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005560:	7cfb      	ldrb	r3, [r7, #19]
 8005562:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d028      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005570:	4b4a      	ldr	r3, [pc, #296]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005576:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800557e:	4947      	ldr	r1, [pc, #284]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800558a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800558e:	d106      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005590:	4b42      	ldr	r3, [pc, #264]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	4a41      	ldr	r2, [pc, #260]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800559a:	60d3      	str	r3, [r2, #12]
 800559c:	e011      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055a6:	d10c      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3304      	adds	r3, #4
 80055ac:	2101      	movs	r1, #1
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 f876 	bl	80056a0 <RCCEx_PLLSAI1_Config>
 80055b4:	4603      	mov	r3, r0
 80055b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055b8:	7cfb      	ldrb	r3, [r7, #19]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80055be:	7cfb      	ldrb	r3, [r7, #19]
 80055c0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01e      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055ce:	4b33      	ldr	r3, [pc, #204]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055de:	492f      	ldr	r1, [pc, #188]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055f0:	d10c      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	3304      	adds	r3, #4
 80055f6:	2102      	movs	r1, #2
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 f851 	bl	80056a0 <RCCEx_PLLSAI1_Config>
 80055fe:	4603      	mov	r3, r0
 8005600:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005602:	7cfb      	ldrb	r3, [r7, #19]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005608:	7cfb      	ldrb	r3, [r7, #19]
 800560a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00b      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005618:	4b20      	ldr	r3, [pc, #128]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800561a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800561e:	f023 0204 	bic.w	r2, r3, #4
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005628:	491c      	ldr	r1, [pc, #112]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800562a:	4313      	orrs	r3, r2
 800562c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00b      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800563c:	4b17      	ldr	r3, [pc, #92]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800563e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005642:	f023 0218 	bic.w	r2, r3, #24
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564c:	4913      	ldr	r1, [pc, #76]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800564e:	4313      	orrs	r3, r2
 8005650:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d017      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005660:	4b0e      	ldr	r3, [pc, #56]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005662:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005666:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005670:	490a      	ldr	r1, [pc, #40]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005672:	4313      	orrs	r3, r2
 8005674:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800567e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005682:	d105      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005684:	4b05      	ldr	r3, [pc, #20]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	4a04      	ldr	r2, [pc, #16]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800568a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800568e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005690:	7cbb      	ldrb	r3, [r7, #18]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40021000 	.word	0x40021000

080056a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056ae:	4b72      	ldr	r3, [pc, #456]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00e      	beq.n	80056d8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056ba:	4b6f      	ldr	r3, [pc, #444]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f003 0203 	and.w	r2, r3, #3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d103      	bne.n	80056d2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
       ||
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d142      	bne.n	8005758 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	73fb      	strb	r3, [r7, #15]
 80056d6:	e03f      	b.n	8005758 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b03      	cmp	r3, #3
 80056de:	d018      	beq.n	8005712 <RCCEx_PLLSAI1_Config+0x72>
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d825      	bhi.n	8005730 <RCCEx_PLLSAI1_Config+0x90>
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d002      	beq.n	80056ee <RCCEx_PLLSAI1_Config+0x4e>
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d009      	beq.n	8005700 <RCCEx_PLLSAI1_Config+0x60>
 80056ec:	e020      	b.n	8005730 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056ee:	4b62      	ldr	r3, [pc, #392]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d11d      	bne.n	8005736 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056fe:	e01a      	b.n	8005736 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005700:	4b5d      	ldr	r3, [pc, #372]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005708:	2b00      	cmp	r3, #0
 800570a:	d116      	bne.n	800573a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005710:	e013      	b.n	800573a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005712:	4b59      	ldr	r3, [pc, #356]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10f      	bne.n	800573e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800571e:	4b56      	ldr	r3, [pc, #344]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d109      	bne.n	800573e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800572e:	e006      	b.n	800573e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	73fb      	strb	r3, [r7, #15]
      break;
 8005734:	e004      	b.n	8005740 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005736:	bf00      	nop
 8005738:	e002      	b.n	8005740 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800573a:	bf00      	nop
 800573c:	e000      	b.n	8005740 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800573e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d108      	bne.n	8005758 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005746:	4b4c      	ldr	r3, [pc, #304]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f023 0203 	bic.w	r2, r3, #3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4949      	ldr	r1, [pc, #292]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005754:	4313      	orrs	r3, r2
 8005756:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	2b00      	cmp	r3, #0
 800575c:	f040 8086 	bne.w	800586c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005760:	4b45      	ldr	r3, [pc, #276]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a44      	ldr	r2, [pc, #272]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005766:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800576a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800576c:	f7fc f972 	bl	8001a54 <HAL_GetTick>
 8005770:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005772:	e009      	b.n	8005788 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005774:	f7fc f96e 	bl	8001a54 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d902      	bls.n	8005788 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	73fb      	strb	r3, [r7, #15]
        break;
 8005786:	e005      	b.n	8005794 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005788:	4b3b      	ldr	r3, [pc, #236]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1ef      	bne.n	8005774 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d168      	bne.n	800586c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d113      	bne.n	80057c8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057a0:	4b35      	ldr	r3, [pc, #212]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	4b35      	ldr	r3, [pc, #212]	; (800587c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057a6:	4013      	ands	r3, r2
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6892      	ldr	r2, [r2, #8]
 80057ac:	0211      	lsls	r1, r2, #8
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	68d2      	ldr	r2, [r2, #12]
 80057b2:	06d2      	lsls	r2, r2, #27
 80057b4:	4311      	orrs	r1, r2
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6852      	ldr	r2, [r2, #4]
 80057ba:	3a01      	subs	r2, #1
 80057bc:	0112      	lsls	r2, r2, #4
 80057be:	430a      	orrs	r2, r1
 80057c0:	492d      	ldr	r1, [pc, #180]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	610b      	str	r3, [r1, #16]
 80057c6:	e02d      	b.n	8005824 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d115      	bne.n	80057fa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057ce:	4b2a      	ldr	r3, [pc, #168]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057d0:	691a      	ldr	r2, [r3, #16]
 80057d2:	4b2b      	ldr	r3, [pc, #172]	; (8005880 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6892      	ldr	r2, [r2, #8]
 80057da:	0211      	lsls	r1, r2, #8
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6912      	ldr	r2, [r2, #16]
 80057e0:	0852      	lsrs	r2, r2, #1
 80057e2:	3a01      	subs	r2, #1
 80057e4:	0552      	lsls	r2, r2, #21
 80057e6:	4311      	orrs	r1, r2
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6852      	ldr	r2, [r2, #4]
 80057ec:	3a01      	subs	r2, #1
 80057ee:	0112      	lsls	r2, r2, #4
 80057f0:	430a      	orrs	r2, r1
 80057f2:	4921      	ldr	r1, [pc, #132]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	610b      	str	r3, [r1, #16]
 80057f8:	e014      	b.n	8005824 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057fa:	4b1f      	ldr	r3, [pc, #124]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	4b21      	ldr	r3, [pc, #132]	; (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005800:	4013      	ands	r3, r2
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6892      	ldr	r2, [r2, #8]
 8005806:	0211      	lsls	r1, r2, #8
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6952      	ldr	r2, [r2, #20]
 800580c:	0852      	lsrs	r2, r2, #1
 800580e:	3a01      	subs	r2, #1
 8005810:	0652      	lsls	r2, r2, #25
 8005812:	4311      	orrs	r1, r2
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6852      	ldr	r2, [r2, #4]
 8005818:	3a01      	subs	r2, #1
 800581a:	0112      	lsls	r2, r2, #4
 800581c:	430a      	orrs	r2, r1
 800581e:	4916      	ldr	r1, [pc, #88]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005820:	4313      	orrs	r3, r2
 8005822:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005824:	4b14      	ldr	r3, [pc, #80]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a13      	ldr	r2, [pc, #76]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 800582a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800582e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005830:	f7fc f910 	bl	8001a54 <HAL_GetTick>
 8005834:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005836:	e009      	b.n	800584c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005838:	f7fc f90c 	bl	8001a54 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d902      	bls.n	800584c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	73fb      	strb	r3, [r7, #15]
          break;
 800584a:	e005      	b.n	8005858 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800584c:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0ef      	beq.n	8005838 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d106      	bne.n	800586c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800585e:	4b06      	ldr	r3, [pc, #24]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005860:	691a      	ldr	r2, [r3, #16]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	4904      	ldr	r1, [pc, #16]	; (8005878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005868:	4313      	orrs	r3, r2
 800586a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800586c:	7bfb      	ldrb	r3, [r7, #15]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	40021000 	.word	0x40021000
 800587c:	07ff800f 	.word	0x07ff800f
 8005880:	ff9f800f 	.word	0xff9f800f
 8005884:	f9ff800f 	.word	0xf9ff800f

08005888 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005896:	4b72      	ldr	r3, [pc, #456]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00e      	beq.n	80058c0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80058a2:	4b6f      	ldr	r3, [pc, #444]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f003 0203 	and.w	r2, r3, #3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d103      	bne.n	80058ba <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
       ||
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d142      	bne.n	8005940 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	73fb      	strb	r3, [r7, #15]
 80058be:	e03f      	b.n	8005940 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d018      	beq.n	80058fa <RCCEx_PLLSAI2_Config+0x72>
 80058c8:	2b03      	cmp	r3, #3
 80058ca:	d825      	bhi.n	8005918 <RCCEx_PLLSAI2_Config+0x90>
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d002      	beq.n	80058d6 <RCCEx_PLLSAI2_Config+0x4e>
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d009      	beq.n	80058e8 <RCCEx_PLLSAI2_Config+0x60>
 80058d4:	e020      	b.n	8005918 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058d6:	4b62      	ldr	r3, [pc, #392]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d11d      	bne.n	800591e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058e6:	e01a      	b.n	800591e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058e8:	4b5d      	ldr	r3, [pc, #372]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d116      	bne.n	8005922 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058f8:	e013      	b.n	8005922 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058fa:	4b59      	ldr	r3, [pc, #356]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10f      	bne.n	8005926 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005906:	4b56      	ldr	r3, [pc, #344]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d109      	bne.n	8005926 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005916:	e006      	b.n	8005926 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	73fb      	strb	r3, [r7, #15]
      break;
 800591c:	e004      	b.n	8005928 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800591e:	bf00      	nop
 8005920:	e002      	b.n	8005928 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005922:	bf00      	nop
 8005924:	e000      	b.n	8005928 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005926:	bf00      	nop
    }

    if(status == HAL_OK)
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d108      	bne.n	8005940 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800592e:	4b4c      	ldr	r3, [pc, #304]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f023 0203 	bic.w	r2, r3, #3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4949      	ldr	r1, [pc, #292]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 800593c:	4313      	orrs	r3, r2
 800593e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	2b00      	cmp	r3, #0
 8005944:	f040 8086 	bne.w	8005a54 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005948:	4b45      	ldr	r3, [pc, #276]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a44      	ldr	r2, [pc, #272]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 800594e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005952:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005954:	f7fc f87e 	bl	8001a54 <HAL_GetTick>
 8005958:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800595a:	e009      	b.n	8005970 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800595c:	f7fc f87a 	bl	8001a54 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d902      	bls.n	8005970 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	73fb      	strb	r3, [r7, #15]
        break;
 800596e:	e005      	b.n	800597c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005970:	4b3b      	ldr	r3, [pc, #236]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1ef      	bne.n	800595c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800597c:	7bfb      	ldrb	r3, [r7, #15]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d168      	bne.n	8005a54 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d113      	bne.n	80059b0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005988:	4b35      	ldr	r3, [pc, #212]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 800598a:	695a      	ldr	r2, [r3, #20]
 800598c:	4b35      	ldr	r3, [pc, #212]	; (8005a64 <RCCEx_PLLSAI2_Config+0x1dc>)
 800598e:	4013      	ands	r3, r2
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6892      	ldr	r2, [r2, #8]
 8005994:	0211      	lsls	r1, r2, #8
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	68d2      	ldr	r2, [r2, #12]
 800599a:	06d2      	lsls	r2, r2, #27
 800599c:	4311      	orrs	r1, r2
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6852      	ldr	r2, [r2, #4]
 80059a2:	3a01      	subs	r2, #1
 80059a4:	0112      	lsls	r2, r2, #4
 80059a6:	430a      	orrs	r2, r1
 80059a8:	492d      	ldr	r1, [pc, #180]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	614b      	str	r3, [r1, #20]
 80059ae:	e02d      	b.n	8005a0c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d115      	bne.n	80059e2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059b6:	4b2a      	ldr	r3, [pc, #168]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	4b2b      	ldr	r3, [pc, #172]	; (8005a68 <RCCEx_PLLSAI2_Config+0x1e0>)
 80059bc:	4013      	ands	r3, r2
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6892      	ldr	r2, [r2, #8]
 80059c2:	0211      	lsls	r1, r2, #8
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6912      	ldr	r2, [r2, #16]
 80059c8:	0852      	lsrs	r2, r2, #1
 80059ca:	3a01      	subs	r2, #1
 80059cc:	0552      	lsls	r2, r2, #21
 80059ce:	4311      	orrs	r1, r2
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6852      	ldr	r2, [r2, #4]
 80059d4:	3a01      	subs	r2, #1
 80059d6:	0112      	lsls	r2, r2, #4
 80059d8:	430a      	orrs	r2, r1
 80059da:	4921      	ldr	r1, [pc, #132]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	614b      	str	r3, [r1, #20]
 80059e0:	e014      	b.n	8005a0c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059e2:	4b1f      	ldr	r3, [pc, #124]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059e4:	695a      	ldr	r2, [r3, #20]
 80059e6:	4b21      	ldr	r3, [pc, #132]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1e4>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6892      	ldr	r2, [r2, #8]
 80059ee:	0211      	lsls	r1, r2, #8
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6952      	ldr	r2, [r2, #20]
 80059f4:	0852      	lsrs	r2, r2, #1
 80059f6:	3a01      	subs	r2, #1
 80059f8:	0652      	lsls	r2, r2, #25
 80059fa:	4311      	orrs	r1, r2
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6852      	ldr	r2, [r2, #4]
 8005a00:	3a01      	subs	r2, #1
 8005a02:	0112      	lsls	r2, r2, #4
 8005a04:	430a      	orrs	r2, r1
 8005a06:	4916      	ldr	r1, [pc, #88]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a0c:	4b14      	ldr	r3, [pc, #80]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a13      	ldr	r2, [pc, #76]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a18:	f7fc f81c 	bl	8001a54 <HAL_GetTick>
 8005a1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a1e:	e009      	b.n	8005a34 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a20:	f7fc f818 	bl	8001a54 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d902      	bls.n	8005a34 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	73fb      	strb	r3, [r7, #15]
          break;
 8005a32:	e005      	b.n	8005a40 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a34:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0ef      	beq.n	8005a20 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d106      	bne.n	8005a54 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a46:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a48:	695a      	ldr	r2, [r3, #20]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	4904      	ldr	r1, [pc, #16]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	40021000 	.word	0x40021000
 8005a64:	07ff800f 	.word	0x07ff800f
 8005a68:	ff9f800f 	.word	0xff9f800f
 8005a6c:	f9ff800f 	.word	0xf9ff800f

08005a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e049      	b.n	8005b16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7fb fec4 	bl	8001824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	4619      	mov	r1, r3
 8005aae:	4610      	mov	r0, r2
 8005ab0:	f000 fa9a 	bl	8005fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d001      	beq.n	8005b38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e04f      	b.n	8005bd8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0201 	orr.w	r2, r2, #1
 8005b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a23      	ldr	r2, [pc, #140]	; (8005be4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d01d      	beq.n	8005b96 <HAL_TIM_Base_Start_IT+0x76>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b62:	d018      	beq.n	8005b96 <HAL_TIM_Base_Start_IT+0x76>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a1f      	ldr	r2, [pc, #124]	; (8005be8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d013      	beq.n	8005b96 <HAL_TIM_Base_Start_IT+0x76>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a1e      	ldr	r2, [pc, #120]	; (8005bec <HAL_TIM_Base_Start_IT+0xcc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00e      	beq.n	8005b96 <HAL_TIM_Base_Start_IT+0x76>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a1c      	ldr	r2, [pc, #112]	; (8005bf0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d009      	beq.n	8005b96 <HAL_TIM_Base_Start_IT+0x76>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a1b      	ldr	r2, [pc, #108]	; (8005bf4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d004      	beq.n	8005b96 <HAL_TIM_Base_Start_IT+0x76>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a19      	ldr	r2, [pc, #100]	; (8005bf8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d115      	bne.n	8005bc2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	4b17      	ldr	r3, [pc, #92]	; (8005bfc <HAL_TIM_Base_Start_IT+0xdc>)
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b06      	cmp	r3, #6
 8005ba6:	d015      	beq.n	8005bd4 <HAL_TIM_Base_Start_IT+0xb4>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bae:	d011      	beq.n	8005bd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0201 	orr.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc0:	e008      	b.n	8005bd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0201 	orr.w	r2, r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	e000      	b.n	8005bd6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	40012c00 	.word	0x40012c00
 8005be8:	40000400 	.word	0x40000400
 8005bec:	40000800 	.word	0x40000800
 8005bf0:	40000c00 	.word	0x40000c00
 8005bf4:	40013400 	.word	0x40013400
 8005bf8:	40014000 	.word	0x40014000
 8005bfc:	00010007 	.word	0x00010007

08005c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d020      	beq.n	8005c64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d01b      	beq.n	8005c64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f06f 0202 	mvn.w	r2, #2
 8005c34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f9ad 	bl	8005faa <HAL_TIM_IC_CaptureCallback>
 8005c50:	e005      	b.n	8005c5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f99f 	bl	8005f96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f9b0 	bl	8005fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d020      	beq.n	8005cb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d01b      	beq.n	8005cb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f06f 0204 	mvn.w	r2, #4
 8005c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f987 	bl	8005faa <HAL_TIM_IC_CaptureCallback>
 8005c9c:	e005      	b.n	8005caa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f979 	bl	8005f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f98a 	bl	8005fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f003 0308 	and.w	r3, r3, #8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d020      	beq.n	8005cfc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f003 0308 	and.w	r3, r3, #8
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d01b      	beq.n	8005cfc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f06f 0208 	mvn.w	r2, #8
 8005ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2204      	movs	r2, #4
 8005cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	f003 0303 	and.w	r3, r3, #3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f961 	bl	8005faa <HAL_TIM_IC_CaptureCallback>
 8005ce8:	e005      	b.n	8005cf6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f953 	bl	8005f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f964 	bl	8005fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f003 0310 	and.w	r3, r3, #16
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d020      	beq.n	8005d48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f003 0310 	and.w	r3, r3, #16
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01b      	beq.n	8005d48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f06f 0210 	mvn.w	r2, #16
 8005d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2208      	movs	r2, #8
 8005d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f93b 	bl	8005faa <HAL_TIM_IC_CaptureCallback>
 8005d34:	e005      	b.n	8005d42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f92d 	bl	8005f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f93e 	bl	8005fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00c      	beq.n	8005d6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d007      	beq.n	8005d6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f06f 0201 	mvn.w	r2, #1
 8005d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fa fdd2 	bl	8000910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00c      	beq.n	8005d90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d007      	beq.n	8005d90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 faf2 	bl	8006374 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00c      	beq.n	8005db4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 faea 	bl	8006388 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00c      	beq.n	8005dd8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d007      	beq.n	8005dd8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f8fd 	bl	8005fd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f003 0320 	and.w	r3, r3, #32
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00c      	beq.n	8005dfc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f003 0320 	and.w	r3, r3, #32
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d007      	beq.n	8005dfc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f06f 0220 	mvn.w	r2, #32
 8005df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fab2 	bl	8006360 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dfc:	bf00      	nop
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <HAL_TIM_ConfigClockSource+0x1c>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e0b6      	b.n	8005f8e <HAL_TIM_ConfigClockSource+0x18a>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e5c:	d03e      	beq.n	8005edc <HAL_TIM_ConfigClockSource+0xd8>
 8005e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e62:	f200 8087 	bhi.w	8005f74 <HAL_TIM_ConfigClockSource+0x170>
 8005e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e6a:	f000 8086 	beq.w	8005f7a <HAL_TIM_ConfigClockSource+0x176>
 8005e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e72:	d87f      	bhi.n	8005f74 <HAL_TIM_ConfigClockSource+0x170>
 8005e74:	2b70      	cmp	r3, #112	; 0x70
 8005e76:	d01a      	beq.n	8005eae <HAL_TIM_ConfigClockSource+0xaa>
 8005e78:	2b70      	cmp	r3, #112	; 0x70
 8005e7a:	d87b      	bhi.n	8005f74 <HAL_TIM_ConfigClockSource+0x170>
 8005e7c:	2b60      	cmp	r3, #96	; 0x60
 8005e7e:	d050      	beq.n	8005f22 <HAL_TIM_ConfigClockSource+0x11e>
 8005e80:	2b60      	cmp	r3, #96	; 0x60
 8005e82:	d877      	bhi.n	8005f74 <HAL_TIM_ConfigClockSource+0x170>
 8005e84:	2b50      	cmp	r3, #80	; 0x50
 8005e86:	d03c      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0xfe>
 8005e88:	2b50      	cmp	r3, #80	; 0x50
 8005e8a:	d873      	bhi.n	8005f74 <HAL_TIM_ConfigClockSource+0x170>
 8005e8c:	2b40      	cmp	r3, #64	; 0x40
 8005e8e:	d058      	beq.n	8005f42 <HAL_TIM_ConfigClockSource+0x13e>
 8005e90:	2b40      	cmp	r3, #64	; 0x40
 8005e92:	d86f      	bhi.n	8005f74 <HAL_TIM_ConfigClockSource+0x170>
 8005e94:	2b30      	cmp	r3, #48	; 0x30
 8005e96:	d064      	beq.n	8005f62 <HAL_TIM_ConfigClockSource+0x15e>
 8005e98:	2b30      	cmp	r3, #48	; 0x30
 8005e9a:	d86b      	bhi.n	8005f74 <HAL_TIM_ConfigClockSource+0x170>
 8005e9c:	2b20      	cmp	r3, #32
 8005e9e:	d060      	beq.n	8005f62 <HAL_TIM_ConfigClockSource+0x15e>
 8005ea0:	2b20      	cmp	r3, #32
 8005ea2:	d867      	bhi.n	8005f74 <HAL_TIM_ConfigClockSource+0x170>
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d05c      	beq.n	8005f62 <HAL_TIM_ConfigClockSource+0x15e>
 8005ea8:	2b10      	cmp	r3, #16
 8005eaa:	d05a      	beq.n	8005f62 <HAL_TIM_ConfigClockSource+0x15e>
 8005eac:	e062      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ebe:	f000 f9a7 	bl	8006210 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ed0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	609a      	str	r2, [r3, #8]
      break;
 8005eda:	e04f      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005eec:	f000 f990 	bl	8006210 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689a      	ldr	r2, [r3, #8]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005efe:	609a      	str	r2, [r3, #8]
      break;
 8005f00:	e03c      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f0e:	461a      	mov	r2, r3
 8005f10:	f000 f904 	bl	800611c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2150      	movs	r1, #80	; 0x50
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 f95d 	bl	80061da <TIM_ITRx_SetConfig>
      break;
 8005f20:	e02c      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f000 f923 	bl	800617a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2160      	movs	r1, #96	; 0x60
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 f94d 	bl	80061da <TIM_ITRx_SetConfig>
      break;
 8005f40:	e01c      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f000 f8e4 	bl	800611c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2140      	movs	r1, #64	; 0x40
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 f93d 	bl	80061da <TIM_ITRx_SetConfig>
      break;
 8005f60:	e00c      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	f000 f934 	bl	80061da <TIM_ITRx_SetConfig>
      break;
 8005f72:	e003      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	73fb      	strb	r3, [r7, #15]
      break;
 8005f78:	e000      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005f7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
	...

08005fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a40      	ldr	r2, [pc, #256]	; (80060fc <TIM_Base_SetConfig+0x114>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d013      	beq.n	8006028 <TIM_Base_SetConfig+0x40>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006006:	d00f      	beq.n	8006028 <TIM_Base_SetConfig+0x40>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a3d      	ldr	r2, [pc, #244]	; (8006100 <TIM_Base_SetConfig+0x118>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d00b      	beq.n	8006028 <TIM_Base_SetConfig+0x40>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a3c      	ldr	r2, [pc, #240]	; (8006104 <TIM_Base_SetConfig+0x11c>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d007      	beq.n	8006028 <TIM_Base_SetConfig+0x40>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a3b      	ldr	r2, [pc, #236]	; (8006108 <TIM_Base_SetConfig+0x120>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d003      	beq.n	8006028 <TIM_Base_SetConfig+0x40>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a3a      	ldr	r2, [pc, #232]	; (800610c <TIM_Base_SetConfig+0x124>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d108      	bne.n	800603a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a2f      	ldr	r2, [pc, #188]	; (80060fc <TIM_Base_SetConfig+0x114>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d01f      	beq.n	8006082 <TIM_Base_SetConfig+0x9a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006048:	d01b      	beq.n	8006082 <TIM_Base_SetConfig+0x9a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a2c      	ldr	r2, [pc, #176]	; (8006100 <TIM_Base_SetConfig+0x118>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d017      	beq.n	8006082 <TIM_Base_SetConfig+0x9a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a2b      	ldr	r2, [pc, #172]	; (8006104 <TIM_Base_SetConfig+0x11c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d013      	beq.n	8006082 <TIM_Base_SetConfig+0x9a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a2a      	ldr	r2, [pc, #168]	; (8006108 <TIM_Base_SetConfig+0x120>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d00f      	beq.n	8006082 <TIM_Base_SetConfig+0x9a>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a29      	ldr	r2, [pc, #164]	; (800610c <TIM_Base_SetConfig+0x124>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00b      	beq.n	8006082 <TIM_Base_SetConfig+0x9a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a28      	ldr	r2, [pc, #160]	; (8006110 <TIM_Base_SetConfig+0x128>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d007      	beq.n	8006082 <TIM_Base_SetConfig+0x9a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a27      	ldr	r2, [pc, #156]	; (8006114 <TIM_Base_SetConfig+0x12c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d003      	beq.n	8006082 <TIM_Base_SetConfig+0x9a>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a26      	ldr	r2, [pc, #152]	; (8006118 <TIM_Base_SetConfig+0x130>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d108      	bne.n	8006094 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4313      	orrs	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a10      	ldr	r2, [pc, #64]	; (80060fc <TIM_Base_SetConfig+0x114>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d00f      	beq.n	80060e0 <TIM_Base_SetConfig+0xf8>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a12      	ldr	r2, [pc, #72]	; (800610c <TIM_Base_SetConfig+0x124>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d00b      	beq.n	80060e0 <TIM_Base_SetConfig+0xf8>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a11      	ldr	r2, [pc, #68]	; (8006110 <TIM_Base_SetConfig+0x128>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d007      	beq.n	80060e0 <TIM_Base_SetConfig+0xf8>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a10      	ldr	r2, [pc, #64]	; (8006114 <TIM_Base_SetConfig+0x12c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d003      	beq.n	80060e0 <TIM_Base_SetConfig+0xf8>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a0f      	ldr	r2, [pc, #60]	; (8006118 <TIM_Base_SetConfig+0x130>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d103      	bne.n	80060e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	615a      	str	r2, [r3, #20]
}
 80060ee:	bf00      	nop
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	40012c00 	.word	0x40012c00
 8006100:	40000400 	.word	0x40000400
 8006104:	40000800 	.word	0x40000800
 8006108:	40000c00 	.word	0x40000c00
 800610c:	40013400 	.word	0x40013400
 8006110:	40014000 	.word	0x40014000
 8006114:	40014400 	.word	0x40014400
 8006118:	40014800 	.word	0x40014800

0800611c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	f023 0201 	bic.w	r2, r3, #1
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	011b      	lsls	r3, r3, #4
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	4313      	orrs	r3, r2
 8006150:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f023 030a 	bic.w	r3, r3, #10
 8006158:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	4313      	orrs	r3, r2
 8006160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	621a      	str	r2, [r3, #32]
}
 800616e:	bf00      	nop
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800617a:	b480      	push	{r7}
 800617c:	b087      	sub	sp, #28
 800617e:	af00      	add	r7, sp, #0
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	f023 0210 	bic.w	r2, r3, #16
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	031b      	lsls	r3, r3, #12
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	011b      	lsls	r3, r3, #4
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	621a      	str	r2, [r3, #32]
}
 80061ce:	bf00      	nop
 80061d0:	371c      	adds	r7, #28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061da:	b480      	push	{r7}
 80061dc:	b085      	sub	sp, #20
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	f043 0307 	orr.w	r3, r3, #7
 80061fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	609a      	str	r2, [r3, #8]
}
 8006204:	bf00      	nop
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800622a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	021a      	lsls	r2, r3, #8
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	431a      	orrs	r2, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	4313      	orrs	r3, r2
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	4313      	orrs	r3, r2
 800623c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	609a      	str	r2, [r3, #8]
}
 8006244:	bf00      	nop
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006260:	2b01      	cmp	r3, #1
 8006262:	d101      	bne.n	8006268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006264:	2302      	movs	r3, #2
 8006266:	e068      	b.n	800633a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a2e      	ldr	r2, [pc, #184]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d004      	beq.n	800629c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a2d      	ldr	r2, [pc, #180]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d108      	bne.n	80062ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	4313      	orrs	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a1e      	ldr	r2, [pc, #120]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d01d      	beq.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062da:	d018      	beq.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a1b      	ldr	r2, [pc, #108]	; (8006350 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d013      	beq.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a1a      	ldr	r2, [pc, #104]	; (8006354 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00e      	beq.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a18      	ldr	r2, [pc, #96]	; (8006358 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d009      	beq.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a13      	ldr	r2, [pc, #76]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d004      	beq.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a14      	ldr	r2, [pc, #80]	; (800635c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d10c      	bne.n	8006328 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006314:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	4313      	orrs	r3, r2
 800631e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	40012c00 	.word	0x40012c00
 800634c:	40013400 	.word	0x40013400
 8006350:	40000400 	.word	0x40000400
 8006354:	40000800 	.word	0x40000800
 8006358:	40000c00 	.word	0x40000c00
 800635c:	40014000 	.word	0x40014000

08006360 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <arm_sin_f32>:
 800639c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800641c <arm_sin_f32+0x80>
 80063a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80063a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80063a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80063b0:	d504      	bpl.n	80063bc <arm_sin_f32+0x20>
 80063b2:	ee17 3a90 	vmov	r3, s15
 80063b6:	3b01      	subs	r3, #1
 80063b8:	ee07 3a90 	vmov	s15, r3
 80063bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063c0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006420 <arm_sin_f32+0x84>
 80063c4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80063c8:	ee20 0a07 	vmul.f32	s0, s0, s14
 80063cc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80063d0:	ee17 3a90 	vmov	r3, s15
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063da:	d21a      	bcs.n	8006412 <arm_sin_f32+0x76>
 80063dc:	ee07 3a90 	vmov	s15, r3
 80063e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e4:	1c59      	adds	r1, r3, #1
 80063e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80063ea:	4a0e      	ldr	r2, [pc, #56]	; (8006424 <arm_sin_f32+0x88>)
 80063ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80063f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80063f4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80063f8:	ed93 7a00 	vldr	s14, [r3]
 80063fc:	edd2 6a00 	vldr	s13, [r2]
 8006400:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006404:	ee20 0a26 	vmul.f32	s0, s0, s13
 8006408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800640c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006410:	4770      	bx	lr
 8006412:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006416:	2101      	movs	r1, #1
 8006418:	2300      	movs	r3, #0
 800641a:	e7e6      	b.n	80063ea <arm_sin_f32+0x4e>
 800641c:	3e22f983 	.word	0x3e22f983
 8006420:	44000000 	.word	0x44000000
 8006424:	08006520 	.word	0x08006520

08006428 <memset>:
 8006428:	4402      	add	r2, r0
 800642a:	4603      	mov	r3, r0
 800642c:	4293      	cmp	r3, r2
 800642e:	d100      	bne.n	8006432 <memset+0xa>
 8006430:	4770      	bx	lr
 8006432:	f803 1b01 	strb.w	r1, [r3], #1
 8006436:	e7f9      	b.n	800642c <memset+0x4>

08006438 <__libc_init_array>:
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	4d0d      	ldr	r5, [pc, #52]	; (8006470 <__libc_init_array+0x38>)
 800643c:	4c0d      	ldr	r4, [pc, #52]	; (8006474 <__libc_init_array+0x3c>)
 800643e:	1b64      	subs	r4, r4, r5
 8006440:	10a4      	asrs	r4, r4, #2
 8006442:	2600      	movs	r6, #0
 8006444:	42a6      	cmp	r6, r4
 8006446:	d109      	bne.n	800645c <__libc_init_array+0x24>
 8006448:	4d0b      	ldr	r5, [pc, #44]	; (8006478 <__libc_init_array+0x40>)
 800644a:	4c0c      	ldr	r4, [pc, #48]	; (800647c <__libc_init_array+0x44>)
 800644c:	f000 f83c 	bl	80064c8 <_init>
 8006450:	1b64      	subs	r4, r4, r5
 8006452:	10a4      	asrs	r4, r4, #2
 8006454:	2600      	movs	r6, #0
 8006456:	42a6      	cmp	r6, r4
 8006458:	d105      	bne.n	8006466 <__libc_init_array+0x2e>
 800645a:	bd70      	pop	{r4, r5, r6, pc}
 800645c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006460:	4798      	blx	r3
 8006462:	3601      	adds	r6, #1
 8006464:	e7ee      	b.n	8006444 <__libc_init_array+0xc>
 8006466:	f855 3b04 	ldr.w	r3, [r5], #4
 800646a:	4798      	blx	r3
 800646c:	3601      	adds	r6, #1
 800646e:	e7f2      	b.n	8006456 <__libc_init_array+0x1e>
 8006470:	08006d24 	.word	0x08006d24
 8006474:	08006d24 	.word	0x08006d24
 8006478:	08006d24 	.word	0x08006d24
 800647c:	08006d28 	.word	0x08006d28

08006480 <roundf>:
 8006480:	ee10 0a10 	vmov	r0, s0
 8006484:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8006488:	3a7f      	subs	r2, #127	; 0x7f
 800648a:	2a16      	cmp	r2, #22
 800648c:	dc15      	bgt.n	80064ba <roundf+0x3a>
 800648e:	2a00      	cmp	r2, #0
 8006490:	da08      	bge.n	80064a4 <roundf+0x24>
 8006492:	3201      	adds	r2, #1
 8006494:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006498:	d101      	bne.n	800649e <roundf+0x1e>
 800649a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800649e:	ee00 3a10 	vmov	s0, r3
 80064a2:	4770      	bx	lr
 80064a4:	4907      	ldr	r1, [pc, #28]	; (80064c4 <roundf+0x44>)
 80064a6:	4111      	asrs	r1, r2
 80064a8:	4208      	tst	r0, r1
 80064aa:	d0fa      	beq.n	80064a2 <roundf+0x22>
 80064ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80064b0:	4113      	asrs	r3, r2
 80064b2:	4403      	add	r3, r0
 80064b4:	ea23 0301 	bic.w	r3, r3, r1
 80064b8:	e7f1      	b.n	800649e <roundf+0x1e>
 80064ba:	2a80      	cmp	r2, #128	; 0x80
 80064bc:	d1f1      	bne.n	80064a2 <roundf+0x22>
 80064be:	ee30 0a00 	vadd.f32	s0, s0, s0
 80064c2:	4770      	bx	lr
 80064c4:	007fffff 	.word	0x007fffff

080064c8 <_init>:
 80064c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ca:	bf00      	nop
 80064cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ce:	bc08      	pop	{r3}
 80064d0:	469e      	mov	lr, r3
 80064d2:	4770      	bx	lr

080064d4 <_fini>:
 80064d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d6:	bf00      	nop
 80064d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064da:	bc08      	pop	{r3}
 80064dc:	469e      	mov	lr, r3
 80064de:	4770      	bx	lr
